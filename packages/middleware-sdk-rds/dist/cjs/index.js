"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCrossRegionPresignedUrlPlugin = exports.crossRegionPresignedUrlMiddlewareOptions = exports.crossRegionPresignedUrlMiddleware = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const signature_v4_1 = require("@aws-sdk/signature-v4");
const util_format_url_1 = require("@aws-sdk/util-format-url");
const util_uri_escape_1 = require("@aws-sdk/util-uri-escape");
const regARN = /arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?/;
const sourceIds = [
    "SourceDBSnapshotIdentifier",
    "SourceDBInstanceIdentifier",
    "ReplicationSourceIdentifier",
    "SourceDBClusterSnapshotIdentifier",
];
const sourceIdToCommandKeyMap = {
    SourceDBSnapshotIdentifier: "CopyDBSnapshot",
    SourceDBInstanceIdentifier: "CreateDBInstanceReadReplica",
    ReplicationSourceIdentifier: "CreateDBCluster",
    SourceDBClusterSnapshotIdentifier: "CopyDBClusterSnapshot",
};
const version = "2014-10-31";
/**
 * Config of the middleware to automatically add presigned URL to request.
 * The presigned URL is generated by sigV4
 */
function crossRegionPresignedUrlMiddleware(options) {
    return (next) => async (args) => {
        const { input } = args;
        const region = await options.region();
        let command, sourceId;
        for (const id of sourceIds) {
            if (input.hasOwnProperty(id)) {
                sourceId = id;
                command = sourceIdToCommandKeyMap[id];
            }
        }
        if (!sourceId) {
            throw new Error("Source identifier key not set");
        }
        if (!input.PreSignedUrl && isARN(input[sourceId]) && region !== getEndpointFromARN(input[sourceId])) {
            const sourceRegion = getEndpointFromARN(input[sourceId]);
            const resolvedEndpoint = await options.endpoint();
            resolvedEndpoint.hostname = `rds.${sourceRegion}.amazonaws.com`;
            const request = new protocol_http_1.HttpRequest({
                ...resolvedEndpoint,
                protocol: "https",
                headers: {
                    host: resolvedEndpoint.hostname,
                },
                query: {
                    Action: command,
                    Version: version,
                    KmsKeyId: input.KmsKeyId,
                    DestinationRegion: region,
                    [sourceId]: input[sourceId],
                },
            });
            const signer = new signature_v4_1.SignatureV4({
                credentials: options.credentials,
                region: sourceRegion,
                service: "rds",
                sha256: options.sha256,
                uriEscapePath: options.signingEscapePath,
            });
            const presignedRequest = await signer.presign(request, {
                expiresIn: 3600,
            });
            args = {
                ...args,
                input: {
                    ...args.input,
                    PreSignedUrl: util_uri_escape_1.escapeUri(util_format_url_1.formatUrl(presignedRequest)),
                },
            };
        }
        return next(args);
    };
}
exports.crossRegionPresignedUrlMiddleware = crossRegionPresignedUrlMiddleware;
exports.crossRegionPresignedUrlMiddlewareOptions = {
    step: "initialize",
    tags: ["CROSS_REGION_PRESIGNED_URL"],
    name: "crossRegionPresignedUrlMiddleware",
    override: true,
};
const getCrossRegionPresignedUrlPlugin = (config) => ({
    applyToStack: (clientStack) => {
        clientStack.add(crossRegionPresignedUrlMiddleware(config), exports.crossRegionPresignedUrlMiddlewareOptions);
    },
});
exports.getCrossRegionPresignedUrlPlugin = getCrossRegionPresignedUrlPlugin;
function isARN(id) {
    if (!id)
        return false;
    return regARN.test(id);
}
function getEndpointFromARN(arn) {
    const arnArr = arn.split(":");
    if (arnArr.length < 4) {
        throw new Error(`Cannot infer endpoint from '${arn}'`);
    }
    return arnArr[3];
}
//# sourceMappingURL=data:application/json;base64,