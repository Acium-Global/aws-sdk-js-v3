import { __assign, __awaiter, __generator, __values } from "tslib";
import { HttpRequest } from "@aws-sdk/protocol-http";
import { SignatureV4 } from "@aws-sdk/signature-v4";
import { formatUrl } from "@aws-sdk/util-format-url";
import { escapeUri } from "@aws-sdk/util-uri-escape";
var regARN = /arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?/;
var sourceIds = [
    "SourceDBSnapshotIdentifier",
    "SourceDBInstanceIdentifier",
    "ReplicationSourceIdentifier",
    "SourceDBClusterSnapshotIdentifier",
];
var sourceIdToCommandKeyMap = {
    SourceDBSnapshotIdentifier: "CopyDBSnapshot",
    SourceDBInstanceIdentifier: "CreateDBInstanceReadReplica",
    ReplicationSourceIdentifier: "CreateDBCluster",
    SourceDBClusterSnapshotIdentifier: "CopyDBClusterSnapshot",
};
var version = "2014-10-31";
/**
 * Config of the middleware to automatically add presigned URL to request.
 * The presigned URL is generated by sigV4
 */
export function crossRegionPresignedUrlMiddleware(options) {
    var _this = this;
    return function (next) {
        return function (args) { return __awaiter(_this, void 0, void 0, function () {
            var input, region, command, sourceId, sourceIds_1, sourceIds_1_1, id, sourceRegion, resolvedEndpoint, request, signer, presignedRequest;
            var e_1, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        input = args.input;
                        return [4 /*yield*/, options.region()];
                    case 1:
                        region = _c.sent();
                        try {
                            for (sourceIds_1 = __values(sourceIds), sourceIds_1_1 = sourceIds_1.next(); !sourceIds_1_1.done; sourceIds_1_1 = sourceIds_1.next()) {
                                id = sourceIds_1_1.value;
                                if (input.hasOwnProperty(id)) {
                                    sourceId = id;
                                    command = sourceIdToCommandKeyMap[id];
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (sourceIds_1_1 && !sourceIds_1_1.done && (_a = sourceIds_1.return)) _a.call(sourceIds_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        if (!sourceId) {
                            throw new Error("Source identifier key not set");
                        }
                        if (!(!input.PreSignedUrl && isARN(input[sourceId]) && region !== getEndpointFromARN(input[sourceId]))) return [3 /*break*/, 4];
                        sourceRegion = getEndpointFromARN(input[sourceId]);
                        return [4 /*yield*/, options.endpoint()];
                    case 2:
                        resolvedEndpoint = _c.sent();
                        resolvedEndpoint.hostname = "rds." + sourceRegion + ".amazonaws.com";
                        request = new HttpRequest(__assign(__assign({}, resolvedEndpoint), { protocol: "https", headers: {
                                host: resolvedEndpoint.hostname,
                            }, query: (_b = {
                                    Action: command,
                                    Version: version,
                                    KmsKeyId: input.KmsKeyId,
                                    DestinationRegion: region
                                },
                                _b[sourceId] = input[sourceId],
                                _b) }));
                        signer = new SignatureV4({
                            credentials: options.credentials,
                            region: sourceRegion,
                            service: "rds",
                            sha256: options.sha256,
                            uriEscapePath: options.signingEscapePath,
                        });
                        return [4 /*yield*/, signer.presign(request, {
                                expiresIn: 3600,
                            })];
                    case 3:
                        presignedRequest = _c.sent();
                        args = __assign(__assign({}, args), { input: __assign(__assign({}, args.input), { PreSignedUrl: escapeUri(formatUrl(presignedRequest)) }) });
                        _c.label = 4;
                    case 4: return [2 /*return*/, next(args)];
                }
            });
        }); };
    };
}
export var crossRegionPresignedUrlMiddlewareOptions = {
    step: "initialize",
    tags: ["CROSS_REGION_PRESIGNED_URL"],
    name: "crossRegionPresignedUrlMiddleware",
    override: true,
};
export var getCrossRegionPresignedUrlPlugin = function (config) { return ({
    applyToStack: function (clientStack) {
        clientStack.add(crossRegionPresignedUrlMiddleware(config), crossRegionPresignedUrlMiddlewareOptions);
    },
}); };
function isARN(id) {
    if (!id)
        return false;
    return regARN.test(id);
}
function getEndpointFromARN(arn) {
    var arnArr = arn.split(":");
    if (arnArr.length < 4) {
        throw new Error("Cannot infer endpoint from '" + arn + "'");
    }
    return arnArr[3];
}
//# sourceMappingURL=data:application/json;base64,