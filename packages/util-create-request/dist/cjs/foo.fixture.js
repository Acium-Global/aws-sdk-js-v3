"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.httpRequest = exports.operationCommand = exports.fooClient = void 0;
const middleware_stack_1 = require("@aws-sdk/middleware-stack");
const protocol_http_1 = require("@aws-sdk/protocol-http");
const output = { Data: "data", $metadata: {} };
const input = { String: "input" };
exports.fooClient = {
    config: {},
    middlewareStack: middleware_stack_1.constructStack(),
    send: (command) => command.resolveMiddleware(exports.fooClient.middlewareStack, exports.fooClient.config, undefined)({ input }),
    destroy: () => { },
};
exports.operationCommand = {
    middlewareStack: middleware_stack_1.constructStack(),
    input: {},
    // @ts-ignore
    resolveMiddleware: (stack) => {
        const concatStack = stack.concat(exports.operationCommand.middlewareStack);
        return concatStack.resolve(() => Promise.resolve({ output, response: {} }), {});
    },
};
exports.httpRequest = new protocol_http_1.HttpRequest({
    protocol: "https:",
    path: "/foo",
    hostname: "foo-service.us-east-1.amazonaws.com",
    headers: {},
    method: "GET",
    body: "",
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9vLmZpeHR1cmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZm9vLmZpeHR1cmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsZ0VBQTJEO0FBQzNELDBEQUFxRDtBQWlCckQsTUFBTSxNQUFNLEdBQW9CLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLENBQUM7QUFFaEUsTUFBTSxLQUFLLEdBQW1CLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxDQUFDO0FBRXJDLFFBQUEsU0FBUyxHQUF3RDtJQUM1RSxNQUFNLEVBQUUsRUFBRTtJQUNWLGVBQWUsRUFBRSxpQ0FBYyxFQUFxQztJQUNwRSxJQUFJLEVBQUUsQ0FBQyxPQUF5RixFQUFFLEVBQUUsQ0FDbEcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLGlCQUFTLENBQUMsZUFBZSxFQUFFLGlCQUFTLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUM7SUFDOUYsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFFLENBQUM7Q0FDbEIsQ0FBQztBQUVXLFFBQUEsZ0JBQWdCLEdBQW9GO0lBQy9HLGVBQWUsRUFBRSxpQ0FBYyxFQUFvQztJQUNuRSxLQUFLLEVBQUUsRUFBUztJQUNoQixhQUFhO0lBQ2IsaUJBQWlCLEVBQUUsQ0FBQyxLQUF5RCxFQUFFLEVBQUU7UUFDL0UsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyx3QkFBZ0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNuRSxPQUFPLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFTLENBQUMsQ0FBQztJQUN6RixDQUFDO0NBQ0YsQ0FBQztBQUVXLFFBQUEsV0FBVyxHQUFHLElBQUksMkJBQVcsQ0FBQztJQUN6QyxRQUFRLEVBQUUsUUFBUTtJQUNsQixJQUFJLEVBQUUsTUFBTTtJQUNaLFFBQVEsRUFBRSxxQ0FBcUM7SUFDL0MsT0FBTyxFQUFFLEVBQUU7SUFDWCxNQUFNLEVBQUUsS0FBSztJQUNiLElBQUksRUFBRSxFQUFFO0NBQ1QsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29uc3RydWN0U3RhY2sgfSBmcm9tIFwiQGF3cy1zZGsvbWlkZGxld2FyZS1zdGFja1wiO1xuaW1wb3J0IHsgSHR0cFJlcXVlc3QgfSBmcm9tIFwiQGF3cy1zZGsvcHJvdG9jb2wtaHR0cFwiO1xuaW1wb3J0IHsgQ2xpZW50LCBDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IE1ldGFkYXRhQmVhcmVyLCBNaWRkbGV3YXJlU3RhY2sgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBPcGVyYXRpb25JbnB1dCB7XG4gIFN0cmluZzogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBJbnB1dFR5cGVzVW5pb24gPSBPcGVyYXRpb25JbnB1dDtcblxuZXhwb3J0IGludGVyZmFjZSBPcGVyYXRpb25PdXRwdXQgZXh0ZW5kcyBNZXRhZGF0YUJlYXJlciB7XG4gIERhdGE6IHN0cmluZztcbiAgJG1ldGFkYXRhOiB7fTtcbn1cblxuZXhwb3J0IHR5cGUgT3V0cHV0VHlwZXNVbmlvbiA9IE9wZXJhdGlvbk91dHB1dDtcblxuY29uc3Qgb3V0cHV0OiBPcGVyYXRpb25PdXRwdXQgPSB7IERhdGE6IFwiZGF0YVwiLCAkbWV0YWRhdGE6IHt9IH07XG5cbmNvbnN0IGlucHV0OiBPcGVyYXRpb25JbnB1dCA9IHsgU3RyaW5nOiBcImlucHV0XCIgfTtcblxuZXhwb3J0IGNvbnN0IGZvb0NsaWVudDogQ2xpZW50PGFueSwgSW5wdXRUeXBlc1VuaW9uLCBPdXRwdXRUeXBlc1VuaW9uLCBhbnk+ID0ge1xuICBjb25maWc6IHt9LFxuICBtaWRkbGV3YXJlU3RhY2s6IGNvbnN0cnVjdFN0YWNrPElucHV0VHlwZXNVbmlvbiwgT3V0cHV0VHlwZXNVbmlvbj4oKSxcbiAgc2VuZDogKGNvbW1hbmQ6IENvbW1hbmQ8SW5wdXRUeXBlc1VuaW9uLCBPdXRwdXRUeXBlc1VuaW9uLCBhbnksIE9wZXJhdGlvbklucHV0LCBPcGVyYXRpb25PdXRwdXQ+KSA9PlxuICAgIGNvbW1hbmQucmVzb2x2ZU1pZGRsZXdhcmUoZm9vQ2xpZW50Lm1pZGRsZXdhcmVTdGFjaywgZm9vQ2xpZW50LmNvbmZpZywgdW5kZWZpbmVkKSh7IGlucHV0IH0pLFxuICBkZXN0cm95OiAoKSA9PiB7fSxcbn07XG5cbmV4cG9ydCBjb25zdCBvcGVyYXRpb25Db21tYW5kOiBDb21tYW5kPElucHV0VHlwZXNVbmlvbiwgT3V0cHV0VHlwZXNVbmlvbiwgYW55LCBPcGVyYXRpb25JbnB1dCwgTWV0YWRhdGFCZWFyZXI+ID0ge1xuICBtaWRkbGV3YXJlU3RhY2s6IGNvbnN0cnVjdFN0YWNrPE9wZXJhdGlvbklucHV0LCBPdXRwdXRUeXBlc1VuaW9uPigpLFxuICBpbnB1dDoge30gYXMgYW55LFxuICAvLyBAdHMtaWdub3JlXG4gIHJlc29sdmVNaWRkbGV3YXJlOiAoc3RhY2s6IE1pZGRsZXdhcmVTdGFjazxJbnB1dFR5cGVzVW5pb24sIE91dHB1dFR5cGVzVW5pb24+KSA9PiB7XG4gICAgY29uc3QgY29uY2F0U3RhY2sgPSBzdGFjay5jb25jYXQob3BlcmF0aW9uQ29tbWFuZC5taWRkbGV3YXJlU3RhY2spO1xuICAgIHJldHVybiBjb25jYXRTdGFjay5yZXNvbHZlKCgpID0+IFByb21pc2UucmVzb2x2ZSh7IG91dHB1dCwgcmVzcG9uc2U6IHt9IH0pLCB7fSBhcyBhbnkpO1xuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IGh0dHBSZXF1ZXN0ID0gbmV3IEh0dHBSZXF1ZXN0KHtcbiAgcHJvdG9jb2w6IFwiaHR0cHM6XCIsXG4gIHBhdGg6IFwiL2Zvb1wiLFxuICBob3N0bmFtZTogXCJmb28tc2VydmljZS51cy1lYXN0LTEuYW1hem9uYXdzLmNvbVwiLFxuICBoZWFkZXJzOiB7fSxcbiAgbWV0aG9kOiBcIkdFVFwiLFxuICBib2R5OiBcIlwiLFxufSk7XG4iXX0=