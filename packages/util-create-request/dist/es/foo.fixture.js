import { constructStack } from "@aws-sdk/middleware-stack";
import { HttpRequest } from "@aws-sdk/protocol-http";
var output = { Data: "data", $metadata: {} };
var input = { String: "input" };
export var fooClient = {
    config: {},
    middlewareStack: constructStack(),
    send: function (command) {
        return command.resolveMiddleware(fooClient.middlewareStack, fooClient.config, undefined)({ input: input });
    },
    destroy: function () { },
};
export var operationCommand = {
    middlewareStack: constructStack(),
    input: {},
    // @ts-ignore
    resolveMiddleware: function (stack) {
        var concatStack = stack.concat(operationCommand.middlewareStack);
        return concatStack.resolve(function () { return Promise.resolve({ output: output, response: {} }); }, {});
    },
};
export var httpRequest = new HttpRequest({
    protocol: "https:",
    path: "/foo",
    hostname: "foo-service.us-east-1.amazonaws.com",
    headers: {},
    method: "GET",
    body: "",
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9vLmZpeHR1cmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZm9vLmZpeHR1cmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzNELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQWlCckQsSUFBTSxNQUFNLEdBQW9CLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLENBQUM7QUFFaEUsSUFBTSxLQUFLLEdBQW1CLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxDQUFDO0FBRWxELE1BQU0sQ0FBQyxJQUFNLFNBQVMsR0FBd0Q7SUFDNUUsTUFBTSxFQUFFLEVBQUU7SUFDVixlQUFlLEVBQUUsY0FBYyxFQUFxQztJQUNwRSxJQUFJLEVBQUUsVUFBQyxPQUF5RjtRQUM5RixPQUFBLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsZUFBZSxFQUFFLFNBQVMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUMsRUFBRSxLQUFLLE9BQUEsRUFBRSxDQUFDO0lBQTVGLENBQTRGO0lBQzlGLE9BQU8sRUFBRSxjQUFPLENBQUM7Q0FDbEIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLGdCQUFnQixHQUFvRjtJQUMvRyxlQUFlLEVBQUUsY0FBYyxFQUFvQztJQUNuRSxLQUFLLEVBQUUsRUFBUztJQUNoQixhQUFhO0lBQ2IsaUJBQWlCLEVBQUUsVUFBQyxLQUF5RDtRQUMzRSxJQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ25FLE9BQU8sV0FBVyxDQUFDLE9BQU8sQ0FBQyxjQUFNLE9BQUEsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLE1BQU0sUUFBQSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUF6QyxDQUF5QyxFQUFFLEVBQVMsQ0FBQyxDQUFDO0lBQ3pGLENBQUM7Q0FDRixDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sV0FBVyxHQUFHLElBQUksV0FBVyxDQUFDO0lBQ3pDLFFBQVEsRUFBRSxRQUFRO0lBQ2xCLElBQUksRUFBRSxNQUFNO0lBQ1osUUFBUSxFQUFFLHFDQUFxQztJQUMvQyxPQUFPLEVBQUUsRUFBRTtJQUNYLE1BQU0sRUFBRSxLQUFLO0lBQ2IsSUFBSSxFQUFFLEVBQUU7Q0FDVCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25zdHJ1Y3RTdGFjayB9IGZyb20gXCJAYXdzLXNkay9taWRkbGV3YXJlLXN0YWNrXCI7XG5pbXBvcnQgeyBIdHRwUmVxdWVzdCB9IGZyb20gXCJAYXdzLXNkay9wcm90b2NvbC1odHRwXCI7XG5pbXBvcnQgeyBDbGllbnQsIENvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgTWV0YWRhdGFCZWFyZXIsIE1pZGRsZXdhcmVTdGFjayB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIE9wZXJhdGlvbklucHV0IHtcbiAgU3RyaW5nOiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIElucHV0VHlwZXNVbmlvbiA9IE9wZXJhdGlvbklucHV0O1xuXG5leHBvcnQgaW50ZXJmYWNlIE9wZXJhdGlvbk91dHB1dCBleHRlbmRzIE1ldGFkYXRhQmVhcmVyIHtcbiAgRGF0YTogc3RyaW5nO1xuICAkbWV0YWRhdGE6IHt9O1xufVxuXG5leHBvcnQgdHlwZSBPdXRwdXRUeXBlc1VuaW9uID0gT3BlcmF0aW9uT3V0cHV0O1xuXG5jb25zdCBvdXRwdXQ6IE9wZXJhdGlvbk91dHB1dCA9IHsgRGF0YTogXCJkYXRhXCIsICRtZXRhZGF0YToge30gfTtcblxuY29uc3QgaW5wdXQ6IE9wZXJhdGlvbklucHV0ID0geyBTdHJpbmc6IFwiaW5wdXRcIiB9O1xuXG5leHBvcnQgY29uc3QgZm9vQ2xpZW50OiBDbGllbnQ8YW55LCBJbnB1dFR5cGVzVW5pb24sIE91dHB1dFR5cGVzVW5pb24sIGFueT4gPSB7XG4gIGNvbmZpZzoge30sXG4gIG1pZGRsZXdhcmVTdGFjazogY29uc3RydWN0U3RhY2s8SW5wdXRUeXBlc1VuaW9uLCBPdXRwdXRUeXBlc1VuaW9uPigpLFxuICBzZW5kOiAoY29tbWFuZDogQ29tbWFuZDxJbnB1dFR5cGVzVW5pb24sIE91dHB1dFR5cGVzVW5pb24sIGFueSwgT3BlcmF0aW9uSW5wdXQsIE9wZXJhdGlvbk91dHB1dD4pID0+XG4gICAgY29tbWFuZC5yZXNvbHZlTWlkZGxld2FyZShmb29DbGllbnQubWlkZGxld2FyZVN0YWNrLCBmb29DbGllbnQuY29uZmlnLCB1bmRlZmluZWQpKHsgaW5wdXQgfSksXG4gIGRlc3Ryb3k6ICgpID0+IHt9LFxufTtcblxuZXhwb3J0IGNvbnN0IG9wZXJhdGlvbkNvbW1hbmQ6IENvbW1hbmQ8SW5wdXRUeXBlc1VuaW9uLCBPdXRwdXRUeXBlc1VuaW9uLCBhbnksIE9wZXJhdGlvbklucHV0LCBNZXRhZGF0YUJlYXJlcj4gPSB7XG4gIG1pZGRsZXdhcmVTdGFjazogY29uc3RydWN0U3RhY2s8T3BlcmF0aW9uSW5wdXQsIE91dHB1dFR5cGVzVW5pb24+KCksXG4gIGlucHV0OiB7fSBhcyBhbnksXG4gIC8vIEB0cy1pZ25vcmVcbiAgcmVzb2x2ZU1pZGRsZXdhcmU6IChzdGFjazogTWlkZGxld2FyZVN0YWNrPElucHV0VHlwZXNVbmlvbiwgT3V0cHV0VHlwZXNVbmlvbj4pID0+IHtcbiAgICBjb25zdCBjb25jYXRTdGFjayA9IHN0YWNrLmNvbmNhdChvcGVyYXRpb25Db21tYW5kLm1pZGRsZXdhcmVTdGFjayk7XG4gICAgcmV0dXJuIGNvbmNhdFN0YWNrLnJlc29sdmUoKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHsgb3V0cHV0LCByZXNwb25zZToge30gfSksIHt9IGFzIGFueSk7XG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgaHR0cFJlcXVlc3QgPSBuZXcgSHR0cFJlcXVlc3Qoe1xuICBwcm90b2NvbDogXCJodHRwczpcIixcbiAgcGF0aDogXCIvZm9vXCIsXG4gIGhvc3RuYW1lOiBcImZvby1zZXJ2aWNlLnVzLWVhc3QtMS5hbWF6b25hd3MuY29tXCIsXG4gIGhlYWRlcnM6IHt9LFxuICBtZXRob2Q6IFwiR0VUXCIsXG4gIGJvZHk6IFwiXCIsXG59KTtcbiJdfQ==