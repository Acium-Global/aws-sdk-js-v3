"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRedirectFromPostIdPlugin = exports.redirectFromPostIdMiddlewareOptions = exports.redirectFromPostIdMiddleware = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const constants_1 = require("./constants");
const process_arnables_plugin_1 = require("./process-arnables-plugin");
/**
 * If OutpostId is set, redirect hostname to Outpost one, and change signing service to `s3-outposts`.
 * Applied to S3Control.CreateBucket and S3Control.ListRegionalBuckets
 */
const redirectFromPostIdMiddleware = ({ isCustomEndpoint }) => (next, context) => (args) => {
    const { input, request } = args;
    if (!protocol_http_1.HttpRequest.isInstance(request))
        return next(args);
    if (input.OutpostId) {
        request.hostname = process_arnables_plugin_1.getOutpostEndpoint(request.hostname, { isCustomEndpoint });
        context[constants_1.CONTEXT_SIGNING_SERVICE] = "s3-outposts";
    }
    return next(args);
};
exports.redirectFromPostIdMiddleware = redirectFromPostIdMiddleware;
exports.redirectFromPostIdMiddlewareOptions = {
    step: "build",
    name: "redirectFromPostIdMiddleware",
    tags: ["OUTPOST"],
    override: true,
};
const getRedirectFromPostIdPlugin = (options) => ({
    applyToStack: (clientStack) => {
        clientStack.add(exports.redirectFromPostIdMiddleware(options), exports.redirectFromPostIdMiddlewareOptions);
    },
});
exports.getRedirectFromPostIdPlugin = getRedirectFromPostIdPlugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkaXJlY3QtZnJvbS1wb3N0aWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmVkaXJlY3QtZnJvbS1wb3N0aWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMERBQXFEO0FBSXJELDJDQUFzRDtBQUN0RCx1RUFBK0Q7QUFNL0Q7OztHQUdHO0FBQ0ksTUFBTSw0QkFBNEIsR0FDdkMsQ0FBQyxFQUFFLGdCQUFnQixFQUFpQyxFQUFtQyxFQUFFLENBQ3pGLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQ2xCLENBQUMsSUFBSSxFQUFFLEVBQUU7SUFDUCxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQztJQUNoQyxJQUFJLENBQUMsMkJBQVcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDO1FBQUUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEQsSUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFO1FBQ25CLE9BQU8sQ0FBQyxRQUFRLEdBQUcsNENBQWtCLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQztRQUM5RSxPQUFPLENBQUMsbUNBQXVCLENBQUMsR0FBRyxhQUFhLENBQUM7S0FDbEQ7SUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNwQixDQUFDLENBQUM7QUFYUyxRQUFBLDRCQUE0QixnQ0FXckM7QUFFUyxRQUFBLG1DQUFtQyxHQUF3QjtJQUN0RSxJQUFJLEVBQUUsT0FBTztJQUNiLElBQUksRUFBRSw4QkFBOEI7SUFDcEMsSUFBSSxFQUFFLENBQUMsU0FBUyxDQUFDO0lBQ2pCLFFBQVEsRUFBRSxJQUFJO0NBQ2YsQ0FBQztBQUVLLE1BQU0sMkJBQTJCLEdBQUcsQ0FBQyxPQUFnQyxFQUF1QixFQUFFLENBQUMsQ0FBQztJQUNyRyxZQUFZLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFBRTtRQUM1QixXQUFXLENBQUMsR0FBRyxDQUFDLG9DQUE0QixDQUFDLE9BQU8sQ0FBQyxFQUFFLDJDQUFtQyxDQUFDLENBQUM7SUFDOUYsQ0FBQztDQUNGLENBQUMsQ0FBQztBQUpVLFFBQUEsMkJBQTJCLCtCQUlyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBSZXF1ZXN0IH0gZnJvbSBcIkBhd3Mtc2RrL3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IEJ1aWxkSGFuZGxlck9wdGlvbnMsIEJ1aWxkTWlkZGxld2FyZSwgUGx1Z2dhYmxlIH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5cbmltcG9ydCB7IFMzQ29udHJvbFJlc29sdmVkQ29uZmlnIH0gZnJvbSBcIi4vY29uZmlndXJhdGlvbnNcIjtcbmltcG9ydCB7IENPTlRFWFRfU0lHTklOR19TRVJWSUNFIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBnZXRPdXRwb3N0RW5kcG9pbnQgfSBmcm9tIFwiLi9wcm9jZXNzLWFybmFibGVzLXBsdWdpblwiO1xuXG50eXBlIElucHV0VHlwZSA9IHtcbiAgT3V0cG9zdElkPzogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBJZiBPdXRwb3N0SWQgaXMgc2V0LCByZWRpcmVjdCBob3N0bmFtZSB0byBPdXRwb3N0IG9uZSwgYW5kIGNoYW5nZSBzaWduaW5nIHNlcnZpY2UgdG8gYHMzLW91dHBvc3RzYC5cbiAqIEFwcGxpZWQgdG8gUzNDb250cm9sLkNyZWF0ZUJ1Y2tldCBhbmQgUzNDb250cm9sLkxpc3RSZWdpb25hbEJ1Y2tldHNcbiAqL1xuZXhwb3J0IGNvbnN0IHJlZGlyZWN0RnJvbVBvc3RJZE1pZGRsZXdhcmUgPVxuICAoeyBpc0N1c3RvbUVuZHBvaW50IH06IHsgaXNDdXN0b21FbmRwb2ludDogYm9vbGVhbiB9KTogQnVpbGRNaWRkbGV3YXJlPElucHV0VHlwZSwgYW55PiA9PlxuICAobmV4dCwgY29udGV4dCkgPT5cbiAgKGFyZ3MpID0+IHtcbiAgICBjb25zdCB7IGlucHV0LCByZXF1ZXN0IH0gPSBhcmdzO1xuICAgIGlmICghSHR0cFJlcXVlc3QuaXNJbnN0YW5jZShyZXF1ZXN0KSkgcmV0dXJuIG5leHQoYXJncyk7XG4gICAgaWYgKGlucHV0Lk91dHBvc3RJZCkge1xuICAgICAgcmVxdWVzdC5ob3N0bmFtZSA9IGdldE91dHBvc3RFbmRwb2ludChyZXF1ZXN0Lmhvc3RuYW1lLCB7IGlzQ3VzdG9tRW5kcG9pbnQgfSk7XG4gICAgICBjb250ZXh0W0NPTlRFWFRfU0lHTklOR19TRVJWSUNFXSA9IFwiczMtb3V0cG9zdHNcIjtcbiAgICB9XG4gICAgcmV0dXJuIG5leHQoYXJncyk7XG4gIH07XG5cbmV4cG9ydCBjb25zdCByZWRpcmVjdEZyb21Qb3N0SWRNaWRkbGV3YXJlT3B0aW9uczogQnVpbGRIYW5kbGVyT3B0aW9ucyA9IHtcbiAgc3RlcDogXCJidWlsZFwiLFxuICBuYW1lOiBcInJlZGlyZWN0RnJvbVBvc3RJZE1pZGRsZXdhcmVcIixcbiAgdGFnczogW1wiT1VUUE9TVFwiXSxcbiAgb3ZlcnJpZGU6IHRydWUsXG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UmVkaXJlY3RGcm9tUG9zdElkUGx1Z2luID0gKG9wdGlvbnM6IFMzQ29udHJvbFJlc29sdmVkQ29uZmlnKTogUGx1Z2dhYmxlPGFueSwgYW55PiA9PiAoe1xuICBhcHBseVRvU3RhY2s6IChjbGllbnRTdGFjaykgPT4ge1xuICAgIGNsaWVudFN0YWNrLmFkZChyZWRpcmVjdEZyb21Qb3N0SWRNaWRkbGV3YXJlKG9wdGlvbnMpLCByZWRpcmVjdEZyb21Qb3N0SWRNaWRkbGV3YXJlT3B0aW9ucyk7XG4gIH0sXG59KTtcbiJdfQ==