"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateArnablesRequestMiddlewareOptions = exports.getOutpostEndpoint = exports.updateArnablesRequestMiddleware = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const constants_1 = require("../constants");
const ACCOUNT_ID_HEADER = "x-amz-account-id";
const OUTPOST_ID_HEADER = "x-amz-outpost-id";
const REGEX_S3CONTROL_HOSTNAME = /^(.+\.)?s3-control[.-]([a-z0-9-]+)\./;
/**
 * After outpost request is constructed, redirect request to outpost endpoint and set `x-amz-account-id` and
 * `x-amz-outpost-id` headers.
 */
const updateArnablesRequestMiddleware = ({ isCustomEndpoint }) => (next, context) => (args) => {
    const { request } = args;
    if (!protocol_http_1.HttpRequest.isInstance(request))
        return next(args);
    if (context[constants_1.CONTEXT_ACCOUNT_ID])
        request.headers[ACCOUNT_ID_HEADER] = context[constants_1.CONTEXT_ACCOUNT_ID];
    if (context[constants_1.CONTEXT_OUTPOST_ID]) {
        request.headers[OUTPOST_ID_HEADER] = context[constants_1.CONTEXT_OUTPOST_ID];
        request.hostname = exports.getOutpostEndpoint(request.hostname, {
            isCustomEndpoint,
            regionOverride: context[constants_1.CONTEXT_ARN_REGION],
        });
    }
    return next(args);
};
exports.updateArnablesRequestMiddleware = updateArnablesRequestMiddleware;
const getOutpostEndpoint = (hostname, { isCustomEndpoint, regionOverride } = {}) => {
    const [matched, prefix, region] = hostname.match(REGEX_S3CONTROL_HOSTNAME);
    // hostname prefix will be ignored even if presents
    return isCustomEndpoint
        ? hostname
        : ["s3-outposts", regionOverride || region, hostname.replace(new RegExp(`^${matched}`), "")]
            .filter((part) => part !== undefined)
            .join(".");
};
exports.getOutpostEndpoint = getOutpostEndpoint;
exports.updateArnablesRequestMiddlewareOptions = {
    step: "build",
    name: "updateArnablesRequestMiddleware",
    tags: ["ACCOUNT_ID", "OUTPOST_ID", "OUTPOST"],
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLWFybmFibGVzLXJlcXVlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJvY2Vzcy1hcm5hYmxlcy1wbHVnaW4vdXBkYXRlLWFybmFibGVzLXJlcXVlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMERBQXFEO0FBSXJELDRDQUEwRjtBQUUxRixNQUFNLGlCQUFpQixHQUFHLGtCQUFrQixDQUFDO0FBQzdDLE1BQU0saUJBQWlCLEdBQUcsa0JBQWtCLENBQUM7QUFDN0MsTUFBTSx3QkFBd0IsR0FBRyxzQ0FBc0MsQ0FBQztBQUV4RTs7O0dBR0c7QUFDSSxNQUFNLCtCQUErQixHQUMxQyxDQUFDLEVBQUUsZ0JBQWdCLEVBQWlDLEVBQTZCLEVBQUUsQ0FDbkYsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FDbEIsQ0FBQyxJQUFJLEVBQUUsRUFBRTtJQUNQLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFDekIsSUFBSSxDQUFDLDJCQUFXLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQztRQUFFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hELElBQUksT0FBTyxDQUFDLDhCQUFrQixDQUFDO1FBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLE9BQU8sQ0FBQyw4QkFBa0IsQ0FBQyxDQUFDO0lBQ2xHLElBQUksT0FBTyxDQUFDLDhCQUFrQixDQUFDLEVBQUU7UUFDL0IsT0FBTyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLE9BQU8sQ0FBQyw4QkFBa0IsQ0FBQyxDQUFDO1FBQ2pFLE9BQU8sQ0FBQyxRQUFRLEdBQUcsMEJBQWtCLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRTtZQUN0RCxnQkFBZ0I7WUFDaEIsY0FBYyxFQUFFLE9BQU8sQ0FBQyw4QkFBa0IsQ0FBQztTQUM1QyxDQUFDLENBQUM7S0FDSjtJQUNELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3BCLENBQUMsQ0FBQztBQWZTLFFBQUEsK0JBQStCLG1DQWV4QztBQUVHLE1BQU0sa0JBQWtCLEdBQUcsQ0FDaEMsUUFBZ0IsRUFDaEIsRUFBRSxnQkFBZ0IsRUFBRSxjQUFjLEtBQThELEVBQUUsRUFDMUYsRUFBRTtJQUNWLE1BQU0sQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsd0JBQXdCLENBQUUsQ0FBQztJQUM1RSxtREFBbUQ7SUFDbkQsT0FBTyxnQkFBZ0I7UUFDckIsQ0FBQyxDQUFDLFFBQVE7UUFDVixDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsY0FBYyxJQUFJLE1BQU0sRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQzthQUN2RixNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksS0FBSyxTQUFTLENBQUM7YUFDcEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ25CLENBQUMsQ0FBQztBQVhXLFFBQUEsa0JBQWtCLHNCQVc3QjtBQUVXLFFBQUEsc0NBQXNDLEdBQXdCO0lBQ3pFLElBQUksRUFBRSxPQUFPO0lBQ2IsSUFBSSxFQUFFLGlDQUFpQztJQUN2QyxJQUFJLEVBQUUsQ0FBQyxZQUFZLEVBQUUsWUFBWSxFQUFFLFNBQVMsQ0FBQztDQUM5QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cFJlcXVlc3QgfSBmcm9tIFwiQGF3cy1zZGsvcHJvdG9jb2wtaHR0cFwiO1xuaW1wb3J0IHsgQnVpbGRIYW5kbGVyT3B0aW9ucywgQnVpbGRNaWRkbGV3YXJlIH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5cbmltcG9ydCB7IFMzQ29udHJvbFJlc29sdmVkQ29uZmlnIH0gZnJvbSBcIi4uL2NvbmZpZ3VyYXRpb25zXCI7XG5pbXBvcnQgeyBDT05URVhUX0FDQ09VTlRfSUQsIENPTlRFWFRfQVJOX1JFR0lPTiwgQ09OVEVYVF9PVVRQT1NUX0lEIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuXG5jb25zdCBBQ0NPVU5UX0lEX0hFQURFUiA9IFwieC1hbXotYWNjb3VudC1pZFwiO1xuY29uc3QgT1VUUE9TVF9JRF9IRUFERVIgPSBcIngtYW16LW91dHBvc3QtaWRcIjtcbmNvbnN0IFJFR0VYX1MzQ09OVFJPTF9IT1NUTkFNRSA9IC9eKC4rXFwuKT9zMy1jb250cm9sWy4tXShbYS16MC05LV0rKVxcLi87XG5cbi8qKlxuICogQWZ0ZXIgb3V0cG9zdCByZXF1ZXN0IGlzIGNvbnN0cnVjdGVkLCByZWRpcmVjdCByZXF1ZXN0IHRvIG91dHBvc3QgZW5kcG9pbnQgYW5kIHNldCBgeC1hbXotYWNjb3VudC1pZGAgYW5kXG4gKiBgeC1hbXotb3V0cG9zdC1pZGAgaGVhZGVycy5cbiAqL1xuZXhwb3J0IGNvbnN0IHVwZGF0ZUFybmFibGVzUmVxdWVzdE1pZGRsZXdhcmUgPVxuICAoeyBpc0N1c3RvbUVuZHBvaW50IH06IHsgaXNDdXN0b21FbmRwb2ludDogYm9vbGVhbiB9KTogQnVpbGRNaWRkbGV3YXJlPGFueSwgYW55PiA9PlxuICAobmV4dCwgY29udGV4dCkgPT5cbiAgKGFyZ3MpID0+IHtcbiAgICBjb25zdCB7IHJlcXVlc3QgfSA9IGFyZ3M7XG4gICAgaWYgKCFIdHRwUmVxdWVzdC5pc0luc3RhbmNlKHJlcXVlc3QpKSByZXR1cm4gbmV4dChhcmdzKTtcbiAgICBpZiAoY29udGV4dFtDT05URVhUX0FDQ09VTlRfSURdKSByZXF1ZXN0LmhlYWRlcnNbQUNDT1VOVF9JRF9IRUFERVJdID0gY29udGV4dFtDT05URVhUX0FDQ09VTlRfSURdO1xuICAgIGlmIChjb250ZXh0W0NPTlRFWFRfT1VUUE9TVF9JRF0pIHtcbiAgICAgIHJlcXVlc3QuaGVhZGVyc1tPVVRQT1NUX0lEX0hFQURFUl0gPSBjb250ZXh0W0NPTlRFWFRfT1VUUE9TVF9JRF07XG4gICAgICByZXF1ZXN0Lmhvc3RuYW1lID0gZ2V0T3V0cG9zdEVuZHBvaW50KHJlcXVlc3QuaG9zdG5hbWUsIHtcbiAgICAgICAgaXNDdXN0b21FbmRwb2ludCxcbiAgICAgICAgcmVnaW9uT3ZlcnJpZGU6IGNvbnRleHRbQ09OVEVYVF9BUk5fUkVHSU9OXSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dChhcmdzKTtcbiAgfTtcblxuZXhwb3J0IGNvbnN0IGdldE91dHBvc3RFbmRwb2ludCA9IChcbiAgaG9zdG5hbWU6IHN0cmluZyxcbiAgeyBpc0N1c3RvbUVuZHBvaW50LCByZWdpb25PdmVycmlkZSB9OiB7IGlzQ3VzdG9tRW5kcG9pbnQ/OiBib29sZWFuOyByZWdpb25PdmVycmlkZT86IHN0cmluZyB9ID0ge31cbik6IHN0cmluZyA9PiB7XG4gIGNvbnN0IFttYXRjaGVkLCBwcmVmaXgsIHJlZ2lvbl0gPSBob3N0bmFtZS5tYXRjaChSRUdFWF9TM0NPTlRST0xfSE9TVE5BTUUpITtcbiAgLy8gaG9zdG5hbWUgcHJlZml4IHdpbGwgYmUgaWdub3JlZCBldmVuIGlmIHByZXNlbnRzXG4gIHJldHVybiBpc0N1c3RvbUVuZHBvaW50XG4gICAgPyBob3N0bmFtZVxuICAgIDogW1wiczMtb3V0cG9zdHNcIiwgcmVnaW9uT3ZlcnJpZGUgfHwgcmVnaW9uLCBob3N0bmFtZS5yZXBsYWNlKG5ldyBSZWdFeHAoYF4ke21hdGNoZWR9YCksIFwiXCIpXVxuICAgICAgICAuZmlsdGVyKChwYXJ0KSA9PiBwYXJ0ICE9PSB1bmRlZmluZWQpXG4gICAgICAgIC5qb2luKFwiLlwiKTtcbn07XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVBcm5hYmxlc1JlcXVlc3RNaWRkbGV3YXJlT3B0aW9uczogQnVpbGRIYW5kbGVyT3B0aW9ucyA9IHtcbiAgc3RlcDogXCJidWlsZFwiLFxuICBuYW1lOiBcInVwZGF0ZUFybmFibGVzUmVxdWVzdE1pZGRsZXdhcmVcIixcbiAgdGFnczogW1wiQUNDT1VOVF9JRFwiLCBcIk9VVFBPU1RfSURcIiwgXCJPVVRQT1NUXCJdLFxufTtcbiJdfQ==