"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseOutpostArnablesMiddleawareOptions = exports.parseOutpostArnablesMiddleaware = void 0;
const middleware_bucket_endpoint_1 = require("@aws-sdk/middleware-bucket-endpoint");
const util_arn_parser_1 = require("@aws-sdk/util-arn-parser");
const constants_1 = require("../constants");
/**
 * Validate input `Name` or `Bucket` parameter is acceptable ARN format. If so, modify the input ARN to inferred
 * resource identifier, notify later middleware to redirect request to Outpost endpoint, signing service and signing
 * region.
 */
const parseOutpostArnablesMiddleaware = (options) => (next, context) => async (args) => {
    const { input } = args;
    const parameter = input.Name && util_arn_parser_1.validate(input.Name) ? "Name" : input.Bucket && util_arn_parser_1.validate(input.Bucket) ? "Bucket" : undefined;
    if (!parameter)
        return next(args);
    const clientRegion = await options.region();
    const { regionInfoProvider } = options;
    const useArnRegion = await options.useArnRegion();
    const baseRegion = middleware_bucket_endpoint_1.getPseudoRegion(clientRegion);
    const { partition: clientPartition, signingRegion = baseRegion } = (await regionInfoProvider(baseRegion));
    const validatorOptions = {
        useDualstackEndpoint: options.useDualstackEndpoint,
        clientRegion,
        clientPartition,
        signingRegion,
        useArnRegion,
    };
    let arn;
    if (parameter === "Name") {
        arn = util_arn_parser_1.parse(input.Name);
        validateOutpostsArn(arn, validatorOptions);
        const { outpostId, accesspointName } = parseOutpostsAccessPointArnResource(arn.resource);
        input.Name = accesspointName;
        context[constants_1.CONTEXT_OUTPOST_ID] = outpostId;
    }
    else {
        arn = util_arn_parser_1.parse(input.Bucket);
        validateOutpostsArn(arn, validatorOptions);
        const { outpostId, bucketName } = parseOutpostBucketArnResource(arn.resource);
        input.Bucket = bucketName;
        context[constants_1.CONTEXT_OUTPOST_ID] = outpostId;
    }
    context[constants_1.CONTEXT_SIGNING_SERVICE] = arn.service; // s3-outposts
    context[constants_1.CONTEXT_SIGNING_REGION] = useArnRegion ? arn.region : signingRegion;
    if (!input.AccountId) {
        input.AccountId = arn.accountId;
    }
    else if (input.AccountId !== arn.accountId) {
        throw new Error(`AccountId is incompatible with account id inferred from ${parameter}`);
    }
    if (useArnRegion)
        context[constants_1.CONTEXT_ARN_REGION] = arn.region;
    return next(args);
};
exports.parseOutpostArnablesMiddleaware = parseOutpostArnablesMiddleaware;
exports.parseOutpostArnablesMiddleawareOptions = {
    step: "initialize",
    tags: ["CONVERT_ARN", "OUTPOST_BUCKET_ARN", "OUTPOST_ACCESS_POINT_ARN", "OUTPOST"],
    name: "parseOutpostArnablesMiddleaware",
};
/**
 * validate ARN with 's3-outposts' in the service section of the ARN:
 * ARN supplied to 'Name' parameter should comply template:
 *    arn:{partition}:s3-outposts:{region}:{accountId}:outpost/{outpostId}/accesspoint/{accesspointName}
 * ARN supplied to 'Bucket' parameter should comply template:
 *    arn:{partition}:s3-outposts:{region}:{accountId}:outpost/{outpostId}/bucket/{bucketName}
 */
const validateOutpostsArn = (arn, { clientRegion, signingRegion, clientPartition, useArnRegion, useDualstackEndpoint }) => {
    const { service, partition, accountId, region } = arn;
    middleware_bucket_endpoint_1.validateOutpostService(service);
    middleware_bucket_endpoint_1.validatePartition(partition, { clientPartition });
    middleware_bucket_endpoint_1.validateAccountId(accountId);
    middleware_bucket_endpoint_1.validateRegion(region, {
        useArnRegion,
        clientRegion,
        clientSigningRegion: signingRegion,
    });
    middleware_bucket_endpoint_1.validateNoDualstack(useDualstackEndpoint);
    if (!useArnRegion)
        middleware_bucket_endpoint_1.validateNoFIPS(clientRegion);
};
const parseOutpostsAccessPointArnResource = (resource) => {
    const { outpostId, accesspointName } = middleware_bucket_endpoint_1.getArnResources(resource);
    if (!outpostId) {
        throw new Error("ARN resource should begin with 'outpost'");
    }
    return {
        outpostId,
        accesspointName,
    };
};
const parseOutpostBucketArnResource = (resource) => {
    const delimiter = resource.includes(":") ? ":" : "/";
    const [resourceType, ...rest] = resource.split(delimiter);
    if (resourceType === "outpost") {
        // Parse outpost ARN
        if (!rest[0] || rest[1] !== "bucket" || !rest[2] || rest.length !== 3) {
            throw new Error(`Outpost Bucket ARN should have resource outpost${delimiter}{outpostId}${delimiter}bucket${delimiter}{bucketName}`);
        }
        const [outpostId, _, bucketName] = rest;
        return { outpostId, bucketName };
    }
    else {
        throw new Error(`ARN resource should begin with 'outpost${delimiter}'`);
    }
};
//# sourceMappingURL=data:application/json;base64,