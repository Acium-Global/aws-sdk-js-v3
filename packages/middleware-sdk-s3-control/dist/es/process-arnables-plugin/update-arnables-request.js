import { __read } from "tslib";
import { HttpRequest } from "@aws-sdk/protocol-http";
import { CONTEXT_ACCOUNT_ID, CONTEXT_ARN_REGION, CONTEXT_OUTPOST_ID } from "../constants";
var ACCOUNT_ID_HEADER = "x-amz-account-id";
var OUTPOST_ID_HEADER = "x-amz-outpost-id";
var REGEX_S3CONTROL_HOSTNAME = /^(.+\.)?s3-control[.-]([a-z0-9-]+)\./;
/**
 * After outpost request is constructed, redirect request to outpost endpoint and set `x-amz-account-id` and
 * `x-amz-outpost-id` headers.
 */
export var updateArnablesRequestMiddleware = function (_a) {
    var isCustomEndpoint = _a.isCustomEndpoint;
    return function (next, context) {
        return function (args) {
            var request = args.request;
            if (!HttpRequest.isInstance(request))
                return next(args);
            if (context[CONTEXT_ACCOUNT_ID])
                request.headers[ACCOUNT_ID_HEADER] = context[CONTEXT_ACCOUNT_ID];
            if (context[CONTEXT_OUTPOST_ID]) {
                request.headers[OUTPOST_ID_HEADER] = context[CONTEXT_OUTPOST_ID];
                request.hostname = getOutpostEndpoint(request.hostname, {
                    isCustomEndpoint: isCustomEndpoint,
                    regionOverride: context[CONTEXT_ARN_REGION],
                });
            }
            return next(args);
        };
    };
};
export var getOutpostEndpoint = function (hostname, _a) {
    var _b = _a === void 0 ? {} : _a, isCustomEndpoint = _b.isCustomEndpoint, regionOverride = _b.regionOverride;
    var _c = __read(hostname.match(REGEX_S3CONTROL_HOSTNAME), 3), matched = _c[0], prefix = _c[1], region = _c[2];
    // hostname prefix will be ignored even if presents
    return isCustomEndpoint
        ? hostname
        : ["s3-outposts", regionOverride || region, hostname.replace(new RegExp("^" + matched), "")]
            .filter(function (part) { return part !== undefined; })
            .join(".");
};
export var updateArnablesRequestMiddlewareOptions = {
    step: "build",
    name: "updateArnablesRequestMiddleware",
    tags: ["ACCOUNT_ID", "OUTPOST_ID", "OUTPOST"],
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLWFybmFibGVzLXJlcXVlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJvY2Vzcy1hcm5hYmxlcy1wbHVnaW4vdXBkYXRlLWFybmFibGVzLXJlcXVlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUlyRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsa0JBQWtCLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUYsSUFBTSxpQkFBaUIsR0FBRyxrQkFBa0IsQ0FBQztBQUM3QyxJQUFNLGlCQUFpQixHQUFHLGtCQUFrQixDQUFDO0FBQzdDLElBQU0sd0JBQXdCLEdBQUcsc0NBQXNDLENBQUM7QUFFeEU7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLElBQU0sK0JBQStCLEdBQzFDLFVBQUMsRUFBbUQ7UUFBakQsZ0JBQWdCLHNCQUFBO0lBQ25CLE9BQUEsVUFBQyxJQUFJLEVBQUUsT0FBTztRQUNkLE9BQUEsVUFBQyxJQUFJO1lBQ0ssSUFBQSxPQUFPLEdBQUssSUFBSSxRQUFULENBQVU7WUFDekIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDO2dCQUFFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3hELElBQUksT0FBTyxDQUFDLGtCQUFrQixDQUFDO2dCQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUNsRyxJQUFJLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFO2dCQUMvQixPQUFPLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7Z0JBQ2pFLE9BQU8sQ0FBQyxRQUFRLEdBQUcsa0JBQWtCLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRTtvQkFDdEQsZ0JBQWdCLGtCQUFBO29CQUNoQixjQUFjLEVBQUUsT0FBTyxDQUFDLGtCQUFrQixDQUFDO2lCQUM1QyxDQUFDLENBQUM7YUFDSjtZQUNELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BCLENBQUM7SUFaRCxDQVlDO0FBYkQsQ0FhQyxDQUFDO0FBRUosTUFBTSxDQUFDLElBQU0sa0JBQWtCLEdBQUcsVUFDaEMsUUFBZ0IsRUFDaEIsRUFBa0c7UUFBbEcscUJBQWdHLEVBQUUsS0FBQSxFQUFoRyxnQkFBZ0Isc0JBQUEsRUFBRSxjQUFjLG9CQUFBO0lBRTVCLElBQUEsS0FBQSxPQUE0QixRQUFRLENBQUMsS0FBSyxDQUFDLHdCQUF3QixDQUFFLElBQUEsRUFBcEUsT0FBTyxRQUFBLEVBQUUsTUFBTSxRQUFBLEVBQUUsTUFBTSxRQUE2QyxDQUFDO0lBQzVFLG1EQUFtRDtJQUNuRCxPQUFPLGdCQUFnQjtRQUNyQixDQUFDLENBQUMsUUFBUTtRQUNWLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxjQUFjLElBQUksTUFBTSxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBSSxPQUFTLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQzthQUN2RixNQUFNLENBQUMsVUFBQyxJQUFJLElBQUssT0FBQSxJQUFJLEtBQUssU0FBUyxFQUFsQixDQUFrQixDQUFDO2FBQ3BDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNuQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSxzQ0FBc0MsR0FBd0I7SUFDekUsSUFBSSxFQUFFLE9BQU87SUFDYixJQUFJLEVBQUUsaUNBQWlDO0lBQ3ZDLElBQUksRUFBRSxDQUFDLFlBQVksRUFBRSxZQUFZLEVBQUUsU0FBUyxDQUFDO0NBQzlDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwUmVxdWVzdCB9IGZyb20gXCJAYXdzLXNkay9wcm90b2NvbC1odHRwXCI7XG5pbXBvcnQgeyBCdWlsZEhhbmRsZXJPcHRpb25zLCBCdWlsZE1pZGRsZXdhcmUgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuaW1wb3J0IHsgUzNDb250cm9sUmVzb2x2ZWRDb25maWcgfSBmcm9tIFwiLi4vY29uZmlndXJhdGlvbnNcIjtcbmltcG9ydCB7IENPTlRFWFRfQUNDT1VOVF9JRCwgQ09OVEVYVF9BUk5fUkVHSU9OLCBDT05URVhUX09VVFBPU1RfSUQgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5cbmNvbnN0IEFDQ09VTlRfSURfSEVBREVSID0gXCJ4LWFtei1hY2NvdW50LWlkXCI7XG5jb25zdCBPVVRQT1NUX0lEX0hFQURFUiA9IFwieC1hbXotb3V0cG9zdC1pZFwiO1xuY29uc3QgUkVHRVhfUzNDT05UUk9MX0hPU1ROQU1FID0gL14oLitcXC4pP3MzLWNvbnRyb2xbLi1dKFthLXowLTktXSspXFwuLztcblxuLyoqXG4gKiBBZnRlciBvdXRwb3N0IHJlcXVlc3QgaXMgY29uc3RydWN0ZWQsIHJlZGlyZWN0IHJlcXVlc3QgdG8gb3V0cG9zdCBlbmRwb2ludCBhbmQgc2V0IGB4LWFtei1hY2NvdW50LWlkYCBhbmRcbiAqIGB4LWFtei1vdXRwb3N0LWlkYCBoZWFkZXJzLlxuICovXG5leHBvcnQgY29uc3QgdXBkYXRlQXJuYWJsZXNSZXF1ZXN0TWlkZGxld2FyZSA9XG4gICh7IGlzQ3VzdG9tRW5kcG9pbnQgfTogeyBpc0N1c3RvbUVuZHBvaW50OiBib29sZWFuIH0pOiBCdWlsZE1pZGRsZXdhcmU8YW55LCBhbnk+ID0+XG4gIChuZXh0LCBjb250ZXh0KSA9PlxuICAoYXJncykgPT4ge1xuICAgIGNvbnN0IHsgcmVxdWVzdCB9ID0gYXJncztcbiAgICBpZiAoIUh0dHBSZXF1ZXN0LmlzSW5zdGFuY2UocmVxdWVzdCkpIHJldHVybiBuZXh0KGFyZ3MpO1xuICAgIGlmIChjb250ZXh0W0NPTlRFWFRfQUNDT1VOVF9JRF0pIHJlcXVlc3QuaGVhZGVyc1tBQ0NPVU5UX0lEX0hFQURFUl0gPSBjb250ZXh0W0NPTlRFWFRfQUNDT1VOVF9JRF07XG4gICAgaWYgKGNvbnRleHRbQ09OVEVYVF9PVVRQT1NUX0lEXSkge1xuICAgICAgcmVxdWVzdC5oZWFkZXJzW09VVFBPU1RfSURfSEVBREVSXSA9IGNvbnRleHRbQ09OVEVYVF9PVVRQT1NUX0lEXTtcbiAgICAgIHJlcXVlc3QuaG9zdG5hbWUgPSBnZXRPdXRwb3N0RW5kcG9pbnQocmVxdWVzdC5ob3N0bmFtZSwge1xuICAgICAgICBpc0N1c3RvbUVuZHBvaW50LFxuICAgICAgICByZWdpb25PdmVycmlkZTogY29udGV4dFtDT05URVhUX0FSTl9SRUdJT05dLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBuZXh0KGFyZ3MpO1xuICB9O1xuXG5leHBvcnQgY29uc3QgZ2V0T3V0cG9zdEVuZHBvaW50ID0gKFxuICBob3N0bmFtZTogc3RyaW5nLFxuICB7IGlzQ3VzdG9tRW5kcG9pbnQsIHJlZ2lvbk92ZXJyaWRlIH06IHsgaXNDdXN0b21FbmRwb2ludD86IGJvb2xlYW47IHJlZ2lvbk92ZXJyaWRlPzogc3RyaW5nIH0gPSB7fVxuKTogc3RyaW5nID0+IHtcbiAgY29uc3QgW21hdGNoZWQsIHByZWZpeCwgcmVnaW9uXSA9IGhvc3RuYW1lLm1hdGNoKFJFR0VYX1MzQ09OVFJPTF9IT1NUTkFNRSkhO1xuICAvLyBob3N0bmFtZSBwcmVmaXggd2lsbCBiZSBpZ25vcmVkIGV2ZW4gaWYgcHJlc2VudHNcbiAgcmV0dXJuIGlzQ3VzdG9tRW5kcG9pbnRcbiAgICA/IGhvc3RuYW1lXG4gICAgOiBbXCJzMy1vdXRwb3N0c1wiLCByZWdpb25PdmVycmlkZSB8fCByZWdpb24sIGhvc3RuYW1lLnJlcGxhY2UobmV3IFJlZ0V4cChgXiR7bWF0Y2hlZH1gKSwgXCJcIildXG4gICAgICAgIC5maWx0ZXIoKHBhcnQpID0+IHBhcnQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgLmpvaW4oXCIuXCIpO1xufTtcblxuZXhwb3J0IGNvbnN0IHVwZGF0ZUFybmFibGVzUmVxdWVzdE1pZGRsZXdhcmVPcHRpb25zOiBCdWlsZEhhbmRsZXJPcHRpb25zID0ge1xuICBzdGVwOiBcImJ1aWxkXCIsXG4gIG5hbWU6IFwidXBkYXRlQXJuYWJsZXNSZXF1ZXN0TWlkZGxld2FyZVwiLFxuICB0YWdzOiBbXCJBQ0NPVU5UX0lEXCIsIFwiT1VUUE9TVF9JRFwiLCBcIk9VVFBPU1RcIl0sXG59O1xuIl19