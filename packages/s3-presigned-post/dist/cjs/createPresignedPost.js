"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPresignedPost = void 0;
const signature_v4_1 = require("@aws-sdk/signature-v4");
const util_format_url_1 = require("@aws-sdk/util-format-url");
const util_hex_encoding_1 = require("@aws-sdk/util-hex-encoding");
const constants_1 = require("./constants");
/**
 * Builds the url and the form fields used for a presigned s3 post.
 */
const createPresignedPost = async (client, { Bucket, Key, Conditions = [], Fields = {}, Expires = 3600 }) => {
    const { systemClockOffset, base64Encoder, utf8Decoder, sha256 } = client.config;
    const now = new Date(Date.now() + systemClockOffset);
    // signingDate in format like '20201028T070711Z'.
    const signingDate = iso8601(now).replace(/[\-:]/g, "");
    const shortDate = signingDate.substr(0, 8);
    const clientRegion = await client.config.region();
    // Prepare credentials.
    const credentialScope = signature_v4_1.createScope(shortDate, clientRegion, "s3");
    const clientCredentials = await client.config.credentials();
    const credential = `${clientCredentials.accessKeyId}/${credentialScope}`;
    const fields = {
        ...Fields,
        bucket: Bucket,
        [constants_1.ALGORITHM_QUERY_PARAM]: constants_1.ALGORITHM_IDENTIFIER,
        [constants_1.CREDENTIAL_QUERY_PARAM]: credential,
        [constants_1.AMZ_DATE_QUERY_PARAM]: signingDate,
        ...(clientCredentials.sessionToken ? { [constants_1.TOKEN_QUERY_PARAM]: clientCredentials.sessionToken } : {}),
    };
    // Prepare policies.
    const expiration = new Date(now.valueOf() + Expires * 1000);
    const conditions = [
        ...Conditions,
        ...Object.entries(fields).map(([k, v]) => ({ [k]: v })),
        Key.endsWith("${filename}")
            ? ["starts-with", "$key", Key.substring(0, Key.lastIndexOf("${filename}"))]
            : { key: Key },
    ];
    const encodedPolicy = base64Encoder(utf8Decoder(JSON.stringify({
        expiration: iso8601(expiration),
        conditions,
    })));
    // Sign the request.
    const signingKey = await signature_v4_1.getSigningKey(sha256, clientCredentials, shortDate, clientRegion, "s3");
    const signature = await hmac(sha256, signingKey, encodedPolicy);
    const endpoint = await client.config.endpoint();
    if (!client.config.bucketEndpoint) {
        endpoint.path = `/${Bucket}`;
    }
    return {
        url: util_format_url_1.formatUrl(endpoint),
        fields: {
            ...fields,
            key: Key,
            Policy: encodedPolicy,
            [constants_1.SIGNATURE_QUERY_PARAM]: util_hex_encoding_1.toHex(signature),
        },
    };
};
exports.createPresignedPost = createPresignedPost;
const iso8601 = (date) => date.toISOString().replace(/\.\d{3}Z$/, "Z");
const hmac = (ctor, secret, data) => {
    const hash = new ctor(secret);
    hash.update(data);
    return hash.digest();
};
//# sourceMappingURL=data:application/json;base64,