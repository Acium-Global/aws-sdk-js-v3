import { __awaiter } from "tslib";
import { v4 } from "uuid";
/**
 * Middleware that inject default sessionId for operations, and inject
 * the parameters from request to the response metadata. This is
 * necessary because the SDK cannot access any parameters other than
 * the result stream. So it copies the parameters from input to the same
 * parameters in the output.
 */
export const injectSessionIdMiddleware = (config) => (next) => (args) => __awaiter(void 0, void 0, void 0, function* () {
    if (args.input.SessionId === undefined && isWebSocket(config)) {
        args.input.SessionId = v4();
    }
    const requestParams = Object.assign({}, args.input);
    const response = yield next(args);
    const output = response.output;
    for (const key of Object.keys(output)) {
        if (output[key] === undefined && requestParams[key]) {
            output[key] = requestParams[key];
        }
    }
    return response;
});
const isWebSocket = (config) => { var _a; return ((_a = config.requestHandler.metadata) === null || _a === void 0 ? void 0 : _a.handlerProtocol) === "websocket"; };
export const injectSessionIdMiddlewareOptions = {
    step: "initialize",
    name: "injectSessionIdMiddleware",
    tags: ["WEBSOCKET", "EVENT_STREAM"],
    override: true,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlkZGxld2FyZS1zZXNzaW9uLWlkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21pZGRsZXdhcmUtc2Vzc2lvbi1pZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBT0EsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQU8xQjs7Ozs7O0dBTUc7QUFDSCxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FDcEMsQ0FBQyxNQUFvRCxFQUFrQyxFQUFFLENBQ3pGLENBQUMsSUFBaUQsRUFBRSxFQUFFLENBQ3RELENBQU8sSUFBNkMsRUFBRSxFQUFFO0lBQ3RELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEtBQUssU0FBUyxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUM3RCxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxFQUFFLEVBQUUsQ0FBQztLQUM3QjtJQUNELE1BQU0sYUFBYSxxQkFDZCxJQUFJLENBQUMsS0FBSyxDQUNkLENBQUM7SUFDRixNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQyxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO0lBQy9CLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUNyQyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxTQUFTLElBQUksYUFBYSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ25ELE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDbEM7S0FDRjtJQUNELE9BQU8sUUFBUSxDQUFDO0FBQ2xCLENBQUMsQ0FBQSxDQUFDO0FBRUosTUFBTSxXQUFXLEdBQUcsQ0FBQyxNQUFvRCxFQUFFLEVBQUUsV0FDM0UsT0FBQSxDQUFBLE1BQUEsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLDBDQUFFLGVBQWUsTUFBSyxXQUFXLENBQUEsRUFBQSxDQUFDO0FBRWxFLE1BQU0sQ0FBQyxNQUFNLGdDQUFnQyxHQUE2QjtJQUN4RSxJQUFJLEVBQUUsWUFBWTtJQUNsQixJQUFJLEVBQUUsMkJBQTJCO0lBQ2pDLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxjQUFjLENBQUM7SUFDbkMsUUFBUSxFQUFFLElBQUk7Q0FDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSW5pdGlhbGl6ZUhhbmRsZXIsXG4gIEluaXRpYWxpemVIYW5kbGVyQXJndW1lbnRzLFxuICBJbml0aWFsaXplSGFuZGxlck9wdGlvbnMsXG4gIEluaXRpYWxpemVNaWRkbGV3YXJlLFxuICBSZXF1ZXN0SGFuZGxlcixcbn0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5pbXBvcnQgeyB2NCB9IGZyb20gXCJ1dWlkXCI7XG5cbnR5cGUgV2l0aFNlc3Npb24gPSB7XG4gIFNlc3Npb25JZD86IHN0cmluZztcbiAgW2tleTogc3RyaW5nXTogYW55O1xufTtcblxuLyoqXG4gKiBNaWRkbGV3YXJlIHRoYXQgaW5qZWN0IGRlZmF1bHQgc2Vzc2lvbklkIGZvciBvcGVyYXRpb25zLCBhbmQgaW5qZWN0XG4gKiB0aGUgcGFyYW1ldGVycyBmcm9tIHJlcXVlc3QgdG8gdGhlIHJlc3BvbnNlIG1ldGFkYXRhLiBUaGlzIGlzXG4gKiBuZWNlc3NhcnkgYmVjYXVzZSB0aGUgU0RLIGNhbm5vdCBhY2Nlc3MgYW55IHBhcmFtZXRlcnMgb3RoZXIgdGhhblxuICogdGhlIHJlc3VsdCBzdHJlYW0uIFNvIGl0IGNvcGllcyB0aGUgcGFyYW1ldGVycyBmcm9tIGlucHV0IHRvIHRoZSBzYW1lXG4gKiBwYXJhbWV0ZXJzIGluIHRoZSBvdXRwdXQuXG4gKi9cbmV4cG9ydCBjb25zdCBpbmplY3RTZXNzaW9uSWRNaWRkbGV3YXJlID1cbiAgKGNvbmZpZzogeyByZXF1ZXN0SGFuZGxlcjogUmVxdWVzdEhhbmRsZXI8YW55LCBhbnk+IH0pOiBJbml0aWFsaXplTWlkZGxld2FyZTxhbnksIGFueT4gPT5cbiAgKG5leHQ6IEluaXRpYWxpemVIYW5kbGVyPFdpdGhTZXNzaW9uLCBXaXRoU2Vzc2lvbj4pID0+XG4gIGFzeW5jIChhcmdzOiBJbml0aWFsaXplSGFuZGxlckFyZ3VtZW50czxXaXRoU2Vzc2lvbj4pID0+IHtcbiAgICBpZiAoYXJncy5pbnB1dC5TZXNzaW9uSWQgPT09IHVuZGVmaW5lZCAmJiBpc1dlYlNvY2tldChjb25maWcpKSB7XG4gICAgICBhcmdzLmlucHV0LlNlc3Npb25JZCA9IHY0KCk7XG4gICAgfVxuICAgIGNvbnN0IHJlcXVlc3RQYXJhbXMgPSB7XG4gICAgICAuLi5hcmdzLmlucHV0LFxuICAgIH07XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBuZXh0KGFyZ3MpO1xuICAgIGNvbnN0IG91dHB1dCA9IHJlc3BvbnNlLm91dHB1dDtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhvdXRwdXQpKSB7XG4gICAgICBpZiAob3V0cHV0W2tleV0gPT09IHVuZGVmaW5lZCAmJiByZXF1ZXN0UGFyYW1zW2tleV0pIHtcbiAgICAgICAgb3V0cHV0W2tleV0gPSByZXF1ZXN0UGFyYW1zW2tleV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfTtcblxuY29uc3QgaXNXZWJTb2NrZXQgPSAoY29uZmlnOiB7IHJlcXVlc3RIYW5kbGVyOiBSZXF1ZXN0SGFuZGxlcjxhbnksIGFueT4gfSkgPT5cbiAgY29uZmlnLnJlcXVlc3RIYW5kbGVyLm1ldGFkYXRhPy5oYW5kbGVyUHJvdG9jb2wgPT09IFwid2Vic29ja2V0XCI7XG5cbmV4cG9ydCBjb25zdCBpbmplY3RTZXNzaW9uSWRNaWRkbGV3YXJlT3B0aW9uczogSW5pdGlhbGl6ZUhhbmRsZXJPcHRpb25zID0ge1xuICBzdGVwOiBcImluaXRpYWxpemVcIixcbiAgbmFtZTogXCJpbmplY3RTZXNzaW9uSWRNaWRkbGV3YXJlXCIsXG4gIHRhZ3M6IFtcIldFQlNPQ0tFVFwiLCBcIkVWRU5UX1NUUkVBTVwiXSxcbiAgb3ZlcnJpZGU6IHRydWUsXG59O1xuIl19