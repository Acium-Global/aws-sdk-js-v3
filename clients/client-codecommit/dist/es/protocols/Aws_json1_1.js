import { __assign, __awaiter, __generator, __read } from "tslib";
import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { v4 as generateIdempotencyToken } from "uuid";
export var serializeAws_json1_1AssociateApprovalRuleTemplateWithRepositoryCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.AssociateApprovalRuleTemplateWithRepository",
        };
        body = JSON.stringify(serializeAws_json1_1AssociateApprovalRuleTemplateWithRepositoryInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1BatchAssociateApprovalRuleTemplateWithRepositoriesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.BatchAssociateApprovalRuleTemplateWithRepositories",
        };
        body = JSON.stringify(serializeAws_json1_1BatchAssociateApprovalRuleTemplateWithRepositoriesInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1BatchDescribeMergeConflictsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.BatchDescribeMergeConflicts",
        };
        body = JSON.stringify(serializeAws_json1_1BatchDescribeMergeConflictsInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1BatchDisassociateApprovalRuleTemplateFromRepositoriesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.BatchDisassociateApprovalRuleTemplateFromRepositories",
        };
        body = JSON.stringify(serializeAws_json1_1BatchDisassociateApprovalRuleTemplateFromRepositoriesInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1BatchGetCommitsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.BatchGetCommits",
        };
        body = JSON.stringify(serializeAws_json1_1BatchGetCommitsInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1BatchGetRepositoriesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.BatchGetRepositories",
        };
        body = JSON.stringify(serializeAws_json1_1BatchGetRepositoriesInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1CreateApprovalRuleTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.CreateApprovalRuleTemplate",
        };
        body = JSON.stringify(serializeAws_json1_1CreateApprovalRuleTemplateInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1CreateBranchCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.CreateBranch",
        };
        body = JSON.stringify(serializeAws_json1_1CreateBranchInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1CreateCommitCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.CreateCommit",
        };
        body = JSON.stringify(serializeAws_json1_1CreateCommitInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1CreatePullRequestCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.CreatePullRequest",
        };
        body = JSON.stringify(serializeAws_json1_1CreatePullRequestInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1CreatePullRequestApprovalRuleCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.CreatePullRequestApprovalRule",
        };
        body = JSON.stringify(serializeAws_json1_1CreatePullRequestApprovalRuleInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1CreateRepositoryCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.CreateRepository",
        };
        body = JSON.stringify(serializeAws_json1_1CreateRepositoryInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1CreateUnreferencedMergeCommitCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.CreateUnreferencedMergeCommit",
        };
        body = JSON.stringify(serializeAws_json1_1CreateUnreferencedMergeCommitInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DeleteApprovalRuleTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.DeleteApprovalRuleTemplate",
        };
        body = JSON.stringify(serializeAws_json1_1DeleteApprovalRuleTemplateInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DeleteBranchCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.DeleteBranch",
        };
        body = JSON.stringify(serializeAws_json1_1DeleteBranchInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DeleteCommentContentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.DeleteCommentContent",
        };
        body = JSON.stringify(serializeAws_json1_1DeleteCommentContentInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DeleteFileCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.DeleteFile",
        };
        body = JSON.stringify(serializeAws_json1_1DeleteFileInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DeletePullRequestApprovalRuleCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.DeletePullRequestApprovalRule",
        };
        body = JSON.stringify(serializeAws_json1_1DeletePullRequestApprovalRuleInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DeleteRepositoryCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.DeleteRepository",
        };
        body = JSON.stringify(serializeAws_json1_1DeleteRepositoryInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DescribeMergeConflictsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.DescribeMergeConflicts",
        };
        body = JSON.stringify(serializeAws_json1_1DescribeMergeConflictsInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DescribePullRequestEventsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.DescribePullRequestEvents",
        };
        body = JSON.stringify(serializeAws_json1_1DescribePullRequestEventsInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DisassociateApprovalRuleTemplateFromRepositoryCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.DisassociateApprovalRuleTemplateFromRepository",
        };
        body = JSON.stringify(serializeAws_json1_1DisassociateApprovalRuleTemplateFromRepositoryInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1EvaluatePullRequestApprovalRulesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.EvaluatePullRequestApprovalRules",
        };
        body = JSON.stringify(serializeAws_json1_1EvaluatePullRequestApprovalRulesInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetApprovalRuleTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.GetApprovalRuleTemplate",
        };
        body = JSON.stringify(serializeAws_json1_1GetApprovalRuleTemplateInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetBlobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.GetBlob",
        };
        body = JSON.stringify(serializeAws_json1_1GetBlobInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetBranchCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.GetBranch",
        };
        body = JSON.stringify(serializeAws_json1_1GetBranchInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetCommentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.GetComment",
        };
        body = JSON.stringify(serializeAws_json1_1GetCommentInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetCommentReactionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.GetCommentReactions",
        };
        body = JSON.stringify(serializeAws_json1_1GetCommentReactionsInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetCommentsForComparedCommitCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.GetCommentsForComparedCommit",
        };
        body = JSON.stringify(serializeAws_json1_1GetCommentsForComparedCommitInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetCommentsForPullRequestCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.GetCommentsForPullRequest",
        };
        body = JSON.stringify(serializeAws_json1_1GetCommentsForPullRequestInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetCommitCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.GetCommit",
        };
        body = JSON.stringify(serializeAws_json1_1GetCommitInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetDifferencesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.GetDifferences",
        };
        body = JSON.stringify(serializeAws_json1_1GetDifferencesInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetFileCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.GetFile",
        };
        body = JSON.stringify(serializeAws_json1_1GetFileInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetFolderCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.GetFolder",
        };
        body = JSON.stringify(serializeAws_json1_1GetFolderInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetMergeCommitCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.GetMergeCommit",
        };
        body = JSON.stringify(serializeAws_json1_1GetMergeCommitInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetMergeConflictsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.GetMergeConflicts",
        };
        body = JSON.stringify(serializeAws_json1_1GetMergeConflictsInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetMergeOptionsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.GetMergeOptions",
        };
        body = JSON.stringify(serializeAws_json1_1GetMergeOptionsInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetPullRequestCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.GetPullRequest",
        };
        body = JSON.stringify(serializeAws_json1_1GetPullRequestInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetPullRequestApprovalStatesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.GetPullRequestApprovalStates",
        };
        body = JSON.stringify(serializeAws_json1_1GetPullRequestApprovalStatesInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetPullRequestOverrideStateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.GetPullRequestOverrideState",
        };
        body = JSON.stringify(serializeAws_json1_1GetPullRequestOverrideStateInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetRepositoryCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.GetRepository",
        };
        body = JSON.stringify(serializeAws_json1_1GetRepositoryInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1GetRepositoryTriggersCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.GetRepositoryTriggers",
        };
        body = JSON.stringify(serializeAws_json1_1GetRepositoryTriggersInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ListApprovalRuleTemplatesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.ListApprovalRuleTemplates",
        };
        body = JSON.stringify(serializeAws_json1_1ListApprovalRuleTemplatesInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ListAssociatedApprovalRuleTemplatesForRepositoryCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.ListAssociatedApprovalRuleTemplatesForRepository",
        };
        body = JSON.stringify(serializeAws_json1_1ListAssociatedApprovalRuleTemplatesForRepositoryInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ListBranchesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.ListBranches",
        };
        body = JSON.stringify(serializeAws_json1_1ListBranchesInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ListPullRequestsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.ListPullRequests",
        };
        body = JSON.stringify(serializeAws_json1_1ListPullRequestsInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ListRepositoriesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.ListRepositories",
        };
        body = JSON.stringify(serializeAws_json1_1ListRepositoriesInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ListRepositoriesForApprovalRuleTemplateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.ListRepositoriesForApprovalRuleTemplate",
        };
        body = JSON.stringify(serializeAws_json1_1ListRepositoriesForApprovalRuleTemplateInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ListTagsForResourceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.ListTagsForResource",
        };
        body = JSON.stringify(serializeAws_json1_1ListTagsForResourceInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1MergeBranchesByFastForwardCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.MergeBranchesByFastForward",
        };
        body = JSON.stringify(serializeAws_json1_1MergeBranchesByFastForwardInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1MergeBranchesBySquashCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.MergeBranchesBySquash",
        };
        body = JSON.stringify(serializeAws_json1_1MergeBranchesBySquashInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1MergeBranchesByThreeWayCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.MergeBranchesByThreeWay",
        };
        body = JSON.stringify(serializeAws_json1_1MergeBranchesByThreeWayInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1MergePullRequestByFastForwardCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.MergePullRequestByFastForward",
        };
        body = JSON.stringify(serializeAws_json1_1MergePullRequestByFastForwardInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1MergePullRequestBySquashCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.MergePullRequestBySquash",
        };
        body = JSON.stringify(serializeAws_json1_1MergePullRequestBySquashInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1MergePullRequestByThreeWayCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.MergePullRequestByThreeWay",
        };
        body = JSON.stringify(serializeAws_json1_1MergePullRequestByThreeWayInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1OverridePullRequestApprovalRulesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.OverridePullRequestApprovalRules",
        };
        body = JSON.stringify(serializeAws_json1_1OverridePullRequestApprovalRulesInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1PostCommentForComparedCommitCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.PostCommentForComparedCommit",
        };
        body = JSON.stringify(serializeAws_json1_1PostCommentForComparedCommitInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1PostCommentForPullRequestCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.PostCommentForPullRequest",
        };
        body = JSON.stringify(serializeAws_json1_1PostCommentForPullRequestInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1PostCommentReplyCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.PostCommentReply",
        };
        body = JSON.stringify(serializeAws_json1_1PostCommentReplyInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1PutCommentReactionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.PutCommentReaction",
        };
        body = JSON.stringify(serializeAws_json1_1PutCommentReactionInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1PutFileCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.PutFile",
        };
        body = JSON.stringify(serializeAws_json1_1PutFileInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1PutRepositoryTriggersCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.PutRepositoryTriggers",
        };
        body = JSON.stringify(serializeAws_json1_1PutRepositoryTriggersInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1TagResourceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.TagResource",
        };
        body = JSON.stringify(serializeAws_json1_1TagResourceInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1TestRepositoryTriggersCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.TestRepositoryTriggers",
        };
        body = JSON.stringify(serializeAws_json1_1TestRepositoryTriggersInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1UntagResourceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.UntagResource",
        };
        body = JSON.stringify(serializeAws_json1_1UntagResourceInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1UpdateApprovalRuleTemplateContentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.UpdateApprovalRuleTemplateContent",
        };
        body = JSON.stringify(serializeAws_json1_1UpdateApprovalRuleTemplateContentInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1UpdateApprovalRuleTemplateDescriptionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.UpdateApprovalRuleTemplateDescription",
        };
        body = JSON.stringify(serializeAws_json1_1UpdateApprovalRuleTemplateDescriptionInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1UpdateApprovalRuleTemplateNameCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.UpdateApprovalRuleTemplateName",
        };
        body = JSON.stringify(serializeAws_json1_1UpdateApprovalRuleTemplateNameInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1UpdateCommentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.UpdateComment",
        };
        body = JSON.stringify(serializeAws_json1_1UpdateCommentInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1UpdateDefaultBranchCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.UpdateDefaultBranch",
        };
        body = JSON.stringify(serializeAws_json1_1UpdateDefaultBranchInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1UpdatePullRequestApprovalRuleContentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.UpdatePullRequestApprovalRuleContent",
        };
        body = JSON.stringify(serializeAws_json1_1UpdatePullRequestApprovalRuleContentInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1UpdatePullRequestApprovalStateCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.UpdatePullRequestApprovalState",
        };
        body = JSON.stringify(serializeAws_json1_1UpdatePullRequestApprovalStateInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1UpdatePullRequestDescriptionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.UpdatePullRequestDescription",
        };
        body = JSON.stringify(serializeAws_json1_1UpdatePullRequestDescriptionInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1UpdatePullRequestStatusCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.UpdatePullRequestStatus",
        };
        body = JSON.stringify(serializeAws_json1_1UpdatePullRequestStatusInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1UpdatePullRequestTitleCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.UpdatePullRequestTitle",
        };
        body = JSON.stringify(serializeAws_json1_1UpdatePullRequestTitleInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1UpdateRepositoryDescriptionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.UpdateRepositoryDescription",
        };
        body = JSON.stringify(serializeAws_json1_1UpdateRepositoryDescriptionInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1UpdateRepositoryNameCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "CodeCommit_20150413.UpdateRepositoryName",
        };
        body = JSON.stringify(serializeAws_json1_1UpdateRepositoryNameInput(input, context));
        return [2 /*return*/, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var deserializeAws_json1_1AssociateApprovalRuleTemplateWithRepositoryCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1AssociateApprovalRuleTemplateWithRepositoryCommandError(output, context)];
                }
                return [4 /*yield*/, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1AssociateApprovalRuleTemplateWithRepositoryCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, parsedBody, message;
    var _q;
    return __generator(this, function (_r) {
        switch (_r.label) {
            case 0:
                _a = [__assign({}, output)];
                _q = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_q.body = _r.sent(), _q)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ApprovalRuleTemplateDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#ApprovalRuleTemplateDoesNotExistException": return [3 /*break*/, 2];
                    case "ApprovalRuleTemplateNameRequiredException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#ApprovalRuleTemplateNameRequiredException": return [3 /*break*/, 4];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "InvalidApprovalRuleTemplateNameException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidApprovalRuleTemplateNameException": return [3 /*break*/, 16];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 18];
                    case "MaximumRuleTemplatesAssociatedWithRepositoryException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#MaximumRuleTemplatesAssociatedWithRepositoryException": return [3 /*break*/, 20];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 22];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 24];
                }
                return [3 /*break*/, 26];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleTemplateDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleTemplateNameRequiredExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidApprovalRuleTemplateNameExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumRuleTemplatesAssociatedWithRepositoryExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 26:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _r.label = 27;
            case 27:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1BatchAssociateApprovalRuleTemplateWithRepositoriesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1BatchAssociateApprovalRuleTemplateWithRepositoriesCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1BatchAssociateApprovalRuleTemplateWithRepositoriesOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1BatchAssociateApprovalRuleTemplateWithRepositoriesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, parsedBody, message;
    var _o;
    return __generator(this, function (_p) {
        switch (_p.label) {
            case 0:
                _a = [__assign({}, output)];
                _o = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_o.body = _p.sent(), _o)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ApprovalRuleTemplateDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#ApprovalRuleTemplateDoesNotExistException": return [3 /*break*/, 2];
                    case "ApprovalRuleTemplateNameRequiredException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#ApprovalRuleTemplateNameRequiredException": return [3 /*break*/, 4];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "InvalidApprovalRuleTemplateNameException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidApprovalRuleTemplateNameException": return [3 /*break*/, 16];
                    case "MaximumRepositoryNamesExceededException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#MaximumRepositoryNamesExceededException": return [3 /*break*/, 18];
                    case "RepositoryNamesRequiredException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#RepositoryNamesRequiredException": return [3 /*break*/, 20];
                }
                return [3 /*break*/, 22];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleTemplateDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleTemplateNameRequiredExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidApprovalRuleTemplateNameExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumRepositoryNamesExceededExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNamesRequiredExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 22:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _p.label = 23;
            case 23:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1BatchDescribeMergeConflictsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1BatchDescribeMergeConflictsCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1BatchDescribeMergeConflictsOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1BatchDescribeMergeConflictsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, parsedBody, message;
    var _z;
    return __generator(this, function (_0) {
        switch (_0.label) {
            case 0:
                _a = [__assign({}, output)];
                _z = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_z.body = _0.sent(), _z)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CommitDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#CommitDoesNotExistException": return [3 /*break*/, 2];
                    case "CommitRequiredException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#CommitRequiredException": return [3 /*break*/, 4];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "InvalidCommitException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidCommitException": return [3 /*break*/, 16];
                    case "InvalidConflictDetailLevelException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidConflictDetailLevelException": return [3 /*break*/, 18];
                    case "InvalidConflictResolutionStrategyException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#InvalidConflictResolutionStrategyException": return [3 /*break*/, 20];
                    case "InvalidContinuationTokenException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#InvalidContinuationTokenException": return [3 /*break*/, 22];
                    case "InvalidMaxConflictFilesException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#InvalidMaxConflictFilesException": return [3 /*break*/, 24];
                    case "InvalidMaxMergeHunksException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#InvalidMaxMergeHunksException": return [3 /*break*/, 26];
                    case "InvalidMergeOptionException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#InvalidMergeOptionException": return [3 /*break*/, 28];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 30];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 30];
                    case "MaximumFileContentToLoadExceededException": return [3 /*break*/, 32];
                    case "com.amazonaws.codecommit#MaximumFileContentToLoadExceededException": return [3 /*break*/, 32];
                    case "MaximumItemsToCompareExceededException": return [3 /*break*/, 34];
                    case "com.amazonaws.codecommit#MaximumItemsToCompareExceededException": return [3 /*break*/, 34];
                    case "MergeOptionRequiredException": return [3 /*break*/, 36];
                    case "com.amazonaws.codecommit#MergeOptionRequiredException": return [3 /*break*/, 36];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 38];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 38];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 40];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 40];
                    case "TipsDivergenceExceededException": return [3 /*break*/, 42];
                    case "com.amazonaws.codecommit#TipsDivergenceExceededException": return [3 /*break*/, 42];
                }
                return [3 /*break*/, 44];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitRequiredExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommitExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidConflictDetailLevelExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidConflictResolutionStrategyExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidContinuationTokenExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidMaxConflictFilesExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidMaxMergeHunksExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidMergeOptionExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 30:
                _s = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 32:
                _t = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumFileContentToLoadExceededExceptionResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 34:
                _u = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumItemsToCompareExceededExceptionResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 36:
                _v = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MergeOptionRequiredExceptionResponse(parsedOutput, context)];
            case 37:
                response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 38:
                _w = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 39:
                response = __assign.apply(void 0, [__assign.apply(void 0, _w.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 40:
                _x = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 41:
                response = __assign.apply(void 0, [__assign.apply(void 0, _x.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 42:
                _y = [{}];
                return [4 /*yield*/, deserializeAws_json1_1TipsDivergenceExceededExceptionResponse(parsedOutput, context)];
            case 43:
                response = __assign.apply(void 0, [__assign.apply(void 0, _y.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 44:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _0.label = 45;
            case 45:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1BatchDisassociateApprovalRuleTemplateFromRepositoriesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1BatchDisassociateApprovalRuleTemplateFromRepositoriesCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1BatchDisassociateApprovalRuleTemplateFromRepositoriesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, parsedBody, message;
    var _o;
    return __generator(this, function (_p) {
        switch (_p.label) {
            case 0:
                _a = [__assign({}, output)];
                _o = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_o.body = _p.sent(), _o)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ApprovalRuleTemplateDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#ApprovalRuleTemplateDoesNotExistException": return [3 /*break*/, 2];
                    case "ApprovalRuleTemplateNameRequiredException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#ApprovalRuleTemplateNameRequiredException": return [3 /*break*/, 4];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "InvalidApprovalRuleTemplateNameException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidApprovalRuleTemplateNameException": return [3 /*break*/, 16];
                    case "MaximumRepositoryNamesExceededException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#MaximumRepositoryNamesExceededException": return [3 /*break*/, 18];
                    case "RepositoryNamesRequiredException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#RepositoryNamesRequiredException": return [3 /*break*/, 20];
                }
                return [3 /*break*/, 22];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleTemplateDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleTemplateNameRequiredExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidApprovalRuleTemplateNameExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumRepositoryNamesExceededExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNamesRequiredExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 22:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _p.label = 23;
            case 23:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1BatchGetCommitsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1BatchGetCommitsCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1BatchGetCommitsOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1BatchGetCommitsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, parsedBody, message;
    var _o;
    return __generator(this, function (_p) {
        switch (_p.label) {
            case 0:
                _a = [__assign({}, output)];
                _o = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_o.body = _p.sent(), _o)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CommitIdsLimitExceededException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#CommitIdsLimitExceededException": return [3 /*break*/, 2];
                    case "CommitIdsListRequiredException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#CommitIdsListRequiredException": return [3 /*break*/, 4];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 16];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 18];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 20];
                }
                return [3 /*break*/, 22];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitIdsLimitExceededExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitIdsListRequiredExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 22:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _p.label = 23;
            case 23:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1BatchGetRepositoriesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1BatchGetRepositoriesCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1BatchGetRepositoriesOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1BatchGetRepositoriesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
    var _l;
    return __generator(this, function (_m) {
        switch (_m.label) {
            case 0:
                _a = [__assign({}, output)];
                _l = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 12];
                    case "MaximumRepositoryNamesExceededException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#MaximumRepositoryNamesExceededException": return [3 /*break*/, 14];
                    case "RepositoryNamesRequiredException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#RepositoryNamesRequiredException": return [3 /*break*/, 16];
                }
                return [3 /*break*/, 18];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumRepositoryNamesExceededExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNamesRequiredExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 18:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _m.label = 19;
            case 19:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1CreateApprovalRuleTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1CreateApprovalRuleTemplateCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1CreateApprovalRuleTemplateOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1CreateApprovalRuleTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator(this, function (_l) {
        switch (_l.label) {
            case 0:
                _a = [__assign({}, output)];
                _k = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ApprovalRuleTemplateContentRequiredException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#ApprovalRuleTemplateContentRequiredException": return [3 /*break*/, 2];
                    case "ApprovalRuleTemplateNameAlreadyExistsException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#ApprovalRuleTemplateNameAlreadyExistsException": return [3 /*break*/, 4];
                    case "ApprovalRuleTemplateNameRequiredException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#ApprovalRuleTemplateNameRequiredException": return [3 /*break*/, 6];
                    case "InvalidApprovalRuleTemplateContentException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#InvalidApprovalRuleTemplateContentException": return [3 /*break*/, 8];
                    case "InvalidApprovalRuleTemplateDescriptionException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#InvalidApprovalRuleTemplateDescriptionException": return [3 /*break*/, 10];
                    case "InvalidApprovalRuleTemplateNameException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#InvalidApprovalRuleTemplateNameException": return [3 /*break*/, 12];
                    case "NumberOfRuleTemplatesExceededException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#NumberOfRuleTemplatesExceededException": return [3 /*break*/, 14];
                }
                return [3 /*break*/, 16];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleTemplateContentRequiredExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleTemplateNameAlreadyExistsExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleTemplateNameRequiredExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidApprovalRuleTemplateContentExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidApprovalRuleTemplateDescriptionExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidApprovalRuleTemplateNameExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1NumberOfRuleTemplatesExceededExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 16:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _l.label = 17;
            case 17:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1CreateBranchCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1CreateBranchCommandError(output, context)];
                }
                return [4 /*yield*/, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1CreateBranchCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, parsedBody, message;
    var _s;
    return __generator(this, function (_t) {
        switch (_t.label) {
            case 0:
                _a = [__assign({}, output)];
                _s = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_s.body = _t.sent(), _s)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BranchNameExistsException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#BranchNameExistsException": return [3 /*break*/, 2];
                    case "BranchNameRequiredException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#BranchNameRequiredException": return [3 /*break*/, 4];
                    case "CommitDoesNotExistException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#CommitDoesNotExistException": return [3 /*break*/, 6];
                    case "CommitIdRequiredException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#CommitIdRequiredException": return [3 /*break*/, 8];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 10];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 12];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 14];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 16];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 18];
                    case "InvalidBranchNameException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#InvalidBranchNameException": return [3 /*break*/, 20];
                    case "InvalidCommitIdException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#InvalidCommitIdException": return [3 /*break*/, 22];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 24];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 26];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 28];
                }
                return [3 /*break*/, 30];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BranchNameExistsExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BranchNameRequiredExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitDoesNotExistExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitIdRequiredExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidBranchNameExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommitIdExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 30:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _t.label = 31;
            case 31:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1CreateCommitCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1CreateCommitCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1CreateCommitOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1CreateCommitCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, parsedBody, message;
    var _16;
    return __generator(this, function (_17) {
        switch (_17.label) {
            case 0:
                _a = [__assign({}, output)];
                _16 = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_16.body = _17.sent(), _16)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BranchDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#BranchDoesNotExistException": return [3 /*break*/, 2];
                    case "BranchNameIsTagNameException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#BranchNameIsTagNameException": return [3 /*break*/, 4];
                    case "BranchNameRequiredException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#BranchNameRequiredException": return [3 /*break*/, 6];
                    case "CommitMessageLengthExceededException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#CommitMessageLengthExceededException": return [3 /*break*/, 8];
                    case "DirectoryNameConflictsWithFileNameException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#DirectoryNameConflictsWithFileNameException": return [3 /*break*/, 10];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 12];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 14];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 16];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 18];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 20];
                    case "FileContentAndSourceFileSpecifiedException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#FileContentAndSourceFileSpecifiedException": return [3 /*break*/, 22];
                    case "FileContentSizeLimitExceededException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#FileContentSizeLimitExceededException": return [3 /*break*/, 24];
                    case "FileDoesNotExistException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#FileDoesNotExistException": return [3 /*break*/, 26];
                    case "FileEntryRequiredException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#FileEntryRequiredException": return [3 /*break*/, 28];
                    case "FileModeRequiredException": return [3 /*break*/, 30];
                    case "com.amazonaws.codecommit#FileModeRequiredException": return [3 /*break*/, 30];
                    case "FileNameConflictsWithDirectoryNameException": return [3 /*break*/, 32];
                    case "com.amazonaws.codecommit#FileNameConflictsWithDirectoryNameException": return [3 /*break*/, 32];
                    case "FilePathConflictsWithSubmodulePathException": return [3 /*break*/, 34];
                    case "com.amazonaws.codecommit#FilePathConflictsWithSubmodulePathException": return [3 /*break*/, 34];
                    case "FolderContentSizeLimitExceededException": return [3 /*break*/, 36];
                    case "com.amazonaws.codecommit#FolderContentSizeLimitExceededException": return [3 /*break*/, 36];
                    case "InvalidBranchNameException": return [3 /*break*/, 38];
                    case "com.amazonaws.codecommit#InvalidBranchNameException": return [3 /*break*/, 38];
                    case "InvalidDeletionParameterException": return [3 /*break*/, 40];
                    case "com.amazonaws.codecommit#InvalidDeletionParameterException": return [3 /*break*/, 40];
                    case "InvalidEmailException": return [3 /*break*/, 42];
                    case "com.amazonaws.codecommit#InvalidEmailException": return [3 /*break*/, 42];
                    case "InvalidFileModeException": return [3 /*break*/, 44];
                    case "com.amazonaws.codecommit#InvalidFileModeException": return [3 /*break*/, 44];
                    case "InvalidParentCommitIdException": return [3 /*break*/, 46];
                    case "com.amazonaws.codecommit#InvalidParentCommitIdException": return [3 /*break*/, 46];
                    case "InvalidPathException": return [3 /*break*/, 48];
                    case "com.amazonaws.codecommit#InvalidPathException": return [3 /*break*/, 48];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 50];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 50];
                    case "MaximumFileEntriesExceededException": return [3 /*break*/, 52];
                    case "com.amazonaws.codecommit#MaximumFileEntriesExceededException": return [3 /*break*/, 52];
                    case "NameLengthExceededException": return [3 /*break*/, 54];
                    case "com.amazonaws.codecommit#NameLengthExceededException": return [3 /*break*/, 54];
                    case "NoChangeException": return [3 /*break*/, 56];
                    case "com.amazonaws.codecommit#NoChangeException": return [3 /*break*/, 56];
                    case "ParentCommitDoesNotExistException": return [3 /*break*/, 58];
                    case "com.amazonaws.codecommit#ParentCommitDoesNotExistException": return [3 /*break*/, 58];
                    case "ParentCommitIdOutdatedException": return [3 /*break*/, 60];
                    case "com.amazonaws.codecommit#ParentCommitIdOutdatedException": return [3 /*break*/, 60];
                    case "ParentCommitIdRequiredException": return [3 /*break*/, 62];
                    case "com.amazonaws.codecommit#ParentCommitIdRequiredException": return [3 /*break*/, 62];
                    case "PathRequiredException": return [3 /*break*/, 64];
                    case "com.amazonaws.codecommit#PathRequiredException": return [3 /*break*/, 64];
                    case "PutFileEntryConflictException": return [3 /*break*/, 66];
                    case "com.amazonaws.codecommit#PutFileEntryConflictException": return [3 /*break*/, 66];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 68];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 68];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 70];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 70];
                    case "RestrictedSourceFileException": return [3 /*break*/, 72];
                    case "com.amazonaws.codecommit#RestrictedSourceFileException": return [3 /*break*/, 72];
                    case "SamePathRequestException": return [3 /*break*/, 74];
                    case "com.amazonaws.codecommit#SamePathRequestException": return [3 /*break*/, 74];
                    case "SourceFileOrContentRequiredException": return [3 /*break*/, 76];
                    case "com.amazonaws.codecommit#SourceFileOrContentRequiredException": return [3 /*break*/, 76];
                }
                return [3 /*break*/, 78];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BranchDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BranchNameIsTagNameExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BranchNameRequiredExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitMessageLengthExceededExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1DirectoryNameConflictsWithFileNameExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FileContentAndSourceFileSpecifiedExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FileContentSizeLimitExceededExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FileDoesNotExistExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FileEntryRequiredExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 30:
                _s = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FileModeRequiredExceptionResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 32:
                _t = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FileNameConflictsWithDirectoryNameExceptionResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 34:
                _u = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FilePathConflictsWithSubmodulePathExceptionResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 36:
                _v = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FolderContentSizeLimitExceededExceptionResponse(parsedOutput, context)];
            case 37:
                response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 38:
                _w = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidBranchNameExceptionResponse(parsedOutput, context)];
            case 39:
                response = __assign.apply(void 0, [__assign.apply(void 0, _w.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 40:
                _x = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidDeletionParameterExceptionResponse(parsedOutput, context)];
            case 41:
                response = __assign.apply(void 0, [__assign.apply(void 0, _x.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 42:
                _y = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidEmailExceptionResponse(parsedOutput, context)];
            case 43:
                response = __assign.apply(void 0, [__assign.apply(void 0, _y.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 44:
                _z = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidFileModeExceptionResponse(parsedOutput, context)];
            case 45:
                response = __assign.apply(void 0, [__assign.apply(void 0, _z.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 46:
                _0 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidParentCommitIdExceptionResponse(parsedOutput, context)];
            case 47:
                response = __assign.apply(void 0, [__assign.apply(void 0, _0.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 48:
                _1 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPathExceptionResponse(parsedOutput, context)];
            case 49:
                response = __assign.apply(void 0, [__assign.apply(void 0, _1.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 50:
                _2 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 51:
                response = __assign.apply(void 0, [__assign.apply(void 0, _2.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 52:
                _3 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumFileEntriesExceededExceptionResponse(parsedOutput, context)];
            case 53:
                response = __assign.apply(void 0, [__assign.apply(void 0, _3.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 54:
                _4 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1NameLengthExceededExceptionResponse(parsedOutput, context)];
            case 55:
                response = __assign.apply(void 0, [__assign.apply(void 0, _4.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 56:
                _5 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1NoChangeExceptionResponse(parsedOutput, context)];
            case 57:
                response = __assign.apply(void 0, [__assign.apply(void 0, _5.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 58:
                _6 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ParentCommitDoesNotExistExceptionResponse(parsedOutput, context)];
            case 59:
                response = __assign.apply(void 0, [__assign.apply(void 0, _6.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 60:
                _7 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ParentCommitIdOutdatedExceptionResponse(parsedOutput, context)];
            case 61:
                response = __assign.apply(void 0, [__assign.apply(void 0, _7.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 62:
                _8 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ParentCommitIdRequiredExceptionResponse(parsedOutput, context)];
            case 63:
                response = __assign.apply(void 0, [__assign.apply(void 0, _8.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 64:
                _9 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PathRequiredExceptionResponse(parsedOutput, context)];
            case 65:
                response = __assign.apply(void 0, [__assign.apply(void 0, _9.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 66:
                _10 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PutFileEntryConflictExceptionResponse(parsedOutput, context)];
            case 67:
                response = __assign.apply(void 0, [__assign.apply(void 0, _10.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 68:
                _11 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 69:
                response = __assign.apply(void 0, [__assign.apply(void 0, _11.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 70:
                _12 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 71:
                response = __assign.apply(void 0, [__assign.apply(void 0, _12.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 72:
                _13 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RestrictedSourceFileExceptionResponse(parsedOutput, context)];
            case 73:
                response = __assign.apply(void 0, [__assign.apply(void 0, _13.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 74:
                _14 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1SamePathRequestExceptionResponse(parsedOutput, context)];
            case 75:
                response = __assign.apply(void 0, [__assign.apply(void 0, _14.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 76:
                _15 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1SourceFileOrContentRequiredExceptionResponse(parsedOutput, context)];
            case 77:
                response = __assign.apply(void 0, [__assign.apply(void 0, _15.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 78:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _17.label = 79;
            case 79:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1CreatePullRequestCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1CreatePullRequestCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1CreatePullRequestOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1CreatePullRequestCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, parsedBody, message;
    var _3;
    return __generator(this, function (_4) {
        switch (_4.label) {
            case 0:
                _a = [__assign({}, output)];
                _3 = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_3.body = _4.sent(), _3)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ClientRequestTokenRequiredException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#ClientRequestTokenRequiredException": return [3 /*break*/, 2];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 4];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 6];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 8];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 10];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 12];
                    case "IdempotencyParameterMismatchException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#IdempotencyParameterMismatchException": return [3 /*break*/, 14];
                    case "InvalidClientRequestTokenException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidClientRequestTokenException": return [3 /*break*/, 16];
                    case "InvalidDescriptionException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidDescriptionException": return [3 /*break*/, 18];
                    case "InvalidReferenceNameException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#InvalidReferenceNameException": return [3 /*break*/, 20];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 22];
                    case "InvalidTargetException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#InvalidTargetException": return [3 /*break*/, 24];
                    case "InvalidTargetsException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#InvalidTargetsException": return [3 /*break*/, 26];
                    case "InvalidTitleException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#InvalidTitleException": return [3 /*break*/, 28];
                    case "MaximumOpenPullRequestsExceededException": return [3 /*break*/, 30];
                    case "com.amazonaws.codecommit#MaximumOpenPullRequestsExceededException": return [3 /*break*/, 30];
                    case "MultipleRepositoriesInPullRequestException": return [3 /*break*/, 32];
                    case "com.amazonaws.codecommit#MultipleRepositoriesInPullRequestException": return [3 /*break*/, 32];
                    case "ReferenceDoesNotExistException": return [3 /*break*/, 34];
                    case "com.amazonaws.codecommit#ReferenceDoesNotExistException": return [3 /*break*/, 34];
                    case "ReferenceNameRequiredException": return [3 /*break*/, 36];
                    case "com.amazonaws.codecommit#ReferenceNameRequiredException": return [3 /*break*/, 36];
                    case "ReferenceTypeNotSupportedException": return [3 /*break*/, 38];
                    case "com.amazonaws.codecommit#ReferenceTypeNotSupportedException": return [3 /*break*/, 38];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 40];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 40];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 42];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 42];
                    case "SourceAndDestinationAreSameException": return [3 /*break*/, 44];
                    case "com.amazonaws.codecommit#SourceAndDestinationAreSameException": return [3 /*break*/, 44];
                    case "TargetRequiredException": return [3 /*break*/, 46];
                    case "com.amazonaws.codecommit#TargetRequiredException": return [3 /*break*/, 46];
                    case "TargetsRequiredException": return [3 /*break*/, 48];
                    case "com.amazonaws.codecommit#TargetsRequiredException": return [3 /*break*/, 48];
                    case "TitleRequiredException": return [3 /*break*/, 50];
                    case "com.amazonaws.codecommit#TitleRequiredException": return [3 /*break*/, 50];
                }
                return [3 /*break*/, 52];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ClientRequestTokenRequiredExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_4.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 53];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_4.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 53];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_4.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 53];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_4.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 53];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_4.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 53];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_4.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 53];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1IdempotencyParameterMismatchExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_4.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 53];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidClientRequestTokenExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_4.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 53];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidDescriptionExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_4.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 53];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidReferenceNameExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_4.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 53];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_4.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 53];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidTargetExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_4.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 53];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidTargetsExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_4.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 53];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidTitleExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_4.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 53];
            case 30:
                _s = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumOpenPullRequestsExceededExceptionResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_4.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 53];
            case 32:
                _t = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MultipleRepositoriesInPullRequestExceptionResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_4.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 53];
            case 34:
                _u = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ReferenceDoesNotExistExceptionResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_4.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 53];
            case 36:
                _v = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ReferenceNameRequiredExceptionResponse(parsedOutput, context)];
            case 37:
                response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([(_4.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 53];
            case 38:
                _w = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ReferenceTypeNotSupportedExceptionResponse(parsedOutput, context)];
            case 39:
                response = __assign.apply(void 0, [__assign.apply(void 0, _w.concat([(_4.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 53];
            case 40:
                _x = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 41:
                response = __assign.apply(void 0, [__assign.apply(void 0, _x.concat([(_4.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 53];
            case 42:
                _y = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 43:
                response = __assign.apply(void 0, [__assign.apply(void 0, _y.concat([(_4.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 53];
            case 44:
                _z = [{}];
                return [4 /*yield*/, deserializeAws_json1_1SourceAndDestinationAreSameExceptionResponse(parsedOutput, context)];
            case 45:
                response = __assign.apply(void 0, [__assign.apply(void 0, _z.concat([(_4.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 53];
            case 46:
                _0 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1TargetRequiredExceptionResponse(parsedOutput, context)];
            case 47:
                response = __assign.apply(void 0, [__assign.apply(void 0, _0.concat([(_4.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 53];
            case 48:
                _1 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1TargetsRequiredExceptionResponse(parsedOutput, context)];
            case 49:
                response = __assign.apply(void 0, [__assign.apply(void 0, _1.concat([(_4.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 53];
            case 50:
                _2 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1TitleRequiredExceptionResponse(parsedOutput, context)];
            case 51:
                response = __assign.apply(void 0, [__assign.apply(void 0, _2.concat([(_4.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 53];
            case 52:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _4.label = 53;
            case 53:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1CreatePullRequestApprovalRuleCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1CreatePullRequestApprovalRuleCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1CreatePullRequestApprovalRuleOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1CreatePullRequestApprovalRuleCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, parsedBody, message;
    var _t;
    return __generator(this, function (_u) {
        switch (_u.label) {
            case 0:
                _a = [__assign({}, output)];
                _t = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_t.body = _u.sent(), _t)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ApprovalRuleContentRequiredException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#ApprovalRuleContentRequiredException": return [3 /*break*/, 2];
                    case "ApprovalRuleNameAlreadyExistsException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#ApprovalRuleNameAlreadyExistsException": return [3 /*break*/, 4];
                    case "ApprovalRuleNameRequiredException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#ApprovalRuleNameRequiredException": return [3 /*break*/, 6];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 8];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 10];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 12];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 14];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 16];
                    case "InvalidApprovalRuleContentException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidApprovalRuleContentException": return [3 /*break*/, 18];
                    case "InvalidApprovalRuleNameException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#InvalidApprovalRuleNameException": return [3 /*break*/, 20];
                    case "InvalidPullRequestIdException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#InvalidPullRequestIdException": return [3 /*break*/, 22];
                    case "NumberOfRulesExceededException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#NumberOfRulesExceededException": return [3 /*break*/, 24];
                    case "PullRequestAlreadyClosedException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#PullRequestAlreadyClosedException": return [3 /*break*/, 26];
                    case "PullRequestDoesNotExistException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#PullRequestDoesNotExistException": return [3 /*break*/, 28];
                    case "PullRequestIdRequiredException": return [3 /*break*/, 30];
                    case "com.amazonaws.codecommit#PullRequestIdRequiredException": return [3 /*break*/, 30];
                }
                return [3 /*break*/, 32];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleContentRequiredExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleNameAlreadyExistsExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleNameRequiredExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidApprovalRuleContentExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidApprovalRuleNameExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPullRequestIdExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1NumberOfRulesExceededExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestAlreadyClosedExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestDoesNotExistExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 30:
                _s = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestIdRequiredExceptionResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 32:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _u.label = 33;
            case 33:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1CreateRepositoryCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1CreateRepositoryCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1CreateRepositoryOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1CreateRepositoryCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, parsedBody, message;
    var _s;
    return __generator(this, function (_t) {
        switch (_t.label) {
            case 0:
                _a = [__assign({}, output)];
                _s = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_s.body = _t.sent(), _s)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "InvalidRepositoryDescriptionException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#InvalidRepositoryDescriptionException": return [3 /*break*/, 12];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 14];
                    case "InvalidSystemTagUsageException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidSystemTagUsageException": return [3 /*break*/, 16];
                    case "InvalidTagsMapException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidTagsMapException": return [3 /*break*/, 18];
                    case "RepositoryLimitExceededException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#RepositoryLimitExceededException": return [3 /*break*/, 20];
                    case "RepositoryNameExistsException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#RepositoryNameExistsException": return [3 /*break*/, 22];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 24];
                    case "TagPolicyException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#TagPolicyException": return [3 /*break*/, 26];
                    case "TooManyTagsException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#TooManyTagsException": return [3 /*break*/, 28];
                }
                return [3 /*break*/, 30];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryDescriptionExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidSystemTagUsageExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidTagsMapExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryLimitExceededExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameExistsExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1TagPolicyExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1TooManyTagsExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 30:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _t.label = 31;
            case 31:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1CreateUnreferencedMergeCommitCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1CreateUnreferencedMergeCommitCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1CreateUnreferencedMergeCommitOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1CreateUnreferencedMergeCommitCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, parsedBody, message;
    var _14;
    return __generator(this, function (_15) {
        switch (_15.label) {
            case 0:
                _a = [__assign({}, output)];
                _14 = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_14.body = _15.sent(), _14)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CommitDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#CommitDoesNotExistException": return [3 /*break*/, 2];
                    case "CommitMessageLengthExceededException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#CommitMessageLengthExceededException": return [3 /*break*/, 4];
                    case "CommitRequiredException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#CommitRequiredException": return [3 /*break*/, 6];
                    case "ConcurrentReferenceUpdateException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#ConcurrentReferenceUpdateException": return [3 /*break*/, 8];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 10];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 12];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 14];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 16];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 18];
                    case "FileContentSizeLimitExceededException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#FileContentSizeLimitExceededException": return [3 /*break*/, 20];
                    case "FileModeRequiredException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#FileModeRequiredException": return [3 /*break*/, 22];
                    case "FolderContentSizeLimitExceededException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#FolderContentSizeLimitExceededException": return [3 /*break*/, 24];
                    case "InvalidCommitException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#InvalidCommitException": return [3 /*break*/, 26];
                    case "InvalidConflictDetailLevelException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#InvalidConflictDetailLevelException": return [3 /*break*/, 28];
                    case "InvalidConflictResolutionException": return [3 /*break*/, 30];
                    case "com.amazonaws.codecommit#InvalidConflictResolutionException": return [3 /*break*/, 30];
                    case "InvalidConflictResolutionStrategyException": return [3 /*break*/, 32];
                    case "com.amazonaws.codecommit#InvalidConflictResolutionStrategyException": return [3 /*break*/, 32];
                    case "InvalidEmailException": return [3 /*break*/, 34];
                    case "com.amazonaws.codecommit#InvalidEmailException": return [3 /*break*/, 34];
                    case "InvalidFileModeException": return [3 /*break*/, 36];
                    case "com.amazonaws.codecommit#InvalidFileModeException": return [3 /*break*/, 36];
                    case "InvalidMergeOptionException": return [3 /*break*/, 38];
                    case "com.amazonaws.codecommit#InvalidMergeOptionException": return [3 /*break*/, 38];
                    case "InvalidPathException": return [3 /*break*/, 40];
                    case "com.amazonaws.codecommit#InvalidPathException": return [3 /*break*/, 40];
                    case "InvalidReplacementContentException": return [3 /*break*/, 42];
                    case "com.amazonaws.codecommit#InvalidReplacementContentException": return [3 /*break*/, 42];
                    case "InvalidReplacementTypeException": return [3 /*break*/, 44];
                    case "com.amazonaws.codecommit#InvalidReplacementTypeException": return [3 /*break*/, 44];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 46];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 46];
                    case "ManualMergeRequiredException": return [3 /*break*/, 48];
                    case "com.amazonaws.codecommit#ManualMergeRequiredException": return [3 /*break*/, 48];
                    case "MaximumConflictResolutionEntriesExceededException": return [3 /*break*/, 50];
                    case "com.amazonaws.codecommit#MaximumConflictResolutionEntriesExceededException": return [3 /*break*/, 50];
                    case "MaximumFileContentToLoadExceededException": return [3 /*break*/, 52];
                    case "com.amazonaws.codecommit#MaximumFileContentToLoadExceededException": return [3 /*break*/, 52];
                    case "MaximumItemsToCompareExceededException": return [3 /*break*/, 54];
                    case "com.amazonaws.codecommit#MaximumItemsToCompareExceededException": return [3 /*break*/, 54];
                    case "MergeOptionRequiredException": return [3 /*break*/, 56];
                    case "com.amazonaws.codecommit#MergeOptionRequiredException": return [3 /*break*/, 56];
                    case "MultipleConflictResolutionEntriesException": return [3 /*break*/, 58];
                    case "com.amazonaws.codecommit#MultipleConflictResolutionEntriesException": return [3 /*break*/, 58];
                    case "NameLengthExceededException": return [3 /*break*/, 60];
                    case "com.amazonaws.codecommit#NameLengthExceededException": return [3 /*break*/, 60];
                    case "PathRequiredException": return [3 /*break*/, 62];
                    case "com.amazonaws.codecommit#PathRequiredException": return [3 /*break*/, 62];
                    case "ReplacementContentRequiredException": return [3 /*break*/, 64];
                    case "com.amazonaws.codecommit#ReplacementContentRequiredException": return [3 /*break*/, 64];
                    case "ReplacementTypeRequiredException": return [3 /*break*/, 66];
                    case "com.amazonaws.codecommit#ReplacementTypeRequiredException": return [3 /*break*/, 66];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 68];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 68];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 70];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 70];
                    case "TipsDivergenceExceededException": return [3 /*break*/, 72];
                    case "com.amazonaws.codecommit#TipsDivergenceExceededException": return [3 /*break*/, 72];
                }
                return [3 /*break*/, 74];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitMessageLengthExceededExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitRequiredExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ConcurrentReferenceUpdateExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FileContentSizeLimitExceededExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FileModeRequiredExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FolderContentSizeLimitExceededExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommitExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidConflictDetailLevelExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 30:
                _s = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidConflictResolutionExceptionResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 32:
                _t = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidConflictResolutionStrategyExceptionResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 34:
                _u = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidEmailExceptionResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 36:
                _v = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidFileModeExceptionResponse(parsedOutput, context)];
            case 37:
                response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 38:
                _w = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidMergeOptionExceptionResponse(parsedOutput, context)];
            case 39:
                response = __assign.apply(void 0, [__assign.apply(void 0, _w.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 40:
                _x = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPathExceptionResponse(parsedOutput, context)];
            case 41:
                response = __assign.apply(void 0, [__assign.apply(void 0, _x.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 42:
                _y = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidReplacementContentExceptionResponse(parsedOutput, context)];
            case 43:
                response = __assign.apply(void 0, [__assign.apply(void 0, _y.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 44:
                _z = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidReplacementTypeExceptionResponse(parsedOutput, context)];
            case 45:
                response = __assign.apply(void 0, [__assign.apply(void 0, _z.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 46:
                _0 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 47:
                response = __assign.apply(void 0, [__assign.apply(void 0, _0.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 48:
                _1 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ManualMergeRequiredExceptionResponse(parsedOutput, context)];
            case 49:
                response = __assign.apply(void 0, [__assign.apply(void 0, _1.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 50:
                _2 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumConflictResolutionEntriesExceededExceptionResponse(parsedOutput, context)];
            case 51:
                response = __assign.apply(void 0, [__assign.apply(void 0, _2.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 52:
                _3 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumFileContentToLoadExceededExceptionResponse(parsedOutput, context)];
            case 53:
                response = __assign.apply(void 0, [__assign.apply(void 0, _3.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 54:
                _4 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumItemsToCompareExceededExceptionResponse(parsedOutput, context)];
            case 55:
                response = __assign.apply(void 0, [__assign.apply(void 0, _4.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 56:
                _5 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MergeOptionRequiredExceptionResponse(parsedOutput, context)];
            case 57:
                response = __assign.apply(void 0, [__assign.apply(void 0, _5.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 58:
                _6 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MultipleConflictResolutionEntriesExceptionResponse(parsedOutput, context)];
            case 59:
                response = __assign.apply(void 0, [__assign.apply(void 0, _6.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 60:
                _7 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1NameLengthExceededExceptionResponse(parsedOutput, context)];
            case 61:
                response = __assign.apply(void 0, [__assign.apply(void 0, _7.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 62:
                _8 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PathRequiredExceptionResponse(parsedOutput, context)];
            case 63:
                response = __assign.apply(void 0, [__assign.apply(void 0, _8.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 64:
                _9 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ReplacementContentRequiredExceptionResponse(parsedOutput, context)];
            case 65:
                response = __assign.apply(void 0, [__assign.apply(void 0, _9.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 66:
                _10 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ReplacementTypeRequiredExceptionResponse(parsedOutput, context)];
            case 67:
                response = __assign.apply(void 0, [__assign.apply(void 0, _10.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 68:
                _11 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 69:
                response = __assign.apply(void 0, [__assign.apply(void 0, _11.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 70:
                _12 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 71:
                response = __assign.apply(void 0, [__assign.apply(void 0, _12.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 72:
                _13 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1TipsDivergenceExceededExceptionResponse(parsedOutput, context)];
            case 73:
                response = __assign.apply(void 0, [__assign.apply(void 0, _13.concat([(_15.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 75];
            case 74:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _15.label = 75;
            case 75:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1DeleteApprovalRuleTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1DeleteApprovalRuleTemplateCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1DeleteApprovalRuleTemplateOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DeleteApprovalRuleTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ApprovalRuleTemplateInUseException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#ApprovalRuleTemplateInUseException": return [3 /*break*/, 2];
                    case "ApprovalRuleTemplateNameRequiredException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#ApprovalRuleTemplateNameRequiredException": return [3 /*break*/, 4];
                    case "InvalidApprovalRuleTemplateNameException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#InvalidApprovalRuleTemplateNameException": return [3 /*break*/, 6];
                }
                return [3 /*break*/, 8];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleTemplateInUseExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 9];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleTemplateNameRequiredExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 9];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidApprovalRuleTemplateNameExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1DeleteBranchCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1DeleteBranchCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1DeleteBranchOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DeleteBranchCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, parsedBody, message;
    var _p;
    return __generator(this, function (_q) {
        switch (_q.label) {
            case 0:
                _a = [__assign({}, output)];
                _p = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_p.body = _q.sent(), _p)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BranchNameRequiredException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#BranchNameRequiredException": return [3 /*break*/, 2];
                    case "DefaultBranchCannotBeDeletedException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#DefaultBranchCannotBeDeletedException": return [3 /*break*/, 4];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "InvalidBranchNameException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidBranchNameException": return [3 /*break*/, 16];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 18];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 20];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 22];
                }
                return [3 /*break*/, 24];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BranchNameRequiredExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1DefaultBranchCannotBeDeletedExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidBranchNameExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 24:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _q.label = 25;
            case 25:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1DeleteCommentContentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1DeleteCommentContentCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1DeleteCommentContentOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DeleteCommentContentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function (_h) {
        switch (_h.label) {
            case 0:
                _a = [__assign({}, output)];
                _g = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CommentDeletedException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#CommentDeletedException": return [3 /*break*/, 2];
                    case "CommentDoesNotExistException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#CommentDoesNotExistException": return [3 /*break*/, 4];
                    case "CommentIdRequiredException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#CommentIdRequiredException": return [3 /*break*/, 6];
                    case "InvalidCommentIdException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#InvalidCommentIdException": return [3 /*break*/, 8];
                }
                return [3 /*break*/, 10];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentDeletedExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 11];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentDoesNotExistExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 11];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentIdRequiredExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 11];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommentIdExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 11];
            case 10:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _h.label = 11;
            case 11:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1DeleteFileCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1DeleteFileCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1DeleteFileOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DeleteFileCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, parsedBody, message;
    var _0;
    return __generator(this, function (_1) {
        switch (_1.label) {
            case 0:
                _a = [__assign({}, output)];
                _0 = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_0.body = _1.sent(), _0)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BranchDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#BranchDoesNotExistException": return [3 /*break*/, 2];
                    case "BranchNameIsTagNameException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#BranchNameIsTagNameException": return [3 /*break*/, 4];
                    case "BranchNameRequiredException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#BranchNameRequiredException": return [3 /*break*/, 6];
                    case "CommitMessageLengthExceededException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#CommitMessageLengthExceededException": return [3 /*break*/, 8];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 10];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 12];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 14];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 16];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 18];
                    case "FileDoesNotExistException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#FileDoesNotExistException": return [3 /*break*/, 20];
                    case "InvalidBranchNameException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#InvalidBranchNameException": return [3 /*break*/, 22];
                    case "InvalidEmailException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#InvalidEmailException": return [3 /*break*/, 24];
                    case "InvalidParentCommitIdException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#InvalidParentCommitIdException": return [3 /*break*/, 26];
                    case "InvalidPathException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#InvalidPathException": return [3 /*break*/, 28];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 30];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 30];
                    case "NameLengthExceededException": return [3 /*break*/, 32];
                    case "com.amazonaws.codecommit#NameLengthExceededException": return [3 /*break*/, 32];
                    case "ParentCommitDoesNotExistException": return [3 /*break*/, 34];
                    case "com.amazonaws.codecommit#ParentCommitDoesNotExistException": return [3 /*break*/, 34];
                    case "ParentCommitIdOutdatedException": return [3 /*break*/, 36];
                    case "com.amazonaws.codecommit#ParentCommitIdOutdatedException": return [3 /*break*/, 36];
                    case "ParentCommitIdRequiredException": return [3 /*break*/, 38];
                    case "com.amazonaws.codecommit#ParentCommitIdRequiredException": return [3 /*break*/, 38];
                    case "PathRequiredException": return [3 /*break*/, 40];
                    case "com.amazonaws.codecommit#PathRequiredException": return [3 /*break*/, 40];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 42];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 42];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 44];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 44];
                }
                return [3 /*break*/, 46];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BranchDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BranchNameIsTagNameExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BranchNameRequiredExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitMessageLengthExceededExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FileDoesNotExistExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidBranchNameExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidEmailExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidParentCommitIdExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPathExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 30:
                _s = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 32:
                _t = [{}];
                return [4 /*yield*/, deserializeAws_json1_1NameLengthExceededExceptionResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 34:
                _u = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ParentCommitDoesNotExistExceptionResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 36:
                _v = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ParentCommitIdOutdatedExceptionResponse(parsedOutput, context)];
            case 37:
                response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 38:
                _w = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ParentCommitIdRequiredExceptionResponse(parsedOutput, context)];
            case 39:
                response = __assign.apply(void 0, [__assign.apply(void 0, _w.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 40:
                _x = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PathRequiredExceptionResponse(parsedOutput, context)];
            case 41:
                response = __assign.apply(void 0, [__assign.apply(void 0, _x.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 42:
                _y = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 43:
                response = __assign.apply(void 0, [__assign.apply(void 0, _y.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 44:
                _z = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 45:
                response = __assign.apply(void 0, [__assign.apply(void 0, _z.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 46:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _1.label = 47;
            case 47:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1DeletePullRequestApprovalRuleCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1DeletePullRequestApprovalRuleCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1DeletePullRequestApprovalRuleOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DeletePullRequestApprovalRuleCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, parsedBody, message;
    var _q;
    return __generator(this, function (_r) {
        switch (_r.label) {
            case 0:
                _a = [__assign({}, output)];
                _q = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_q.body = _r.sent(), _q)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ApprovalRuleNameRequiredException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#ApprovalRuleNameRequiredException": return [3 /*break*/, 2];
                    case "CannotDeleteApprovalRuleFromTemplateException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#CannotDeleteApprovalRuleFromTemplateException": return [3 /*break*/, 4];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "InvalidApprovalRuleNameException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidApprovalRuleNameException": return [3 /*break*/, 16];
                    case "InvalidPullRequestIdException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidPullRequestIdException": return [3 /*break*/, 18];
                    case "PullRequestAlreadyClosedException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#PullRequestAlreadyClosedException": return [3 /*break*/, 20];
                    case "PullRequestDoesNotExistException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#PullRequestDoesNotExistException": return [3 /*break*/, 22];
                    case "PullRequestIdRequiredException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#PullRequestIdRequiredException": return [3 /*break*/, 24];
                }
                return [3 /*break*/, 26];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleNameRequiredExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CannotDeleteApprovalRuleFromTemplateExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidApprovalRuleNameExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPullRequestIdExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestAlreadyClosedExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestDoesNotExistExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestIdRequiredExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 26:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _r.label = 27;
            case 27:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1DeleteRepositoryCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1DeleteRepositoryCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1DeleteRepositoryOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DeleteRepositoryCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator(this, function (_l) {
        switch (_l.label) {
            case 0:
                _a = [__assign({}, output)];
                _k = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 12];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 14];
                }
                return [3 /*break*/, 16];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 16:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _l.label = 17;
            case 17:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1DescribeMergeConflictsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1DescribeMergeConflictsCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1DescribeMergeConflictsOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DescribeMergeConflictsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, parsedBody, message;
    var _1;
    return __generator(this, function (_2) {
        switch (_2.label) {
            case 0:
                _a = [__assign({}, output)];
                _1 = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_1.body = _2.sent(), _1)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CommitDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#CommitDoesNotExistException": return [3 /*break*/, 2];
                    case "CommitRequiredException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#CommitRequiredException": return [3 /*break*/, 4];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "FileDoesNotExistException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#FileDoesNotExistException": return [3 /*break*/, 16];
                    case "InvalidCommitException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidCommitException": return [3 /*break*/, 18];
                    case "InvalidConflictDetailLevelException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#InvalidConflictDetailLevelException": return [3 /*break*/, 20];
                    case "InvalidConflictResolutionStrategyException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#InvalidConflictResolutionStrategyException": return [3 /*break*/, 22];
                    case "InvalidContinuationTokenException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#InvalidContinuationTokenException": return [3 /*break*/, 24];
                    case "InvalidMaxMergeHunksException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#InvalidMaxMergeHunksException": return [3 /*break*/, 26];
                    case "InvalidMergeOptionException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#InvalidMergeOptionException": return [3 /*break*/, 28];
                    case "InvalidPathException": return [3 /*break*/, 30];
                    case "com.amazonaws.codecommit#InvalidPathException": return [3 /*break*/, 30];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 32];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 32];
                    case "MaximumFileContentToLoadExceededException": return [3 /*break*/, 34];
                    case "com.amazonaws.codecommit#MaximumFileContentToLoadExceededException": return [3 /*break*/, 34];
                    case "MaximumItemsToCompareExceededException": return [3 /*break*/, 36];
                    case "com.amazonaws.codecommit#MaximumItemsToCompareExceededException": return [3 /*break*/, 36];
                    case "MergeOptionRequiredException": return [3 /*break*/, 38];
                    case "com.amazonaws.codecommit#MergeOptionRequiredException": return [3 /*break*/, 38];
                    case "PathRequiredException": return [3 /*break*/, 40];
                    case "com.amazonaws.codecommit#PathRequiredException": return [3 /*break*/, 40];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 42];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 42];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 44];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 44];
                    case "TipsDivergenceExceededException": return [3 /*break*/, 46];
                    case "com.amazonaws.codecommit#TipsDivergenceExceededException": return [3 /*break*/, 46];
                }
                return [3 /*break*/, 48];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitRequiredExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FileDoesNotExistExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommitExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidConflictDetailLevelExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidConflictResolutionStrategyExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidContinuationTokenExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidMaxMergeHunksExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidMergeOptionExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 30:
                _s = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPathExceptionResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 32:
                _t = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 34:
                _u = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumFileContentToLoadExceededExceptionResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 36:
                _v = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumItemsToCompareExceededExceptionResponse(parsedOutput, context)];
            case 37:
                response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 38:
                _w = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MergeOptionRequiredExceptionResponse(parsedOutput, context)];
            case 39:
                response = __assign.apply(void 0, [__assign.apply(void 0, _w.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 40:
                _x = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PathRequiredExceptionResponse(parsedOutput, context)];
            case 41:
                response = __assign.apply(void 0, [__assign.apply(void 0, _x.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 42:
                _y = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 43:
                response = __assign.apply(void 0, [__assign.apply(void 0, _y.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 44:
                _z = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 45:
                response = __assign.apply(void 0, [__assign.apply(void 0, _z.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 46:
                _0 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1TipsDivergenceExceededExceptionResponse(parsedOutput, context)];
            case 47:
                response = __assign.apply(void 0, [__assign.apply(void 0, _0.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 48:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _2.label = 49;
            case 49:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1DescribePullRequestEventsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1DescribePullRequestEventsCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1DescribePullRequestEventsOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DescribePullRequestEventsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, parsedBody, message;
    var _r;
    return __generator(this, function (_s) {
        switch (_s.label) {
            case 0:
                _a = [__assign({}, output)];
                _r = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_r.body = _s.sent(), _r)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ActorDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#ActorDoesNotExistException": return [3 /*break*/, 2];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 4];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 6];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 8];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 10];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 12];
                    case "InvalidActorArnException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#InvalidActorArnException": return [3 /*break*/, 14];
                    case "InvalidContinuationTokenException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidContinuationTokenException": return [3 /*break*/, 16];
                    case "InvalidMaxResultsException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidMaxResultsException": return [3 /*break*/, 18];
                    case "InvalidPullRequestEventTypeException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#InvalidPullRequestEventTypeException": return [3 /*break*/, 20];
                    case "InvalidPullRequestIdException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#InvalidPullRequestIdException": return [3 /*break*/, 22];
                    case "PullRequestDoesNotExistException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#PullRequestDoesNotExistException": return [3 /*break*/, 24];
                    case "PullRequestIdRequiredException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#PullRequestIdRequiredException": return [3 /*break*/, 26];
                }
                return [3 /*break*/, 28];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ActorDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidActorArnExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidContinuationTokenExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidMaxResultsExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPullRequestEventTypeExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPullRequestIdExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestDoesNotExistExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestIdRequiredExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 28:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _s.label = 29;
            case 29:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1DisassociateApprovalRuleTemplateFromRepositoryCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1DisassociateApprovalRuleTemplateFromRepositoryCommandError(output, context)];
                }
                return [4 /*yield*/, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DisassociateApprovalRuleTemplateFromRepositoryCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, parsedBody, message;
    var _p;
    return __generator(this, function (_q) {
        switch (_q.label) {
            case 0:
                _a = [__assign({}, output)];
                _p = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_p.body = _q.sent(), _p)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ApprovalRuleTemplateDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#ApprovalRuleTemplateDoesNotExistException": return [3 /*break*/, 2];
                    case "ApprovalRuleTemplateNameRequiredException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#ApprovalRuleTemplateNameRequiredException": return [3 /*break*/, 4];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "InvalidApprovalRuleTemplateNameException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidApprovalRuleTemplateNameException": return [3 /*break*/, 16];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 18];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 20];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 22];
                }
                return [3 /*break*/, 24];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleTemplateDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleTemplateNameRequiredExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidApprovalRuleTemplateNameExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 24:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _q.label = 25;
            case 25:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1EvaluatePullRequestApprovalRulesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1EvaluatePullRequestApprovalRulesCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1EvaluatePullRequestApprovalRulesOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1EvaluatePullRequestApprovalRulesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, parsedBody, message;
    var _p;
    return __generator(this, function (_q) {
        switch (_q.label) {
            case 0:
                _a = [__assign({}, output)];
                _p = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_p.body = _q.sent(), _p)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "InvalidPullRequestIdException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#InvalidPullRequestIdException": return [3 /*break*/, 12];
                    case "InvalidRevisionIdException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#InvalidRevisionIdException": return [3 /*break*/, 14];
                    case "PullRequestDoesNotExistException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#PullRequestDoesNotExistException": return [3 /*break*/, 16];
                    case "PullRequestIdRequiredException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#PullRequestIdRequiredException": return [3 /*break*/, 18];
                    case "RevisionIdRequiredException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#RevisionIdRequiredException": return [3 /*break*/, 20];
                    case "RevisionNotCurrentException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#RevisionNotCurrentException": return [3 /*break*/, 22];
                }
                return [3 /*break*/, 24];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPullRequestIdExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRevisionIdExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestDoesNotExistExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestIdRequiredExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RevisionIdRequiredExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RevisionNotCurrentExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 24:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _q.label = 25;
            case 25:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1GetApprovalRuleTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1GetApprovalRuleTemplateCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetApprovalRuleTemplateOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetApprovalRuleTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ApprovalRuleTemplateDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#ApprovalRuleTemplateDoesNotExistException": return [3 /*break*/, 2];
                    case "ApprovalRuleTemplateNameRequiredException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#ApprovalRuleTemplateNameRequiredException": return [3 /*break*/, 4];
                    case "InvalidApprovalRuleTemplateNameException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#InvalidApprovalRuleTemplateNameException": return [3 /*break*/, 6];
                }
                return [3 /*break*/, 8];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleTemplateDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 9];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleTemplateNameRequiredExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 9];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidApprovalRuleTemplateNameExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1GetBlobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1GetBlobCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetBlobOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetBlobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, parsedBody, message;
    var _q;
    return __generator(this, function (_r) {
        switch (_r.label) {
            case 0:
                _a = [__assign({}, output)];
                _q = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_q.body = _r.sent(), _q)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BlobIdDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#BlobIdDoesNotExistException": return [3 /*break*/, 2];
                    case "BlobIdRequiredException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#BlobIdRequiredException": return [3 /*break*/, 4];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "FileTooLargeException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#FileTooLargeException": return [3 /*break*/, 16];
                    case "InvalidBlobIdException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidBlobIdException": return [3 /*break*/, 18];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 20];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 22];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 24];
                }
                return [3 /*break*/, 26];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BlobIdDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BlobIdRequiredExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FileTooLargeExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidBlobIdExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 27];
            case 26:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _r.label = 27;
            case 27:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1GetBranchCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1GetBranchCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetBranchOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetBranchCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, parsedBody, message;
    var _p;
    return __generator(this, function (_q) {
        switch (_q.label) {
            case 0:
                _a = [__assign({}, output)];
                _p = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_p.body = _q.sent(), _p)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BranchDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#BranchDoesNotExistException": return [3 /*break*/, 2];
                    case "BranchNameRequiredException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#BranchNameRequiredException": return [3 /*break*/, 4];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "InvalidBranchNameException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidBranchNameException": return [3 /*break*/, 16];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 18];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 20];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 22];
                }
                return [3 /*break*/, 24];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BranchDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BranchNameRequiredExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidBranchNameExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 24:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _q.label = 25;
            case 25:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1GetCommentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1GetCommentCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetCommentOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetCommentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, parsedBody, message;
    var _m;
    return __generator(this, function (_o) {
        switch (_o.label) {
            case 0:
                _a = [__assign({}, output)];
                _m = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_m.body = _o.sent(), _m)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CommentDeletedException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#CommentDeletedException": return [3 /*break*/, 2];
                    case "CommentDoesNotExistException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#CommentDoesNotExistException": return [3 /*break*/, 4];
                    case "CommentIdRequiredException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#CommentIdRequiredException": return [3 /*break*/, 6];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 8];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 10];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 12];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 14];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 16];
                    case "InvalidCommentIdException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidCommentIdException": return [3 /*break*/, 18];
                }
                return [3 /*break*/, 20];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentDeletedExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentDoesNotExistExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentIdRequiredExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommentIdExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 20:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _o.label = 21;
            case 21:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1GetCommentReactionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1GetCommentReactionsCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetCommentReactionsOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetCommentReactionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator(this, function (_l) {
        switch (_l.label) {
            case 0:
                _a = [__assign({}, output)];
                _k = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CommentDeletedException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#CommentDeletedException": return [3 /*break*/, 2];
                    case "CommentDoesNotExistException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#CommentDoesNotExistException": return [3 /*break*/, 4];
                    case "CommentIdRequiredException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#CommentIdRequiredException": return [3 /*break*/, 6];
                    case "InvalidCommentIdException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#InvalidCommentIdException": return [3 /*break*/, 8];
                    case "InvalidContinuationTokenException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#InvalidContinuationTokenException": return [3 /*break*/, 10];
                    case "InvalidMaxResultsException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#InvalidMaxResultsException": return [3 /*break*/, 12];
                    case "InvalidReactionUserArnException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#InvalidReactionUserArnException": return [3 /*break*/, 14];
                }
                return [3 /*break*/, 16];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentDeletedExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentDoesNotExistExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentIdRequiredExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommentIdExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidContinuationTokenExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidMaxResultsExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidReactionUserArnExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 16:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _l.label = 17;
            case 17:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1GetCommentsForComparedCommitCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1GetCommentsForComparedCommitCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetCommentsForComparedCommitOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetCommentsForComparedCommitCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, parsedBody, message;
    var _r;
    return __generator(this, function (_s) {
        switch (_s.label) {
            case 0:
                _a = [__assign({}, output)];
                _r = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_r.body = _s.sent(), _r)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CommitDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#CommitDoesNotExistException": return [3 /*break*/, 2];
                    case "CommitIdRequiredException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#CommitIdRequiredException": return [3 /*break*/, 4];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "InvalidCommitIdException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidCommitIdException": return [3 /*break*/, 16];
                    case "InvalidContinuationTokenException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidContinuationTokenException": return [3 /*break*/, 18];
                    case "InvalidMaxResultsException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#InvalidMaxResultsException": return [3 /*break*/, 20];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 22];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 24];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 26];
                }
                return [3 /*break*/, 28];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitIdRequiredExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommitIdExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidContinuationTokenExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidMaxResultsExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 28:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _s.label = 29;
            case 29:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1GetCommentsForPullRequestCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1GetCommentsForPullRequestCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetCommentsForPullRequestOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetCommentsForPullRequestCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, parsedBody, message;
    var _v;
    return __generator(this, function (_w) {
        switch (_w.label) {
            case 0:
                _a = [__assign({}, output)];
                _v = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_v.body = _w.sent(), _v)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CommitDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#CommitDoesNotExistException": return [3 /*break*/, 2];
                    case "CommitIdRequiredException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#CommitIdRequiredException": return [3 /*break*/, 4];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "InvalidCommitIdException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidCommitIdException": return [3 /*break*/, 16];
                    case "InvalidContinuationTokenException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidContinuationTokenException": return [3 /*break*/, 18];
                    case "InvalidMaxResultsException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#InvalidMaxResultsException": return [3 /*break*/, 20];
                    case "InvalidPullRequestIdException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#InvalidPullRequestIdException": return [3 /*break*/, 22];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 24];
                    case "PullRequestDoesNotExistException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#PullRequestDoesNotExistException": return [3 /*break*/, 26];
                    case "PullRequestIdRequiredException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#PullRequestIdRequiredException": return [3 /*break*/, 28];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 30];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 30];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 32];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 32];
                    case "RepositoryNotAssociatedWithPullRequestException": return [3 /*break*/, 34];
                    case "com.amazonaws.codecommit#RepositoryNotAssociatedWithPullRequestException": return [3 /*break*/, 34];
                }
                return [3 /*break*/, 36];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 37];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitIdRequiredExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 37];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 37];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 37];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 37];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 37];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 37];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommitIdExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 37];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidContinuationTokenExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 37];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidMaxResultsExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 37];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPullRequestIdExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 37];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 37];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestDoesNotExistExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 37];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestIdRequiredExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 37];
            case 30:
                _s = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 37];
            case 32:
                _t = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 37];
            case 34:
                _u = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNotAssociatedWithPullRequestExceptionResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_w.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 37];
            case 36:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _w.label = 37;
            case 37:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1GetCommitCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1GetCommitCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetCommitOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetCommitCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, parsedBody, message;
    var _p;
    return __generator(this, function (_q) {
        switch (_q.label) {
            case 0:
                _a = [__assign({}, output)];
                _p = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_p.body = _q.sent(), _p)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CommitIdDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#CommitIdDoesNotExistException": return [3 /*break*/, 2];
                    case "CommitIdRequiredException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#CommitIdRequiredException": return [3 /*break*/, 4];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "InvalidCommitIdException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidCommitIdException": return [3 /*break*/, 16];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 18];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 20];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 22];
                }
                return [3 /*break*/, 24];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitIdDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitIdRequiredExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommitIdExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 24:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _q.label = 25;
            case 25:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1GetDifferencesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1GetDifferencesCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetDifferencesOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetDifferencesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, parsedBody, message;
    var _u;
    return __generator(this, function (_v) {
        switch (_v.label) {
            case 0:
                _a = [__assign({}, output)];
                _u = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_u.body = _v.sent(), _u)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CommitDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#CommitDoesNotExistException": return [3 /*break*/, 2];
                    case "CommitRequiredException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#CommitRequiredException": return [3 /*break*/, 4];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "InvalidCommitException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidCommitException": return [3 /*break*/, 16];
                    case "InvalidCommitIdException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidCommitIdException": return [3 /*break*/, 18];
                    case "InvalidContinuationTokenException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#InvalidContinuationTokenException": return [3 /*break*/, 20];
                    case "InvalidMaxResultsException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#InvalidMaxResultsException": return [3 /*break*/, 22];
                    case "InvalidPathException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#InvalidPathException": return [3 /*break*/, 24];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 26];
                    case "PathDoesNotExistException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#PathDoesNotExistException": return [3 /*break*/, 28];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 30];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 30];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 32];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 32];
                }
                return [3 /*break*/, 34];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitRequiredExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommitExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommitIdExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidContinuationTokenExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidMaxResultsExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPathExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PathDoesNotExistExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 30:
                _s = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 32:
                _t = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 34:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _v.label = 35;
            case 35:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1GetFileCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1GetFileCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetFileOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetFileCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, parsedBody, message;
    var _s;
    return __generator(this, function (_t) {
        switch (_t.label) {
            case 0:
                _a = [__assign({}, output)];
                _s = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_s.body = _t.sent(), _s)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CommitDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#CommitDoesNotExistException": return [3 /*break*/, 2];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 4];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 6];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 8];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 10];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 12];
                    case "FileDoesNotExistException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#FileDoesNotExistException": return [3 /*break*/, 14];
                    case "FileTooLargeException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#FileTooLargeException": return [3 /*break*/, 16];
                    case "InvalidCommitException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidCommitException": return [3 /*break*/, 18];
                    case "InvalidPathException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#InvalidPathException": return [3 /*break*/, 20];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 22];
                    case "PathRequiredException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#PathRequiredException": return [3 /*break*/, 24];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 26];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 28];
                }
                return [3 /*break*/, 30];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FileDoesNotExistExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FileTooLargeExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommitExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPathExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PathRequiredExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_t.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 31];
            case 30:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _t.label = 31;
            case 31:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1GetFolderCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1GetFolderCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetFolderOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetFolderCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, parsedBody, message;
    var _r;
    return __generator(this, function (_s) {
        switch (_s.label) {
            case 0:
                _a = [__assign({}, output)];
                _r = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_r.body = _s.sent(), _r)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CommitDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#CommitDoesNotExistException": return [3 /*break*/, 2];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 4];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 6];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 8];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 10];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 12];
                    case "FolderDoesNotExistException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#FolderDoesNotExistException": return [3 /*break*/, 14];
                    case "InvalidCommitException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidCommitException": return [3 /*break*/, 16];
                    case "InvalidPathException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidPathException": return [3 /*break*/, 18];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 20];
                    case "PathRequiredException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#PathRequiredException": return [3 /*break*/, 22];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 24];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 26];
                }
                return [3 /*break*/, 28];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FolderDoesNotExistExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommitExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPathExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PathRequiredExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 28:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _s.label = 29;
            case 29:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1GetMergeCommitCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1GetMergeCommitCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetMergeCommitOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetMergeCommitCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, parsedBody, message;
    var _r;
    return __generator(this, function (_s) {
        switch (_s.label) {
            case 0:
                _a = [__assign({}, output)];
                _r = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_r.body = _s.sent(), _r)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CommitDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#CommitDoesNotExistException": return [3 /*break*/, 2];
                    case "CommitRequiredException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#CommitRequiredException": return [3 /*break*/, 4];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "InvalidCommitException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidCommitException": return [3 /*break*/, 16];
                    case "InvalidConflictDetailLevelException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidConflictDetailLevelException": return [3 /*break*/, 18];
                    case "InvalidConflictResolutionStrategyException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#InvalidConflictResolutionStrategyException": return [3 /*break*/, 20];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 22];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 24];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 26];
                }
                return [3 /*break*/, 28];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitRequiredExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommitExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidConflictDetailLevelExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidConflictResolutionStrategyExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 28:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _s.label = 29;
            case 29:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1GetMergeConflictsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1GetMergeConflictsCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetMergeConflictsOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetMergeConflictsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, parsedBody, message;
    var _0;
    return __generator(this, function (_1) {
        switch (_1.label) {
            case 0:
                _a = [__assign({}, output)];
                _0 = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_0.body = _1.sent(), _0)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CommitDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#CommitDoesNotExistException": return [3 /*break*/, 2];
                    case "CommitRequiredException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#CommitRequiredException": return [3 /*break*/, 4];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "InvalidCommitException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidCommitException": return [3 /*break*/, 16];
                    case "InvalidConflictDetailLevelException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidConflictDetailLevelException": return [3 /*break*/, 18];
                    case "InvalidConflictResolutionStrategyException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#InvalidConflictResolutionStrategyException": return [3 /*break*/, 20];
                    case "InvalidContinuationTokenException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#InvalidContinuationTokenException": return [3 /*break*/, 22];
                    case "InvalidDestinationCommitSpecifierException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#InvalidDestinationCommitSpecifierException": return [3 /*break*/, 24];
                    case "InvalidMaxConflictFilesException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#InvalidMaxConflictFilesException": return [3 /*break*/, 26];
                    case "InvalidMergeOptionException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#InvalidMergeOptionException": return [3 /*break*/, 28];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 30];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 30];
                    case "InvalidSourceCommitSpecifierException": return [3 /*break*/, 32];
                    case "com.amazonaws.codecommit#InvalidSourceCommitSpecifierException": return [3 /*break*/, 32];
                    case "MaximumFileContentToLoadExceededException": return [3 /*break*/, 34];
                    case "com.amazonaws.codecommit#MaximumFileContentToLoadExceededException": return [3 /*break*/, 34];
                    case "MaximumItemsToCompareExceededException": return [3 /*break*/, 36];
                    case "com.amazonaws.codecommit#MaximumItemsToCompareExceededException": return [3 /*break*/, 36];
                    case "MergeOptionRequiredException": return [3 /*break*/, 38];
                    case "com.amazonaws.codecommit#MergeOptionRequiredException": return [3 /*break*/, 38];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 40];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 40];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 42];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 42];
                    case "TipsDivergenceExceededException": return [3 /*break*/, 44];
                    case "com.amazonaws.codecommit#TipsDivergenceExceededException": return [3 /*break*/, 44];
                }
                return [3 /*break*/, 46];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitRequiredExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommitExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidConflictDetailLevelExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidConflictResolutionStrategyExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidContinuationTokenExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidDestinationCommitSpecifierExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidMaxConflictFilesExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidMergeOptionExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 30:
                _s = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 32:
                _t = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidSourceCommitSpecifierExceptionResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 34:
                _u = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumFileContentToLoadExceededExceptionResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 36:
                _v = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumItemsToCompareExceededExceptionResponse(parsedOutput, context)];
            case 37:
                response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 38:
                _w = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MergeOptionRequiredExceptionResponse(parsedOutput, context)];
            case 39:
                response = __assign.apply(void 0, [__assign.apply(void 0, _w.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 40:
                _x = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 41:
                response = __assign.apply(void 0, [__assign.apply(void 0, _x.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 42:
                _y = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 43:
                response = __assign.apply(void 0, [__assign.apply(void 0, _y.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 44:
                _z = [{}];
                return [4 /*yield*/, deserializeAws_json1_1TipsDivergenceExceededExceptionResponse(parsedOutput, context)];
            case 45:
                response = __assign.apply(void 0, [__assign.apply(void 0, _z.concat([(_1.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 47];
            case 46:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _1.label = 47;
            case 47:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1GetMergeOptionsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1GetMergeOptionsCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetMergeOptionsOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetMergeOptionsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, parsedBody, message;
    var _u;
    return __generator(this, function (_v) {
        switch (_v.label) {
            case 0:
                _a = [__assign({}, output)];
                _u = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_u.body = _v.sent(), _u)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CommitDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#CommitDoesNotExistException": return [3 /*break*/, 2];
                    case "CommitRequiredException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#CommitRequiredException": return [3 /*break*/, 4];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "InvalidCommitException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidCommitException": return [3 /*break*/, 16];
                    case "InvalidConflictDetailLevelException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidConflictDetailLevelException": return [3 /*break*/, 18];
                    case "InvalidConflictResolutionStrategyException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#InvalidConflictResolutionStrategyException": return [3 /*break*/, 20];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 22];
                    case "MaximumFileContentToLoadExceededException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#MaximumFileContentToLoadExceededException": return [3 /*break*/, 24];
                    case "MaximumItemsToCompareExceededException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#MaximumItemsToCompareExceededException": return [3 /*break*/, 26];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 28];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 30];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 30];
                    case "TipsDivergenceExceededException": return [3 /*break*/, 32];
                    case "com.amazonaws.codecommit#TipsDivergenceExceededException": return [3 /*break*/, 32];
                }
                return [3 /*break*/, 34];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitRequiredExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommitExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidConflictDetailLevelExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidConflictResolutionStrategyExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumFileContentToLoadExceededExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumItemsToCompareExceededExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 30:
                _s = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 32:
                _t = [{}];
                return [4 /*yield*/, deserializeAws_json1_1TipsDivergenceExceededExceptionResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 34:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _v.label = 35;
            case 35:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1GetPullRequestCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1GetPullRequestCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetPullRequestOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetPullRequestCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
    var _l;
    return __generator(this, function (_m) {
        switch (_m.label) {
            case 0:
                _a = [__assign({}, output)];
                _l = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "InvalidPullRequestIdException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#InvalidPullRequestIdException": return [3 /*break*/, 12];
                    case "PullRequestDoesNotExistException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#PullRequestDoesNotExistException": return [3 /*break*/, 14];
                    case "PullRequestIdRequiredException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#PullRequestIdRequiredException": return [3 /*break*/, 16];
                }
                return [3 /*break*/, 18];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPullRequestIdExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestDoesNotExistExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestIdRequiredExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 18:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _m.label = 19;
            case 19:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1GetPullRequestApprovalStatesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1GetPullRequestApprovalStatesCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetPullRequestApprovalStatesOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetPullRequestApprovalStatesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, parsedBody, message;
    var _o;
    return __generator(this, function (_p) {
        switch (_p.label) {
            case 0:
                _a = [__assign({}, output)];
                _o = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_o.body = _p.sent(), _o)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "InvalidPullRequestIdException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#InvalidPullRequestIdException": return [3 /*break*/, 12];
                    case "InvalidRevisionIdException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#InvalidRevisionIdException": return [3 /*break*/, 14];
                    case "PullRequestDoesNotExistException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#PullRequestDoesNotExistException": return [3 /*break*/, 16];
                    case "PullRequestIdRequiredException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#PullRequestIdRequiredException": return [3 /*break*/, 18];
                    case "RevisionIdRequiredException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#RevisionIdRequiredException": return [3 /*break*/, 20];
                }
                return [3 /*break*/, 22];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPullRequestIdExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRevisionIdExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestDoesNotExistExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestIdRequiredExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RevisionIdRequiredExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 22:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _p.label = 23;
            case 23:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1GetPullRequestOverrideStateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1GetPullRequestOverrideStateCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetPullRequestOverrideStateOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetPullRequestOverrideStateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, parsedBody, message;
    var _o;
    return __generator(this, function (_p) {
        switch (_p.label) {
            case 0:
                _a = [__assign({}, output)];
                _o = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_o.body = _p.sent(), _o)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "InvalidPullRequestIdException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#InvalidPullRequestIdException": return [3 /*break*/, 12];
                    case "InvalidRevisionIdException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#InvalidRevisionIdException": return [3 /*break*/, 14];
                    case "PullRequestDoesNotExistException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#PullRequestDoesNotExistException": return [3 /*break*/, 16];
                    case "PullRequestIdRequiredException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#PullRequestIdRequiredException": return [3 /*break*/, 18];
                    case "RevisionIdRequiredException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#RevisionIdRequiredException": return [3 /*break*/, 20];
                }
                return [3 /*break*/, 22];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPullRequestIdExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRevisionIdExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestDoesNotExistExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestIdRequiredExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RevisionIdRequiredExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 22:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _p.label = 23;
            case 23:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1GetRepositoryCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1GetRepositoryCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetRepositoryOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetRepositoryCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
    var _l;
    return __generator(this, function (_m) {
        switch (_m.label) {
            case 0:
                _a = [__assign({}, output)];
                _l = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 12];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 14];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 16];
                }
                return [3 /*break*/, 18];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 18:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _m.label = 19;
            case 19:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1GetRepositoryTriggersCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1GetRepositoryTriggersCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1GetRepositoryTriggersOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1GetRepositoryTriggersCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
    var _l;
    return __generator(this, function (_m) {
        switch (_m.label) {
            case 0:
                _a = [__assign({}, output)];
                _l = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 12];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 14];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 16];
                }
                return [3 /*break*/, 18];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 18:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _m.label = 19;
            case 19:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1ListApprovalRuleTemplatesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1ListApprovalRuleTemplatesCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ListApprovalRuleTemplatesOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ListApprovalRuleTemplatesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = [__assign({}, output)];
                _e = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidContinuationTokenException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#InvalidContinuationTokenException": return [3 /*break*/, 2];
                    case "InvalidMaxResultsException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#InvalidMaxResultsException": return [3 /*break*/, 4];
                }
                return [3 /*break*/, 6];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidContinuationTokenExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 7];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidMaxResultsExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 7];
            case 6:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _f.label = 7;
            case 7:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1ListAssociatedApprovalRuleTemplatesForRepositoryCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1ListAssociatedApprovalRuleTemplatesForRepositoryCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ListAssociatedApprovalRuleTemplatesForRepositoryOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ListAssociatedApprovalRuleTemplatesForRepositoryCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, parsedBody, message;
    var _o;
    return __generator(this, function (_p) {
        switch (_p.label) {
            case 0:
                _a = [__assign({}, output)];
                _o = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_o.body = _p.sent(), _o)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "InvalidContinuationTokenException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#InvalidContinuationTokenException": return [3 /*break*/, 12];
                    case "InvalidMaxResultsException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#InvalidMaxResultsException": return [3 /*break*/, 14];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 16];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 18];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 20];
                }
                return [3 /*break*/, 22];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidContinuationTokenExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidMaxResultsExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 22:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _p.label = 23;
            case 23:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1ListBranchesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1ListBranchesCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ListBranchesOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ListBranchesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, parsedBody, message;
    var _m;
    return __generator(this, function (_o) {
        switch (_o.label) {
            case 0:
                _a = [__assign({}, output)];
                _m = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_m.body = _o.sent(), _m)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "InvalidContinuationTokenException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#InvalidContinuationTokenException": return [3 /*break*/, 12];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 14];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 16];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 18];
                }
                return [3 /*break*/, 20];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidContinuationTokenExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 20:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _o.label = 21;
            case 21:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1ListPullRequestsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1ListPullRequestsCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ListPullRequestsOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ListPullRequestsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, parsedBody, message;
    var _r;
    return __generator(this, function (_s) {
        switch (_s.label) {
            case 0:
                _a = [__assign({}, output)];
                _r = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_r.body = _s.sent(), _r)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AuthorDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#AuthorDoesNotExistException": return [3 /*break*/, 2];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 4];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 6];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 8];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 10];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 12];
                    case "InvalidAuthorArnException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#InvalidAuthorArnException": return [3 /*break*/, 14];
                    case "InvalidContinuationTokenException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidContinuationTokenException": return [3 /*break*/, 16];
                    case "InvalidMaxResultsException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidMaxResultsException": return [3 /*break*/, 18];
                    case "InvalidPullRequestStatusException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#InvalidPullRequestStatusException": return [3 /*break*/, 20];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 22];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 24];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 26];
                }
                return [3 /*break*/, 28];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1AuthorDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidAuthorArnExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidContinuationTokenExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidMaxResultsExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPullRequestStatusExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_s.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 29];
            case 28:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _s.label = 29;
            case 29:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1ListRepositoriesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1ListRepositoriesCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ListRepositoriesOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ListRepositoriesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
    var _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _a = [__assign({}, output)];
                _f = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidContinuationTokenException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#InvalidContinuationTokenException": return [3 /*break*/, 2];
                    case "InvalidOrderException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#InvalidOrderException": return [3 /*break*/, 4];
                    case "InvalidSortByException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#InvalidSortByException": return [3 /*break*/, 6];
                }
                return [3 /*break*/, 8];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidContinuationTokenExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 9];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidOrderExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 9];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidSortByExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 9];
            case 8:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _g.label = 9;
            case 9:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1ListRepositoriesForApprovalRuleTemplateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1ListRepositoriesForApprovalRuleTemplateCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ListRepositoriesForApprovalRuleTemplateOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ListRepositoriesForApprovalRuleTemplateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, parsedBody, message;
    var _o;
    return __generator(this, function (_p) {
        switch (_p.label) {
            case 0:
                _a = [__assign({}, output)];
                _o = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_o.body = _p.sent(), _o)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ApprovalRuleTemplateDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#ApprovalRuleTemplateDoesNotExistException": return [3 /*break*/, 2];
                    case "ApprovalRuleTemplateNameRequiredException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#ApprovalRuleTemplateNameRequiredException": return [3 /*break*/, 4];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "InvalidApprovalRuleTemplateNameException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidApprovalRuleTemplateNameException": return [3 /*break*/, 16];
                    case "InvalidContinuationTokenException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidContinuationTokenException": return [3 /*break*/, 18];
                    case "InvalidMaxResultsException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#InvalidMaxResultsException": return [3 /*break*/, 20];
                }
                return [3 /*break*/, 22];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleTemplateDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleTemplateNameRequiredExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidApprovalRuleTemplateNameExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidContinuationTokenExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidMaxResultsExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_p.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 23];
            case 22:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _p.label = 23;
            case 23:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1ListTagsForResourceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1ListTagsForResourceCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ListTagsForResourceOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ListTagsForResourceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function (_h) {
        switch (_h.label) {
            case 0:
                _a = [__assign({}, output)];
                _g = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidRepositoryNameException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 2];
                    case "InvalidResourceArnException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#InvalidResourceArnException": return [3 /*break*/, 4];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 6];
                    case "ResourceArnRequiredException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#ResourceArnRequiredException": return [3 /*break*/, 8];
                }
                return [3 /*break*/, 10];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 11];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidResourceArnExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 11];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 11];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ResourceArnRequiredExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 11];
            case 10:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _h.label = 11;
            case 11:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1MergeBranchesByFastForwardCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1MergeBranchesByFastForwardCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1MergeBranchesByFastForwardOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1MergeBranchesByFastForwardCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, parsedBody, message;
    var _x;
    return __generator(this, function (_y) {
        switch (_y.label) {
            case 0:
                _a = [__assign({}, output)];
                _x = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_x.body = _y.sent(), _x)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BranchDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#BranchDoesNotExistException": return [3 /*break*/, 2];
                    case "BranchNameIsTagNameException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#BranchNameIsTagNameException": return [3 /*break*/, 4];
                    case "BranchNameRequiredException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#BranchNameRequiredException": return [3 /*break*/, 6];
                    case "CommitDoesNotExistException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#CommitDoesNotExistException": return [3 /*break*/, 8];
                    case "CommitRequiredException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#CommitRequiredException": return [3 /*break*/, 10];
                    case "ConcurrentReferenceUpdateException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#ConcurrentReferenceUpdateException": return [3 /*break*/, 12];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 14];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 16];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 18];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 20];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 22];
                    case "InvalidBranchNameException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#InvalidBranchNameException": return [3 /*break*/, 24];
                    case "InvalidCommitException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#InvalidCommitException": return [3 /*break*/, 26];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 28];
                    case "InvalidTargetBranchException": return [3 /*break*/, 30];
                    case "com.amazonaws.codecommit#InvalidTargetBranchException": return [3 /*break*/, 30];
                    case "ManualMergeRequiredException": return [3 /*break*/, 32];
                    case "com.amazonaws.codecommit#ManualMergeRequiredException": return [3 /*break*/, 32];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 34];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 34];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 36];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 36];
                    case "TipsDivergenceExceededException": return [3 /*break*/, 38];
                    case "com.amazonaws.codecommit#TipsDivergenceExceededException": return [3 /*break*/, 38];
                }
                return [3 /*break*/, 40];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BranchDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BranchNameIsTagNameExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BranchNameRequiredExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitDoesNotExistExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitRequiredExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ConcurrentReferenceUpdateExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidBranchNameExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommitExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 30:
                _s = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidTargetBranchExceptionResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 32:
                _t = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ManualMergeRequiredExceptionResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 34:
                _u = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 36:
                _v = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 37:
                response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 38:
                _w = [{}];
                return [4 /*yield*/, deserializeAws_json1_1TipsDivergenceExceededExceptionResponse(parsedOutput, context)];
            case 39:
                response = __assign.apply(void 0, [__assign.apply(void 0, _w.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 40:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _y.label = 41;
            case 41:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1MergeBranchesBySquashCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1MergeBranchesBySquashCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1MergeBranchesBySquashOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1MergeBranchesBySquashCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, parsedBody, message;
    var _17;
    return __generator(this, function (_18) {
        switch (_18.label) {
            case 0:
                _a = [__assign({}, output)];
                _17 = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_17.body = _18.sent(), _17)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BranchDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#BranchDoesNotExistException": return [3 /*break*/, 2];
                    case "BranchNameIsTagNameException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#BranchNameIsTagNameException": return [3 /*break*/, 4];
                    case "BranchNameRequiredException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#BranchNameRequiredException": return [3 /*break*/, 6];
                    case "CommitDoesNotExistException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#CommitDoesNotExistException": return [3 /*break*/, 8];
                    case "CommitMessageLengthExceededException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#CommitMessageLengthExceededException": return [3 /*break*/, 10];
                    case "CommitRequiredException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#CommitRequiredException": return [3 /*break*/, 12];
                    case "ConcurrentReferenceUpdateException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#ConcurrentReferenceUpdateException": return [3 /*break*/, 14];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 16];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 18];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 20];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 22];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 24];
                    case "FileContentSizeLimitExceededException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#FileContentSizeLimitExceededException": return [3 /*break*/, 26];
                    case "FileModeRequiredException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#FileModeRequiredException": return [3 /*break*/, 28];
                    case "FolderContentSizeLimitExceededException": return [3 /*break*/, 30];
                    case "com.amazonaws.codecommit#FolderContentSizeLimitExceededException": return [3 /*break*/, 30];
                    case "InvalidBranchNameException": return [3 /*break*/, 32];
                    case "com.amazonaws.codecommit#InvalidBranchNameException": return [3 /*break*/, 32];
                    case "InvalidCommitException": return [3 /*break*/, 34];
                    case "com.amazonaws.codecommit#InvalidCommitException": return [3 /*break*/, 34];
                    case "InvalidConflictDetailLevelException": return [3 /*break*/, 36];
                    case "com.amazonaws.codecommit#InvalidConflictDetailLevelException": return [3 /*break*/, 36];
                    case "InvalidConflictResolutionException": return [3 /*break*/, 38];
                    case "com.amazonaws.codecommit#InvalidConflictResolutionException": return [3 /*break*/, 38];
                    case "InvalidConflictResolutionStrategyException": return [3 /*break*/, 40];
                    case "com.amazonaws.codecommit#InvalidConflictResolutionStrategyException": return [3 /*break*/, 40];
                    case "InvalidEmailException": return [3 /*break*/, 42];
                    case "com.amazonaws.codecommit#InvalidEmailException": return [3 /*break*/, 42];
                    case "InvalidFileModeException": return [3 /*break*/, 44];
                    case "com.amazonaws.codecommit#InvalidFileModeException": return [3 /*break*/, 44];
                    case "InvalidPathException": return [3 /*break*/, 46];
                    case "com.amazonaws.codecommit#InvalidPathException": return [3 /*break*/, 46];
                    case "InvalidReplacementContentException": return [3 /*break*/, 48];
                    case "com.amazonaws.codecommit#InvalidReplacementContentException": return [3 /*break*/, 48];
                    case "InvalidReplacementTypeException": return [3 /*break*/, 50];
                    case "com.amazonaws.codecommit#InvalidReplacementTypeException": return [3 /*break*/, 50];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 52];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 52];
                    case "InvalidTargetBranchException": return [3 /*break*/, 54];
                    case "com.amazonaws.codecommit#InvalidTargetBranchException": return [3 /*break*/, 54];
                    case "ManualMergeRequiredException": return [3 /*break*/, 56];
                    case "com.amazonaws.codecommit#ManualMergeRequiredException": return [3 /*break*/, 56];
                    case "MaximumConflictResolutionEntriesExceededException": return [3 /*break*/, 58];
                    case "com.amazonaws.codecommit#MaximumConflictResolutionEntriesExceededException": return [3 /*break*/, 58];
                    case "MaximumFileContentToLoadExceededException": return [3 /*break*/, 60];
                    case "com.amazonaws.codecommit#MaximumFileContentToLoadExceededException": return [3 /*break*/, 60];
                    case "MaximumItemsToCompareExceededException": return [3 /*break*/, 62];
                    case "com.amazonaws.codecommit#MaximumItemsToCompareExceededException": return [3 /*break*/, 62];
                    case "MultipleConflictResolutionEntriesException": return [3 /*break*/, 64];
                    case "com.amazonaws.codecommit#MultipleConflictResolutionEntriesException": return [3 /*break*/, 64];
                    case "NameLengthExceededException": return [3 /*break*/, 66];
                    case "com.amazonaws.codecommit#NameLengthExceededException": return [3 /*break*/, 66];
                    case "PathRequiredException": return [3 /*break*/, 68];
                    case "com.amazonaws.codecommit#PathRequiredException": return [3 /*break*/, 68];
                    case "ReplacementContentRequiredException": return [3 /*break*/, 70];
                    case "com.amazonaws.codecommit#ReplacementContentRequiredException": return [3 /*break*/, 70];
                    case "ReplacementTypeRequiredException": return [3 /*break*/, 72];
                    case "com.amazonaws.codecommit#ReplacementTypeRequiredException": return [3 /*break*/, 72];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 74];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 74];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 76];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 76];
                    case "TipsDivergenceExceededException": return [3 /*break*/, 78];
                    case "com.amazonaws.codecommit#TipsDivergenceExceededException": return [3 /*break*/, 78];
                }
                return [3 /*break*/, 80];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BranchDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BranchNameIsTagNameExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BranchNameRequiredExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitDoesNotExistExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitMessageLengthExceededExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitRequiredExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ConcurrentReferenceUpdateExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FileContentSizeLimitExceededExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FileModeRequiredExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 30:
                _s = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FolderContentSizeLimitExceededExceptionResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 32:
                _t = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidBranchNameExceptionResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 34:
                _u = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommitExceptionResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 36:
                _v = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidConflictDetailLevelExceptionResponse(parsedOutput, context)];
            case 37:
                response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 38:
                _w = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidConflictResolutionExceptionResponse(parsedOutput, context)];
            case 39:
                response = __assign.apply(void 0, [__assign.apply(void 0, _w.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 40:
                _x = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidConflictResolutionStrategyExceptionResponse(parsedOutput, context)];
            case 41:
                response = __assign.apply(void 0, [__assign.apply(void 0, _x.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 42:
                _y = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidEmailExceptionResponse(parsedOutput, context)];
            case 43:
                response = __assign.apply(void 0, [__assign.apply(void 0, _y.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 44:
                _z = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidFileModeExceptionResponse(parsedOutput, context)];
            case 45:
                response = __assign.apply(void 0, [__assign.apply(void 0, _z.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 46:
                _0 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPathExceptionResponse(parsedOutput, context)];
            case 47:
                response = __assign.apply(void 0, [__assign.apply(void 0, _0.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 48:
                _1 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidReplacementContentExceptionResponse(parsedOutput, context)];
            case 49:
                response = __assign.apply(void 0, [__assign.apply(void 0, _1.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 50:
                _2 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidReplacementTypeExceptionResponse(parsedOutput, context)];
            case 51:
                response = __assign.apply(void 0, [__assign.apply(void 0, _2.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 52:
                _3 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 53:
                response = __assign.apply(void 0, [__assign.apply(void 0, _3.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 54:
                _4 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidTargetBranchExceptionResponse(parsedOutput, context)];
            case 55:
                response = __assign.apply(void 0, [__assign.apply(void 0, _4.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 56:
                _5 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ManualMergeRequiredExceptionResponse(parsedOutput, context)];
            case 57:
                response = __assign.apply(void 0, [__assign.apply(void 0, _5.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 58:
                _6 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumConflictResolutionEntriesExceededExceptionResponse(parsedOutput, context)];
            case 59:
                response = __assign.apply(void 0, [__assign.apply(void 0, _6.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 60:
                _7 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumFileContentToLoadExceededExceptionResponse(parsedOutput, context)];
            case 61:
                response = __assign.apply(void 0, [__assign.apply(void 0, _7.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 62:
                _8 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumItemsToCompareExceededExceptionResponse(parsedOutput, context)];
            case 63:
                response = __assign.apply(void 0, [__assign.apply(void 0, _8.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 64:
                _9 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MultipleConflictResolutionEntriesExceptionResponse(parsedOutput, context)];
            case 65:
                response = __assign.apply(void 0, [__assign.apply(void 0, _9.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 66:
                _10 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1NameLengthExceededExceptionResponse(parsedOutput, context)];
            case 67:
                response = __assign.apply(void 0, [__assign.apply(void 0, _10.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 68:
                _11 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PathRequiredExceptionResponse(parsedOutput, context)];
            case 69:
                response = __assign.apply(void 0, [__assign.apply(void 0, _11.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 70:
                _12 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ReplacementContentRequiredExceptionResponse(parsedOutput, context)];
            case 71:
                response = __assign.apply(void 0, [__assign.apply(void 0, _12.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 72:
                _13 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ReplacementTypeRequiredExceptionResponse(parsedOutput, context)];
            case 73:
                response = __assign.apply(void 0, [__assign.apply(void 0, _13.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 74:
                _14 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 75:
                response = __assign.apply(void 0, [__assign.apply(void 0, _14.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 76:
                _15 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 77:
                response = __assign.apply(void 0, [__assign.apply(void 0, _15.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 78:
                _16 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1TipsDivergenceExceededExceptionResponse(parsedOutput, context)];
            case 79:
                response = __assign.apply(void 0, [__assign.apply(void 0, _16.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 80:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _18.label = 81;
            case 81:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1MergeBranchesByThreeWayCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1MergeBranchesByThreeWayCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1MergeBranchesByThreeWayOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1MergeBranchesByThreeWayCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, parsedBody, message;
    var _17;
    return __generator(this, function (_18) {
        switch (_18.label) {
            case 0:
                _a = [__assign({}, output)];
                _17 = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_17.body = _18.sent(), _17)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BranchDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#BranchDoesNotExistException": return [3 /*break*/, 2];
                    case "BranchNameIsTagNameException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#BranchNameIsTagNameException": return [3 /*break*/, 4];
                    case "BranchNameRequiredException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#BranchNameRequiredException": return [3 /*break*/, 6];
                    case "CommitDoesNotExistException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#CommitDoesNotExistException": return [3 /*break*/, 8];
                    case "CommitMessageLengthExceededException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#CommitMessageLengthExceededException": return [3 /*break*/, 10];
                    case "CommitRequiredException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#CommitRequiredException": return [3 /*break*/, 12];
                    case "ConcurrentReferenceUpdateException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#ConcurrentReferenceUpdateException": return [3 /*break*/, 14];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 16];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 18];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 20];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 22];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 24];
                    case "FileContentSizeLimitExceededException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#FileContentSizeLimitExceededException": return [3 /*break*/, 26];
                    case "FileModeRequiredException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#FileModeRequiredException": return [3 /*break*/, 28];
                    case "FolderContentSizeLimitExceededException": return [3 /*break*/, 30];
                    case "com.amazonaws.codecommit#FolderContentSizeLimitExceededException": return [3 /*break*/, 30];
                    case "InvalidBranchNameException": return [3 /*break*/, 32];
                    case "com.amazonaws.codecommit#InvalidBranchNameException": return [3 /*break*/, 32];
                    case "InvalidCommitException": return [3 /*break*/, 34];
                    case "com.amazonaws.codecommit#InvalidCommitException": return [3 /*break*/, 34];
                    case "InvalidConflictDetailLevelException": return [3 /*break*/, 36];
                    case "com.amazonaws.codecommit#InvalidConflictDetailLevelException": return [3 /*break*/, 36];
                    case "InvalidConflictResolutionException": return [3 /*break*/, 38];
                    case "com.amazonaws.codecommit#InvalidConflictResolutionException": return [3 /*break*/, 38];
                    case "InvalidConflictResolutionStrategyException": return [3 /*break*/, 40];
                    case "com.amazonaws.codecommit#InvalidConflictResolutionStrategyException": return [3 /*break*/, 40];
                    case "InvalidEmailException": return [3 /*break*/, 42];
                    case "com.amazonaws.codecommit#InvalidEmailException": return [3 /*break*/, 42];
                    case "InvalidFileModeException": return [3 /*break*/, 44];
                    case "com.amazonaws.codecommit#InvalidFileModeException": return [3 /*break*/, 44];
                    case "InvalidPathException": return [3 /*break*/, 46];
                    case "com.amazonaws.codecommit#InvalidPathException": return [3 /*break*/, 46];
                    case "InvalidReplacementContentException": return [3 /*break*/, 48];
                    case "com.amazonaws.codecommit#InvalidReplacementContentException": return [3 /*break*/, 48];
                    case "InvalidReplacementTypeException": return [3 /*break*/, 50];
                    case "com.amazonaws.codecommit#InvalidReplacementTypeException": return [3 /*break*/, 50];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 52];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 52];
                    case "InvalidTargetBranchException": return [3 /*break*/, 54];
                    case "com.amazonaws.codecommit#InvalidTargetBranchException": return [3 /*break*/, 54];
                    case "ManualMergeRequiredException": return [3 /*break*/, 56];
                    case "com.amazonaws.codecommit#ManualMergeRequiredException": return [3 /*break*/, 56];
                    case "MaximumConflictResolutionEntriesExceededException": return [3 /*break*/, 58];
                    case "com.amazonaws.codecommit#MaximumConflictResolutionEntriesExceededException": return [3 /*break*/, 58];
                    case "MaximumFileContentToLoadExceededException": return [3 /*break*/, 60];
                    case "com.amazonaws.codecommit#MaximumFileContentToLoadExceededException": return [3 /*break*/, 60];
                    case "MaximumItemsToCompareExceededException": return [3 /*break*/, 62];
                    case "com.amazonaws.codecommit#MaximumItemsToCompareExceededException": return [3 /*break*/, 62];
                    case "MultipleConflictResolutionEntriesException": return [3 /*break*/, 64];
                    case "com.amazonaws.codecommit#MultipleConflictResolutionEntriesException": return [3 /*break*/, 64];
                    case "NameLengthExceededException": return [3 /*break*/, 66];
                    case "com.amazonaws.codecommit#NameLengthExceededException": return [3 /*break*/, 66];
                    case "PathRequiredException": return [3 /*break*/, 68];
                    case "com.amazonaws.codecommit#PathRequiredException": return [3 /*break*/, 68];
                    case "ReplacementContentRequiredException": return [3 /*break*/, 70];
                    case "com.amazonaws.codecommit#ReplacementContentRequiredException": return [3 /*break*/, 70];
                    case "ReplacementTypeRequiredException": return [3 /*break*/, 72];
                    case "com.amazonaws.codecommit#ReplacementTypeRequiredException": return [3 /*break*/, 72];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 74];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 74];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 76];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 76];
                    case "TipsDivergenceExceededException": return [3 /*break*/, 78];
                    case "com.amazonaws.codecommit#TipsDivergenceExceededException": return [3 /*break*/, 78];
                }
                return [3 /*break*/, 80];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BranchDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BranchNameIsTagNameExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BranchNameRequiredExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitDoesNotExistExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitMessageLengthExceededExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitRequiredExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ConcurrentReferenceUpdateExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FileContentSizeLimitExceededExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FileModeRequiredExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 30:
                _s = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FolderContentSizeLimitExceededExceptionResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 32:
                _t = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidBranchNameExceptionResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 34:
                _u = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommitExceptionResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 36:
                _v = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidConflictDetailLevelExceptionResponse(parsedOutput, context)];
            case 37:
                response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 38:
                _w = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidConflictResolutionExceptionResponse(parsedOutput, context)];
            case 39:
                response = __assign.apply(void 0, [__assign.apply(void 0, _w.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 40:
                _x = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidConflictResolutionStrategyExceptionResponse(parsedOutput, context)];
            case 41:
                response = __assign.apply(void 0, [__assign.apply(void 0, _x.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 42:
                _y = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidEmailExceptionResponse(parsedOutput, context)];
            case 43:
                response = __assign.apply(void 0, [__assign.apply(void 0, _y.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 44:
                _z = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidFileModeExceptionResponse(parsedOutput, context)];
            case 45:
                response = __assign.apply(void 0, [__assign.apply(void 0, _z.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 46:
                _0 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPathExceptionResponse(parsedOutput, context)];
            case 47:
                response = __assign.apply(void 0, [__assign.apply(void 0, _0.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 48:
                _1 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidReplacementContentExceptionResponse(parsedOutput, context)];
            case 49:
                response = __assign.apply(void 0, [__assign.apply(void 0, _1.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 50:
                _2 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidReplacementTypeExceptionResponse(parsedOutput, context)];
            case 51:
                response = __assign.apply(void 0, [__assign.apply(void 0, _2.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 52:
                _3 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 53:
                response = __assign.apply(void 0, [__assign.apply(void 0, _3.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 54:
                _4 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidTargetBranchExceptionResponse(parsedOutput, context)];
            case 55:
                response = __assign.apply(void 0, [__assign.apply(void 0, _4.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 56:
                _5 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ManualMergeRequiredExceptionResponse(parsedOutput, context)];
            case 57:
                response = __assign.apply(void 0, [__assign.apply(void 0, _5.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 58:
                _6 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumConflictResolutionEntriesExceededExceptionResponse(parsedOutput, context)];
            case 59:
                response = __assign.apply(void 0, [__assign.apply(void 0, _6.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 60:
                _7 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumFileContentToLoadExceededExceptionResponse(parsedOutput, context)];
            case 61:
                response = __assign.apply(void 0, [__assign.apply(void 0, _7.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 62:
                _8 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumItemsToCompareExceededExceptionResponse(parsedOutput, context)];
            case 63:
                response = __assign.apply(void 0, [__assign.apply(void 0, _8.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 64:
                _9 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MultipleConflictResolutionEntriesExceptionResponse(parsedOutput, context)];
            case 65:
                response = __assign.apply(void 0, [__assign.apply(void 0, _9.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 66:
                _10 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1NameLengthExceededExceptionResponse(parsedOutput, context)];
            case 67:
                response = __assign.apply(void 0, [__assign.apply(void 0, _10.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 68:
                _11 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PathRequiredExceptionResponse(parsedOutput, context)];
            case 69:
                response = __assign.apply(void 0, [__assign.apply(void 0, _11.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 70:
                _12 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ReplacementContentRequiredExceptionResponse(parsedOutput, context)];
            case 71:
                response = __assign.apply(void 0, [__assign.apply(void 0, _12.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 72:
                _13 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ReplacementTypeRequiredExceptionResponse(parsedOutput, context)];
            case 73:
                response = __assign.apply(void 0, [__assign.apply(void 0, _13.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 74:
                _14 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 75:
                response = __assign.apply(void 0, [__assign.apply(void 0, _14.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 76:
                _15 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 77:
                response = __assign.apply(void 0, [__assign.apply(void 0, _15.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 78:
                _16 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1TipsDivergenceExceededExceptionResponse(parsedOutput, context)];
            case 79:
                response = __assign.apply(void 0, [__assign.apply(void 0, _16.concat([(_18.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 81];
            case 80:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _18.label = 81;
            case 81:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1MergePullRequestByFastForwardCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1MergePullRequestByFastForwardCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1MergePullRequestByFastForwardOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1MergePullRequestByFastForwardCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, parsedBody, message;
    var _x;
    return __generator(this, function (_y) {
        switch (_y.label) {
            case 0:
                _a = [__assign({}, output)];
                _x = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_x.body = _y.sent(), _x)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ConcurrentReferenceUpdateException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#ConcurrentReferenceUpdateException": return [3 /*break*/, 2];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 4];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 6];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 8];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 10];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 12];
                    case "InvalidCommitIdException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#InvalidCommitIdException": return [3 /*break*/, 14];
                    case "InvalidPullRequestIdException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidPullRequestIdException": return [3 /*break*/, 16];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 18];
                    case "ManualMergeRequiredException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#ManualMergeRequiredException": return [3 /*break*/, 20];
                    case "PullRequestAlreadyClosedException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#PullRequestAlreadyClosedException": return [3 /*break*/, 22];
                    case "PullRequestApprovalRulesNotSatisfiedException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#PullRequestApprovalRulesNotSatisfiedException": return [3 /*break*/, 24];
                    case "PullRequestDoesNotExistException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#PullRequestDoesNotExistException": return [3 /*break*/, 26];
                    case "PullRequestIdRequiredException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#PullRequestIdRequiredException": return [3 /*break*/, 28];
                    case "ReferenceDoesNotExistException": return [3 /*break*/, 30];
                    case "com.amazonaws.codecommit#ReferenceDoesNotExistException": return [3 /*break*/, 30];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 32];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 32];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 34];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 34];
                    case "RepositoryNotAssociatedWithPullRequestException": return [3 /*break*/, 36];
                    case "com.amazonaws.codecommit#RepositoryNotAssociatedWithPullRequestException": return [3 /*break*/, 36];
                    case "TipOfSourceReferenceIsDifferentException": return [3 /*break*/, 38];
                    case "com.amazonaws.codecommit#TipOfSourceReferenceIsDifferentException": return [3 /*break*/, 38];
                }
                return [3 /*break*/, 40];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ConcurrentReferenceUpdateExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommitIdExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPullRequestIdExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ManualMergeRequiredExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestAlreadyClosedExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestApprovalRulesNotSatisfiedExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestDoesNotExistExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestIdRequiredExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 30:
                _s = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ReferenceDoesNotExistExceptionResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 32:
                _t = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 34:
                _u = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 36:
                _v = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNotAssociatedWithPullRequestExceptionResponse(parsedOutput, context)];
            case 37:
                response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 38:
                _w = [{}];
                return [4 /*yield*/, deserializeAws_json1_1TipOfSourceReferenceIsDifferentExceptionResponse(parsedOutput, context)];
            case 39:
                response = __assign.apply(void 0, [__assign.apply(void 0, _w.concat([(_y.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 41];
            case 40:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _y.label = 41;
            case 41:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1MergePullRequestBySquashCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1MergePullRequestBySquashCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1MergePullRequestBySquashOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1MergePullRequestBySquashCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, parsedBody, message;
    var _16;
    return __generator(this, function (_17) {
        switch (_17.label) {
            case 0:
                _a = [__assign({}, output)];
                _16 = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_16.body = _17.sent(), _16)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CommitMessageLengthExceededException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#CommitMessageLengthExceededException": return [3 /*break*/, 2];
                    case "ConcurrentReferenceUpdateException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#ConcurrentReferenceUpdateException": return [3 /*break*/, 4];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "FileContentSizeLimitExceededException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#FileContentSizeLimitExceededException": return [3 /*break*/, 16];
                    case "FolderContentSizeLimitExceededException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#FolderContentSizeLimitExceededException": return [3 /*break*/, 18];
                    case "InvalidCommitIdException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#InvalidCommitIdException": return [3 /*break*/, 20];
                    case "InvalidConflictDetailLevelException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#InvalidConflictDetailLevelException": return [3 /*break*/, 22];
                    case "InvalidConflictResolutionException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#InvalidConflictResolutionException": return [3 /*break*/, 24];
                    case "InvalidConflictResolutionStrategyException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#InvalidConflictResolutionStrategyException": return [3 /*break*/, 26];
                    case "InvalidEmailException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#InvalidEmailException": return [3 /*break*/, 28];
                    case "InvalidFileModeException": return [3 /*break*/, 30];
                    case "com.amazonaws.codecommit#InvalidFileModeException": return [3 /*break*/, 30];
                    case "InvalidPathException": return [3 /*break*/, 32];
                    case "com.amazonaws.codecommit#InvalidPathException": return [3 /*break*/, 32];
                    case "InvalidPullRequestIdException": return [3 /*break*/, 34];
                    case "com.amazonaws.codecommit#InvalidPullRequestIdException": return [3 /*break*/, 34];
                    case "InvalidReplacementContentException": return [3 /*break*/, 36];
                    case "com.amazonaws.codecommit#InvalidReplacementContentException": return [3 /*break*/, 36];
                    case "InvalidReplacementTypeException": return [3 /*break*/, 38];
                    case "com.amazonaws.codecommit#InvalidReplacementTypeException": return [3 /*break*/, 38];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 40];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 40];
                    case "ManualMergeRequiredException": return [3 /*break*/, 42];
                    case "com.amazonaws.codecommit#ManualMergeRequiredException": return [3 /*break*/, 42];
                    case "MaximumConflictResolutionEntriesExceededException": return [3 /*break*/, 44];
                    case "com.amazonaws.codecommit#MaximumConflictResolutionEntriesExceededException": return [3 /*break*/, 44];
                    case "MaximumFileContentToLoadExceededException": return [3 /*break*/, 46];
                    case "com.amazonaws.codecommit#MaximumFileContentToLoadExceededException": return [3 /*break*/, 46];
                    case "MaximumItemsToCompareExceededException": return [3 /*break*/, 48];
                    case "com.amazonaws.codecommit#MaximumItemsToCompareExceededException": return [3 /*break*/, 48];
                    case "MultipleConflictResolutionEntriesException": return [3 /*break*/, 50];
                    case "com.amazonaws.codecommit#MultipleConflictResolutionEntriesException": return [3 /*break*/, 50];
                    case "NameLengthExceededException": return [3 /*break*/, 52];
                    case "com.amazonaws.codecommit#NameLengthExceededException": return [3 /*break*/, 52];
                    case "PathRequiredException": return [3 /*break*/, 54];
                    case "com.amazonaws.codecommit#PathRequiredException": return [3 /*break*/, 54];
                    case "PullRequestAlreadyClosedException": return [3 /*break*/, 56];
                    case "com.amazonaws.codecommit#PullRequestAlreadyClosedException": return [3 /*break*/, 56];
                    case "PullRequestApprovalRulesNotSatisfiedException": return [3 /*break*/, 58];
                    case "com.amazonaws.codecommit#PullRequestApprovalRulesNotSatisfiedException": return [3 /*break*/, 58];
                    case "PullRequestDoesNotExistException": return [3 /*break*/, 60];
                    case "com.amazonaws.codecommit#PullRequestDoesNotExistException": return [3 /*break*/, 60];
                    case "PullRequestIdRequiredException": return [3 /*break*/, 62];
                    case "com.amazonaws.codecommit#PullRequestIdRequiredException": return [3 /*break*/, 62];
                    case "ReplacementContentRequiredException": return [3 /*break*/, 64];
                    case "com.amazonaws.codecommit#ReplacementContentRequiredException": return [3 /*break*/, 64];
                    case "ReplacementTypeRequiredException": return [3 /*break*/, 66];
                    case "com.amazonaws.codecommit#ReplacementTypeRequiredException": return [3 /*break*/, 66];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 68];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 68];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 70];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 70];
                    case "RepositoryNotAssociatedWithPullRequestException": return [3 /*break*/, 72];
                    case "com.amazonaws.codecommit#RepositoryNotAssociatedWithPullRequestException": return [3 /*break*/, 72];
                    case "TipOfSourceReferenceIsDifferentException": return [3 /*break*/, 74];
                    case "com.amazonaws.codecommit#TipOfSourceReferenceIsDifferentException": return [3 /*break*/, 74];
                    case "TipsDivergenceExceededException": return [3 /*break*/, 76];
                    case "com.amazonaws.codecommit#TipsDivergenceExceededException": return [3 /*break*/, 76];
                }
                return [3 /*break*/, 78];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitMessageLengthExceededExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ConcurrentReferenceUpdateExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FileContentSizeLimitExceededExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FolderContentSizeLimitExceededExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommitIdExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidConflictDetailLevelExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidConflictResolutionExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidConflictResolutionStrategyExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidEmailExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 30:
                _s = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidFileModeExceptionResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 32:
                _t = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPathExceptionResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 34:
                _u = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPullRequestIdExceptionResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 36:
                _v = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidReplacementContentExceptionResponse(parsedOutput, context)];
            case 37:
                response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 38:
                _w = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidReplacementTypeExceptionResponse(parsedOutput, context)];
            case 39:
                response = __assign.apply(void 0, [__assign.apply(void 0, _w.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 40:
                _x = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 41:
                response = __assign.apply(void 0, [__assign.apply(void 0, _x.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 42:
                _y = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ManualMergeRequiredExceptionResponse(parsedOutput, context)];
            case 43:
                response = __assign.apply(void 0, [__assign.apply(void 0, _y.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 44:
                _z = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumConflictResolutionEntriesExceededExceptionResponse(parsedOutput, context)];
            case 45:
                response = __assign.apply(void 0, [__assign.apply(void 0, _z.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 46:
                _0 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumFileContentToLoadExceededExceptionResponse(parsedOutput, context)];
            case 47:
                response = __assign.apply(void 0, [__assign.apply(void 0, _0.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 48:
                _1 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumItemsToCompareExceededExceptionResponse(parsedOutput, context)];
            case 49:
                response = __assign.apply(void 0, [__assign.apply(void 0, _1.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 50:
                _2 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MultipleConflictResolutionEntriesExceptionResponse(parsedOutput, context)];
            case 51:
                response = __assign.apply(void 0, [__assign.apply(void 0, _2.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 52:
                _3 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1NameLengthExceededExceptionResponse(parsedOutput, context)];
            case 53:
                response = __assign.apply(void 0, [__assign.apply(void 0, _3.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 54:
                _4 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PathRequiredExceptionResponse(parsedOutput, context)];
            case 55:
                response = __assign.apply(void 0, [__assign.apply(void 0, _4.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 56:
                _5 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestAlreadyClosedExceptionResponse(parsedOutput, context)];
            case 57:
                response = __assign.apply(void 0, [__assign.apply(void 0, _5.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 58:
                _6 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestApprovalRulesNotSatisfiedExceptionResponse(parsedOutput, context)];
            case 59:
                response = __assign.apply(void 0, [__assign.apply(void 0, _6.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 60:
                _7 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestDoesNotExistExceptionResponse(parsedOutput, context)];
            case 61:
                response = __assign.apply(void 0, [__assign.apply(void 0, _7.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 62:
                _8 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestIdRequiredExceptionResponse(parsedOutput, context)];
            case 63:
                response = __assign.apply(void 0, [__assign.apply(void 0, _8.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 64:
                _9 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ReplacementContentRequiredExceptionResponse(parsedOutput, context)];
            case 65:
                response = __assign.apply(void 0, [__assign.apply(void 0, _9.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 66:
                _10 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ReplacementTypeRequiredExceptionResponse(parsedOutput, context)];
            case 67:
                response = __assign.apply(void 0, [__assign.apply(void 0, _10.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 68:
                _11 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 69:
                response = __assign.apply(void 0, [__assign.apply(void 0, _11.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 70:
                _12 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 71:
                response = __assign.apply(void 0, [__assign.apply(void 0, _12.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 72:
                _13 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNotAssociatedWithPullRequestExceptionResponse(parsedOutput, context)];
            case 73:
                response = __assign.apply(void 0, [__assign.apply(void 0, _13.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 74:
                _14 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1TipOfSourceReferenceIsDifferentExceptionResponse(parsedOutput, context)];
            case 75:
                response = __assign.apply(void 0, [__assign.apply(void 0, _14.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 76:
                _15 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1TipsDivergenceExceededExceptionResponse(parsedOutput, context)];
            case 77:
                response = __assign.apply(void 0, [__assign.apply(void 0, _15.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 78:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _17.label = 79;
            case 79:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1MergePullRequestByThreeWayCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1MergePullRequestByThreeWayCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1MergePullRequestByThreeWayOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1MergePullRequestByThreeWayCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, parsedBody, message;
    var _16;
    return __generator(this, function (_17) {
        switch (_17.label) {
            case 0:
                _a = [__assign({}, output)];
                _16 = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_16.body = _17.sent(), _16)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CommitMessageLengthExceededException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#CommitMessageLengthExceededException": return [3 /*break*/, 2];
                    case "ConcurrentReferenceUpdateException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#ConcurrentReferenceUpdateException": return [3 /*break*/, 4];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "FileContentSizeLimitExceededException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#FileContentSizeLimitExceededException": return [3 /*break*/, 16];
                    case "FolderContentSizeLimitExceededException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#FolderContentSizeLimitExceededException": return [3 /*break*/, 18];
                    case "InvalidCommitIdException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#InvalidCommitIdException": return [3 /*break*/, 20];
                    case "InvalidConflictDetailLevelException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#InvalidConflictDetailLevelException": return [3 /*break*/, 22];
                    case "InvalidConflictResolutionException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#InvalidConflictResolutionException": return [3 /*break*/, 24];
                    case "InvalidConflictResolutionStrategyException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#InvalidConflictResolutionStrategyException": return [3 /*break*/, 26];
                    case "InvalidEmailException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#InvalidEmailException": return [3 /*break*/, 28];
                    case "InvalidFileModeException": return [3 /*break*/, 30];
                    case "com.amazonaws.codecommit#InvalidFileModeException": return [3 /*break*/, 30];
                    case "InvalidPathException": return [3 /*break*/, 32];
                    case "com.amazonaws.codecommit#InvalidPathException": return [3 /*break*/, 32];
                    case "InvalidPullRequestIdException": return [3 /*break*/, 34];
                    case "com.amazonaws.codecommit#InvalidPullRequestIdException": return [3 /*break*/, 34];
                    case "InvalidReplacementContentException": return [3 /*break*/, 36];
                    case "com.amazonaws.codecommit#InvalidReplacementContentException": return [3 /*break*/, 36];
                    case "InvalidReplacementTypeException": return [3 /*break*/, 38];
                    case "com.amazonaws.codecommit#InvalidReplacementTypeException": return [3 /*break*/, 38];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 40];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 40];
                    case "ManualMergeRequiredException": return [3 /*break*/, 42];
                    case "com.amazonaws.codecommit#ManualMergeRequiredException": return [3 /*break*/, 42];
                    case "MaximumConflictResolutionEntriesExceededException": return [3 /*break*/, 44];
                    case "com.amazonaws.codecommit#MaximumConflictResolutionEntriesExceededException": return [3 /*break*/, 44];
                    case "MaximumFileContentToLoadExceededException": return [3 /*break*/, 46];
                    case "com.amazonaws.codecommit#MaximumFileContentToLoadExceededException": return [3 /*break*/, 46];
                    case "MaximumItemsToCompareExceededException": return [3 /*break*/, 48];
                    case "com.amazonaws.codecommit#MaximumItemsToCompareExceededException": return [3 /*break*/, 48];
                    case "MultipleConflictResolutionEntriesException": return [3 /*break*/, 50];
                    case "com.amazonaws.codecommit#MultipleConflictResolutionEntriesException": return [3 /*break*/, 50];
                    case "NameLengthExceededException": return [3 /*break*/, 52];
                    case "com.amazonaws.codecommit#NameLengthExceededException": return [3 /*break*/, 52];
                    case "PathRequiredException": return [3 /*break*/, 54];
                    case "com.amazonaws.codecommit#PathRequiredException": return [3 /*break*/, 54];
                    case "PullRequestAlreadyClosedException": return [3 /*break*/, 56];
                    case "com.amazonaws.codecommit#PullRequestAlreadyClosedException": return [3 /*break*/, 56];
                    case "PullRequestApprovalRulesNotSatisfiedException": return [3 /*break*/, 58];
                    case "com.amazonaws.codecommit#PullRequestApprovalRulesNotSatisfiedException": return [3 /*break*/, 58];
                    case "PullRequestDoesNotExistException": return [3 /*break*/, 60];
                    case "com.amazonaws.codecommit#PullRequestDoesNotExistException": return [3 /*break*/, 60];
                    case "PullRequestIdRequiredException": return [3 /*break*/, 62];
                    case "com.amazonaws.codecommit#PullRequestIdRequiredException": return [3 /*break*/, 62];
                    case "ReplacementContentRequiredException": return [3 /*break*/, 64];
                    case "com.amazonaws.codecommit#ReplacementContentRequiredException": return [3 /*break*/, 64];
                    case "ReplacementTypeRequiredException": return [3 /*break*/, 66];
                    case "com.amazonaws.codecommit#ReplacementTypeRequiredException": return [3 /*break*/, 66];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 68];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 68];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 70];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 70];
                    case "RepositoryNotAssociatedWithPullRequestException": return [3 /*break*/, 72];
                    case "com.amazonaws.codecommit#RepositoryNotAssociatedWithPullRequestException": return [3 /*break*/, 72];
                    case "TipOfSourceReferenceIsDifferentException": return [3 /*break*/, 74];
                    case "com.amazonaws.codecommit#TipOfSourceReferenceIsDifferentException": return [3 /*break*/, 74];
                    case "TipsDivergenceExceededException": return [3 /*break*/, 76];
                    case "com.amazonaws.codecommit#TipsDivergenceExceededException": return [3 /*break*/, 76];
                }
                return [3 /*break*/, 78];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitMessageLengthExceededExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ConcurrentReferenceUpdateExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FileContentSizeLimitExceededExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FolderContentSizeLimitExceededExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommitIdExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidConflictDetailLevelExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidConflictResolutionExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidConflictResolutionStrategyExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidEmailExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 30:
                _s = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidFileModeExceptionResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 32:
                _t = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPathExceptionResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 34:
                _u = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPullRequestIdExceptionResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 36:
                _v = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidReplacementContentExceptionResponse(parsedOutput, context)];
            case 37:
                response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 38:
                _w = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidReplacementTypeExceptionResponse(parsedOutput, context)];
            case 39:
                response = __assign.apply(void 0, [__assign.apply(void 0, _w.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 40:
                _x = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 41:
                response = __assign.apply(void 0, [__assign.apply(void 0, _x.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 42:
                _y = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ManualMergeRequiredExceptionResponse(parsedOutput, context)];
            case 43:
                response = __assign.apply(void 0, [__assign.apply(void 0, _y.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 44:
                _z = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumConflictResolutionEntriesExceededExceptionResponse(parsedOutput, context)];
            case 45:
                response = __assign.apply(void 0, [__assign.apply(void 0, _z.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 46:
                _0 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumFileContentToLoadExceededExceptionResponse(parsedOutput, context)];
            case 47:
                response = __assign.apply(void 0, [__assign.apply(void 0, _0.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 48:
                _1 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumItemsToCompareExceededExceptionResponse(parsedOutput, context)];
            case 49:
                response = __assign.apply(void 0, [__assign.apply(void 0, _1.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 50:
                _2 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MultipleConflictResolutionEntriesExceptionResponse(parsedOutput, context)];
            case 51:
                response = __assign.apply(void 0, [__assign.apply(void 0, _2.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 52:
                _3 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1NameLengthExceededExceptionResponse(parsedOutput, context)];
            case 53:
                response = __assign.apply(void 0, [__assign.apply(void 0, _3.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 54:
                _4 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PathRequiredExceptionResponse(parsedOutput, context)];
            case 55:
                response = __assign.apply(void 0, [__assign.apply(void 0, _4.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 56:
                _5 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestAlreadyClosedExceptionResponse(parsedOutput, context)];
            case 57:
                response = __assign.apply(void 0, [__assign.apply(void 0, _5.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 58:
                _6 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestApprovalRulesNotSatisfiedExceptionResponse(parsedOutput, context)];
            case 59:
                response = __assign.apply(void 0, [__assign.apply(void 0, _6.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 60:
                _7 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestDoesNotExistExceptionResponse(parsedOutput, context)];
            case 61:
                response = __assign.apply(void 0, [__assign.apply(void 0, _7.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 62:
                _8 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestIdRequiredExceptionResponse(parsedOutput, context)];
            case 63:
                response = __assign.apply(void 0, [__assign.apply(void 0, _8.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 64:
                _9 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ReplacementContentRequiredExceptionResponse(parsedOutput, context)];
            case 65:
                response = __assign.apply(void 0, [__assign.apply(void 0, _9.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 66:
                _10 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ReplacementTypeRequiredExceptionResponse(parsedOutput, context)];
            case 67:
                response = __assign.apply(void 0, [__assign.apply(void 0, _10.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 68:
                _11 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 69:
                response = __assign.apply(void 0, [__assign.apply(void 0, _11.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 70:
                _12 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 71:
                response = __assign.apply(void 0, [__assign.apply(void 0, _12.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 72:
                _13 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNotAssociatedWithPullRequestExceptionResponse(parsedOutput, context)];
            case 73:
                response = __assign.apply(void 0, [__assign.apply(void 0, _13.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 74:
                _14 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1TipOfSourceReferenceIsDifferentExceptionResponse(parsedOutput, context)];
            case 75:
                response = __assign.apply(void 0, [__assign.apply(void 0, _14.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 76:
                _15 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1TipsDivergenceExceededExceptionResponse(parsedOutput, context)];
            case 77:
                response = __assign.apply(void 0, [__assign.apply(void 0, _15.concat([(_17.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 79];
            case 78:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _17.label = 79;
            case 79:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1OverridePullRequestApprovalRulesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1OverridePullRequestApprovalRulesCommandError(output, context)];
                }
                return [4 /*yield*/, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1OverridePullRequestApprovalRulesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, parsedBody, message;
    var _t;
    return __generator(this, function (_u) {
        switch (_u.label) {
            case 0:
                _a = [__assign({}, output)];
                _t = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_t.body = _u.sent(), _t)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "InvalidOverrideStatusException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#InvalidOverrideStatusException": return [3 /*break*/, 12];
                    case "InvalidPullRequestIdException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#InvalidPullRequestIdException": return [3 /*break*/, 14];
                    case "InvalidRevisionIdException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidRevisionIdException": return [3 /*break*/, 16];
                    case "OverrideAlreadySetException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#OverrideAlreadySetException": return [3 /*break*/, 18];
                    case "OverrideStatusRequiredException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#OverrideStatusRequiredException": return [3 /*break*/, 20];
                    case "PullRequestAlreadyClosedException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#PullRequestAlreadyClosedException": return [3 /*break*/, 22];
                    case "PullRequestDoesNotExistException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#PullRequestDoesNotExistException": return [3 /*break*/, 24];
                    case "PullRequestIdRequiredException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#PullRequestIdRequiredException": return [3 /*break*/, 26];
                    case "RevisionIdRequiredException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#RevisionIdRequiredException": return [3 /*break*/, 28];
                    case "RevisionNotCurrentException": return [3 /*break*/, 30];
                    case "com.amazonaws.codecommit#RevisionNotCurrentException": return [3 /*break*/, 30];
                }
                return [3 /*break*/, 32];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidOverrideStatusExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPullRequestIdExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRevisionIdExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1OverrideAlreadySetExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1OverrideStatusRequiredExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestAlreadyClosedExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestDoesNotExistExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestIdRequiredExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RevisionIdRequiredExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 30:
                _s = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RevisionNotCurrentExceptionResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_u.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 33];
            case 32:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _u.label = 33;
            case 33:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1PostCommentForComparedCommitCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1PostCommentForComparedCommitCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1PostCommentForComparedCommitOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1PostCommentForComparedCommitCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, parsedBody, message;
    var _1;
    return __generator(this, function (_2) {
        switch (_2.label) {
            case 0:
                _a = [__assign({}, output)];
                _1 = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_1.body = _2.sent(), _1)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BeforeCommitIdAndAfterCommitIdAreSameException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#BeforeCommitIdAndAfterCommitIdAreSameException": return [3 /*break*/, 2];
                    case "ClientRequestTokenRequiredException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#ClientRequestTokenRequiredException": return [3 /*break*/, 4];
                    case "CommentContentRequiredException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#CommentContentRequiredException": return [3 /*break*/, 6];
                    case "CommentContentSizeLimitExceededException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#CommentContentSizeLimitExceededException": return [3 /*break*/, 8];
                    case "CommitDoesNotExistException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#CommitDoesNotExistException": return [3 /*break*/, 10];
                    case "CommitIdRequiredException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#CommitIdRequiredException": return [3 /*break*/, 12];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 14];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 16];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 18];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 20];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 22];
                    case "IdempotencyParameterMismatchException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#IdempotencyParameterMismatchException": return [3 /*break*/, 24];
                    case "InvalidClientRequestTokenException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#InvalidClientRequestTokenException": return [3 /*break*/, 26];
                    case "InvalidCommitIdException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#InvalidCommitIdException": return [3 /*break*/, 28];
                    case "InvalidFileLocationException": return [3 /*break*/, 30];
                    case "com.amazonaws.codecommit#InvalidFileLocationException": return [3 /*break*/, 30];
                    case "InvalidFilePositionException": return [3 /*break*/, 32];
                    case "com.amazonaws.codecommit#InvalidFilePositionException": return [3 /*break*/, 32];
                    case "InvalidPathException": return [3 /*break*/, 34];
                    case "com.amazonaws.codecommit#InvalidPathException": return [3 /*break*/, 34];
                    case "InvalidRelativeFileVersionEnumException": return [3 /*break*/, 36];
                    case "com.amazonaws.codecommit#InvalidRelativeFileVersionEnumException": return [3 /*break*/, 36];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 38];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 38];
                    case "PathDoesNotExistException": return [3 /*break*/, 40];
                    case "com.amazonaws.codecommit#PathDoesNotExistException": return [3 /*break*/, 40];
                    case "PathRequiredException": return [3 /*break*/, 42];
                    case "com.amazonaws.codecommit#PathRequiredException": return [3 /*break*/, 42];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 44];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 44];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 46];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 46];
                }
                return [3 /*break*/, 48];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BeforeCommitIdAndAfterCommitIdAreSameExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ClientRequestTokenRequiredExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentContentRequiredExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentContentSizeLimitExceededExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitDoesNotExistExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitIdRequiredExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1IdempotencyParameterMismatchExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidClientRequestTokenExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommitIdExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 30:
                _s = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidFileLocationExceptionResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 32:
                _t = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidFilePositionExceptionResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 34:
                _u = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPathExceptionResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 36:
                _v = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRelativeFileVersionEnumExceptionResponse(parsedOutput, context)];
            case 37:
                response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 38:
                _w = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 39:
                response = __assign.apply(void 0, [__assign.apply(void 0, _w.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 40:
                _x = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PathDoesNotExistExceptionResponse(parsedOutput, context)];
            case 41:
                response = __assign.apply(void 0, [__assign.apply(void 0, _x.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 42:
                _y = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PathRequiredExceptionResponse(parsedOutput, context)];
            case 43:
                response = __assign.apply(void 0, [__assign.apply(void 0, _y.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 44:
                _z = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 45:
                response = __assign.apply(void 0, [__assign.apply(void 0, _z.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 46:
                _0 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 47:
                response = __assign.apply(void 0, [__assign.apply(void 0, _0.concat([(_2.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 49];
            case 48:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _2.label = 49;
            case 49:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1PostCommentForPullRequestCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1PostCommentForPullRequestCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1PostCommentForPullRequestOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1PostCommentForPullRequestCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, parsedBody, message;
    var _5;
    return __generator(this, function (_6) {
        switch (_6.label) {
            case 0:
                _a = [__assign({}, output)];
                _5 = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_5.body = _6.sent(), _5)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BeforeCommitIdAndAfterCommitIdAreSameException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#BeforeCommitIdAndAfterCommitIdAreSameException": return [3 /*break*/, 2];
                    case "ClientRequestTokenRequiredException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#ClientRequestTokenRequiredException": return [3 /*break*/, 4];
                    case "CommentContentRequiredException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#CommentContentRequiredException": return [3 /*break*/, 6];
                    case "CommentContentSizeLimitExceededException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#CommentContentSizeLimitExceededException": return [3 /*break*/, 8];
                    case "CommitDoesNotExistException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#CommitDoesNotExistException": return [3 /*break*/, 10];
                    case "CommitIdRequiredException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#CommitIdRequiredException": return [3 /*break*/, 12];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 14];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 16];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 18];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 20];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 22];
                    case "IdempotencyParameterMismatchException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#IdempotencyParameterMismatchException": return [3 /*break*/, 24];
                    case "InvalidClientRequestTokenException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#InvalidClientRequestTokenException": return [3 /*break*/, 26];
                    case "InvalidCommitIdException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#InvalidCommitIdException": return [3 /*break*/, 28];
                    case "InvalidFileLocationException": return [3 /*break*/, 30];
                    case "com.amazonaws.codecommit#InvalidFileLocationException": return [3 /*break*/, 30];
                    case "InvalidFilePositionException": return [3 /*break*/, 32];
                    case "com.amazonaws.codecommit#InvalidFilePositionException": return [3 /*break*/, 32];
                    case "InvalidPathException": return [3 /*break*/, 34];
                    case "com.amazonaws.codecommit#InvalidPathException": return [3 /*break*/, 34];
                    case "InvalidPullRequestIdException": return [3 /*break*/, 36];
                    case "com.amazonaws.codecommit#InvalidPullRequestIdException": return [3 /*break*/, 36];
                    case "InvalidRelativeFileVersionEnumException": return [3 /*break*/, 38];
                    case "com.amazonaws.codecommit#InvalidRelativeFileVersionEnumException": return [3 /*break*/, 38];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 40];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 40];
                    case "PathDoesNotExistException": return [3 /*break*/, 42];
                    case "com.amazonaws.codecommit#PathDoesNotExistException": return [3 /*break*/, 42];
                    case "PathRequiredException": return [3 /*break*/, 44];
                    case "com.amazonaws.codecommit#PathRequiredException": return [3 /*break*/, 44];
                    case "PullRequestDoesNotExistException": return [3 /*break*/, 46];
                    case "com.amazonaws.codecommit#PullRequestDoesNotExistException": return [3 /*break*/, 46];
                    case "PullRequestIdRequiredException": return [3 /*break*/, 48];
                    case "com.amazonaws.codecommit#PullRequestIdRequiredException": return [3 /*break*/, 48];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 50];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 50];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 52];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 52];
                    case "RepositoryNotAssociatedWithPullRequestException": return [3 /*break*/, 54];
                    case "com.amazonaws.codecommit#RepositoryNotAssociatedWithPullRequestException": return [3 /*break*/, 54];
                }
                return [3 /*break*/, 56];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BeforeCommitIdAndAfterCommitIdAreSameExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ClientRequestTokenRequiredExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentContentRequiredExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentContentSizeLimitExceededExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitDoesNotExistExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitIdRequiredExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1IdempotencyParameterMismatchExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidClientRequestTokenExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommitIdExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 30:
                _s = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidFileLocationExceptionResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 32:
                _t = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidFilePositionExceptionResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 34:
                _u = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPathExceptionResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 36:
                _v = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPullRequestIdExceptionResponse(parsedOutput, context)];
            case 37:
                response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 38:
                _w = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRelativeFileVersionEnumExceptionResponse(parsedOutput, context)];
            case 39:
                response = __assign.apply(void 0, [__assign.apply(void 0, _w.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 40:
                _x = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 41:
                response = __assign.apply(void 0, [__assign.apply(void 0, _x.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 42:
                _y = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PathDoesNotExistExceptionResponse(parsedOutput, context)];
            case 43:
                response = __assign.apply(void 0, [__assign.apply(void 0, _y.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 44:
                _z = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PathRequiredExceptionResponse(parsedOutput, context)];
            case 45:
                response = __assign.apply(void 0, [__assign.apply(void 0, _z.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 46:
                _0 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestDoesNotExistExceptionResponse(parsedOutput, context)];
            case 47:
                response = __assign.apply(void 0, [__assign.apply(void 0, _0.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 48:
                _1 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestIdRequiredExceptionResponse(parsedOutput, context)];
            case 49:
                response = __assign.apply(void 0, [__assign.apply(void 0, _1.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 50:
                _2 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 51:
                response = __assign.apply(void 0, [__assign.apply(void 0, _2.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 52:
                _3 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 53:
                response = __assign.apply(void 0, [__assign.apply(void 0, _3.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 54:
                _4 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNotAssociatedWithPullRequestExceptionResponse(parsedOutput, context)];
            case 55:
                response = __assign.apply(void 0, [__assign.apply(void 0, _4.concat([(_6.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 57];
            case 56:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _6.label = 57;
            case 57:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1PostCommentReplyCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1PostCommentReplyCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1PostCommentReplyOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1PostCommentReplyCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
    var _l;
    return __generator(this, function (_m) {
        switch (_m.label) {
            case 0:
                _a = [__assign({}, output)];
                _l = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ClientRequestTokenRequiredException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#ClientRequestTokenRequiredException": return [3 /*break*/, 2];
                    case "CommentContentRequiredException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#CommentContentRequiredException": return [3 /*break*/, 4];
                    case "CommentContentSizeLimitExceededException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#CommentContentSizeLimitExceededException": return [3 /*break*/, 6];
                    case "CommentDoesNotExistException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#CommentDoesNotExistException": return [3 /*break*/, 8];
                    case "CommentIdRequiredException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#CommentIdRequiredException": return [3 /*break*/, 10];
                    case "IdempotencyParameterMismatchException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#IdempotencyParameterMismatchException": return [3 /*break*/, 12];
                    case "InvalidClientRequestTokenException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#InvalidClientRequestTokenException": return [3 /*break*/, 14];
                    case "InvalidCommentIdException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidCommentIdException": return [3 /*break*/, 16];
                }
                return [3 /*break*/, 18];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ClientRequestTokenRequiredExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentContentRequiredExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentContentSizeLimitExceededExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentDoesNotExistExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentIdRequiredExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1IdempotencyParameterMismatchExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidClientRequestTokenExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommentIdExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 18:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _m.label = 19;
            case 19:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1PutCommentReactionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1PutCommentReactionCommandError(output, context)];
                }
                return [4 /*yield*/, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1PutCommentReactionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator(this, function (_l) {
        switch (_l.label) {
            case 0:
                _a = [__assign({}, output)];
                _k = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CommentDeletedException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#CommentDeletedException": return [3 /*break*/, 2];
                    case "CommentDoesNotExistException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#CommentDoesNotExistException": return [3 /*break*/, 4];
                    case "CommentIdRequiredException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#CommentIdRequiredException": return [3 /*break*/, 6];
                    case "InvalidCommentIdException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#InvalidCommentIdException": return [3 /*break*/, 8];
                    case "InvalidReactionValueException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#InvalidReactionValueException": return [3 /*break*/, 10];
                    case "ReactionLimitExceededException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#ReactionLimitExceededException": return [3 /*break*/, 12];
                    case "ReactionValueRequiredException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#ReactionValueRequiredException": return [3 /*break*/, 14];
                }
                return [3 /*break*/, 16];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentDeletedExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentDoesNotExistExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentIdRequiredExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommentIdExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidReactionValueExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ReactionLimitExceededExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ReactionValueRequiredExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 16:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _l.label = 17;
            case 17:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1PutFileCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1PutFileCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1PutFileOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1PutFileCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, parsedBody, message;
    var _8;
    return __generator(this, function (_9) {
        switch (_9.label) {
            case 0:
                _a = [__assign({}, output)];
                _8 = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_8.body = _9.sent(), _8)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BranchDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#BranchDoesNotExistException": return [3 /*break*/, 2];
                    case "BranchNameIsTagNameException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#BranchNameIsTagNameException": return [3 /*break*/, 4];
                    case "BranchNameRequiredException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#BranchNameRequiredException": return [3 /*break*/, 6];
                    case "CommitMessageLengthExceededException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#CommitMessageLengthExceededException": return [3 /*break*/, 8];
                    case "DirectoryNameConflictsWithFileNameException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#DirectoryNameConflictsWithFileNameException": return [3 /*break*/, 10];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 12];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 14];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 16];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 18];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 20];
                    case "FileContentRequiredException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#FileContentRequiredException": return [3 /*break*/, 22];
                    case "FileContentSizeLimitExceededException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#FileContentSizeLimitExceededException": return [3 /*break*/, 24];
                    case "FileNameConflictsWithDirectoryNameException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#FileNameConflictsWithDirectoryNameException": return [3 /*break*/, 26];
                    case "FilePathConflictsWithSubmodulePathException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#FilePathConflictsWithSubmodulePathException": return [3 /*break*/, 28];
                    case "FolderContentSizeLimitExceededException": return [3 /*break*/, 30];
                    case "com.amazonaws.codecommit#FolderContentSizeLimitExceededException": return [3 /*break*/, 30];
                    case "InvalidBranchNameException": return [3 /*break*/, 32];
                    case "com.amazonaws.codecommit#InvalidBranchNameException": return [3 /*break*/, 32];
                    case "InvalidDeletionParameterException": return [3 /*break*/, 34];
                    case "com.amazonaws.codecommit#InvalidDeletionParameterException": return [3 /*break*/, 34];
                    case "InvalidEmailException": return [3 /*break*/, 36];
                    case "com.amazonaws.codecommit#InvalidEmailException": return [3 /*break*/, 36];
                    case "InvalidFileModeException": return [3 /*break*/, 38];
                    case "com.amazonaws.codecommit#InvalidFileModeException": return [3 /*break*/, 38];
                    case "InvalidParentCommitIdException": return [3 /*break*/, 40];
                    case "com.amazonaws.codecommit#InvalidParentCommitIdException": return [3 /*break*/, 40];
                    case "InvalidPathException": return [3 /*break*/, 42];
                    case "com.amazonaws.codecommit#InvalidPathException": return [3 /*break*/, 42];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 44];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 44];
                    case "NameLengthExceededException": return [3 /*break*/, 46];
                    case "com.amazonaws.codecommit#NameLengthExceededException": return [3 /*break*/, 46];
                    case "ParentCommitDoesNotExistException": return [3 /*break*/, 48];
                    case "com.amazonaws.codecommit#ParentCommitDoesNotExistException": return [3 /*break*/, 48];
                    case "ParentCommitIdOutdatedException": return [3 /*break*/, 50];
                    case "com.amazonaws.codecommit#ParentCommitIdOutdatedException": return [3 /*break*/, 50];
                    case "ParentCommitIdRequiredException": return [3 /*break*/, 52];
                    case "com.amazonaws.codecommit#ParentCommitIdRequiredException": return [3 /*break*/, 52];
                    case "PathRequiredException": return [3 /*break*/, 54];
                    case "com.amazonaws.codecommit#PathRequiredException": return [3 /*break*/, 54];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 56];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 56];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 58];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 58];
                    case "SameFileContentException": return [3 /*break*/, 60];
                    case "com.amazonaws.codecommit#SameFileContentException": return [3 /*break*/, 60];
                }
                return [3 /*break*/, 62];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BranchDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BranchNameIsTagNameExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BranchNameRequiredExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommitMessageLengthExceededExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1DirectoryNameConflictsWithFileNameExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FileContentRequiredExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FileContentSizeLimitExceededExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FileNameConflictsWithDirectoryNameExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FilePathConflictsWithSubmodulePathExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 30:
                _s = [{}];
                return [4 /*yield*/, deserializeAws_json1_1FolderContentSizeLimitExceededExceptionResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 32:
                _t = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidBranchNameExceptionResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 34:
                _u = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidDeletionParameterExceptionResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 36:
                _v = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidEmailExceptionResponse(parsedOutput, context)];
            case 37:
                response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 38:
                _w = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidFileModeExceptionResponse(parsedOutput, context)];
            case 39:
                response = __assign.apply(void 0, [__assign.apply(void 0, _w.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 40:
                _x = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidParentCommitIdExceptionResponse(parsedOutput, context)];
            case 41:
                response = __assign.apply(void 0, [__assign.apply(void 0, _x.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 42:
                _y = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPathExceptionResponse(parsedOutput, context)];
            case 43:
                response = __assign.apply(void 0, [__assign.apply(void 0, _y.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 44:
                _z = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 45:
                response = __assign.apply(void 0, [__assign.apply(void 0, _z.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 46:
                _0 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1NameLengthExceededExceptionResponse(parsedOutput, context)];
            case 47:
                response = __assign.apply(void 0, [__assign.apply(void 0, _0.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 48:
                _1 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ParentCommitDoesNotExistExceptionResponse(parsedOutput, context)];
            case 49:
                response = __assign.apply(void 0, [__assign.apply(void 0, _1.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 50:
                _2 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ParentCommitIdOutdatedExceptionResponse(parsedOutput, context)];
            case 51:
                response = __assign.apply(void 0, [__assign.apply(void 0, _2.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 52:
                _3 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ParentCommitIdRequiredExceptionResponse(parsedOutput, context)];
            case 53:
                response = __assign.apply(void 0, [__assign.apply(void 0, _3.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 54:
                _4 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PathRequiredExceptionResponse(parsedOutput, context)];
            case 55:
                response = __assign.apply(void 0, [__assign.apply(void 0, _4.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 56:
                _5 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 57:
                response = __assign.apply(void 0, [__assign.apply(void 0, _5.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 58:
                _6 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 59:
                response = __assign.apply(void 0, [__assign.apply(void 0, _6.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 60:
                _7 = [{}];
                return [4 /*yield*/, deserializeAws_json1_1SameFileContentExceptionResponse(parsedOutput, context)];
            case 61:
                response = __assign.apply(void 0, [__assign.apply(void 0, _7.concat([(_9.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 63];
            case 62:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _9.label = 63;
            case 63:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1PutRepositoryTriggersCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1PutRepositoryTriggersCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1PutRepositoryTriggersOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1PutRepositoryTriggersCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, parsedBody, message;
    var _z;
    return __generator(this, function (_0) {
        switch (_0.label) {
            case 0:
                _a = [__assign({}, output)];
                _z = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_z.body = _0.sent(), _z)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 12];
                    case "InvalidRepositoryTriggerBranchNameException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#InvalidRepositoryTriggerBranchNameException": return [3 /*break*/, 14];
                    case "InvalidRepositoryTriggerCustomDataException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidRepositoryTriggerCustomDataException": return [3 /*break*/, 16];
                    case "InvalidRepositoryTriggerDestinationArnException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidRepositoryTriggerDestinationArnException": return [3 /*break*/, 18];
                    case "InvalidRepositoryTriggerEventsException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#InvalidRepositoryTriggerEventsException": return [3 /*break*/, 20];
                    case "InvalidRepositoryTriggerNameException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#InvalidRepositoryTriggerNameException": return [3 /*break*/, 22];
                    case "InvalidRepositoryTriggerRegionException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#InvalidRepositoryTriggerRegionException": return [3 /*break*/, 24];
                    case "MaximumBranchesExceededException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#MaximumBranchesExceededException": return [3 /*break*/, 26];
                    case "MaximumRepositoryTriggersExceededException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#MaximumRepositoryTriggersExceededException": return [3 /*break*/, 28];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 30];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 30];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 32];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 32];
                    case "RepositoryTriggerBranchNameListRequiredException": return [3 /*break*/, 34];
                    case "com.amazonaws.codecommit#RepositoryTriggerBranchNameListRequiredException": return [3 /*break*/, 34];
                    case "RepositoryTriggerDestinationArnRequiredException": return [3 /*break*/, 36];
                    case "com.amazonaws.codecommit#RepositoryTriggerDestinationArnRequiredException": return [3 /*break*/, 36];
                    case "RepositoryTriggerEventsListRequiredException": return [3 /*break*/, 38];
                    case "com.amazonaws.codecommit#RepositoryTriggerEventsListRequiredException": return [3 /*break*/, 38];
                    case "RepositoryTriggerNameRequiredException": return [3 /*break*/, 40];
                    case "com.amazonaws.codecommit#RepositoryTriggerNameRequiredException": return [3 /*break*/, 40];
                    case "RepositoryTriggersListRequiredException": return [3 /*break*/, 42];
                    case "com.amazonaws.codecommit#RepositoryTriggersListRequiredException": return [3 /*break*/, 42];
                }
                return [3 /*break*/, 44];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryTriggerBranchNameExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryTriggerCustomDataExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryTriggerDestinationArnExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryTriggerEventsExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryTriggerNameExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryTriggerRegionExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumBranchesExceededExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumRepositoryTriggersExceededExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 30:
                _s = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 32:
                _t = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 34:
                _u = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryTriggerBranchNameListRequiredExceptionResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 36:
                _v = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryTriggerDestinationArnRequiredExceptionResponse(parsedOutput, context)];
            case 37:
                response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 38:
                _w = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryTriggerEventsListRequiredExceptionResponse(parsedOutput, context)];
            case 39:
                response = __assign.apply(void 0, [__assign.apply(void 0, _w.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 40:
                _x = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryTriggerNameRequiredExceptionResponse(parsedOutput, context)];
            case 41:
                response = __assign.apply(void 0, [__assign.apply(void 0, _x.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 42:
                _y = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryTriggersListRequiredExceptionResponse(parsedOutput, context)];
            case 43:
                response = __assign.apply(void 0, [__assign.apply(void 0, _y.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 44:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _0.label = 45;
            case 45:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1TagResourceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1TagResourceCommandError(output, context)];
                }
                return [4 /*yield*/, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1TagResourceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, parsedBody, message;
    var _m;
    return __generator(this, function (_o) {
        switch (_o.label) {
            case 0:
                _a = [__assign({}, output)];
                _m = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_m.body = _o.sent(), _m)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidRepositoryNameException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 2];
                    case "InvalidResourceArnException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#InvalidResourceArnException": return [3 /*break*/, 4];
                    case "InvalidSystemTagUsageException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#InvalidSystemTagUsageException": return [3 /*break*/, 6];
                    case "InvalidTagsMapException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#InvalidTagsMapException": return [3 /*break*/, 8];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 10];
                    case "ResourceArnRequiredException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#ResourceArnRequiredException": return [3 /*break*/, 12];
                    case "TagPolicyException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#TagPolicyException": return [3 /*break*/, 14];
                    case "TagsMapRequiredException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#TagsMapRequiredException": return [3 /*break*/, 16];
                    case "TooManyTagsException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#TooManyTagsException": return [3 /*break*/, 18];
                }
                return [3 /*break*/, 20];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidResourceArnExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidSystemTagUsageExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidTagsMapExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ResourceArnRequiredExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1TagPolicyExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1TagsMapRequiredExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1TooManyTagsExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 20:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _o.label = 21;
            case 21:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1TestRepositoryTriggersCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1TestRepositoryTriggersCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1TestRepositoryTriggersOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1TestRepositoryTriggersCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, parsedBody, message;
    var _z;
    return __generator(this, function (_0) {
        switch (_0.label) {
            case 0:
                _a = [__assign({}, output)];
                _z = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_z.body = _0.sent(), _z)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 12];
                    case "InvalidRepositoryTriggerBranchNameException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#InvalidRepositoryTriggerBranchNameException": return [3 /*break*/, 14];
                    case "InvalidRepositoryTriggerCustomDataException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidRepositoryTriggerCustomDataException": return [3 /*break*/, 16];
                    case "InvalidRepositoryTriggerDestinationArnException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidRepositoryTriggerDestinationArnException": return [3 /*break*/, 18];
                    case "InvalidRepositoryTriggerEventsException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#InvalidRepositoryTriggerEventsException": return [3 /*break*/, 20];
                    case "InvalidRepositoryTriggerNameException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#InvalidRepositoryTriggerNameException": return [3 /*break*/, 22];
                    case "InvalidRepositoryTriggerRegionException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#InvalidRepositoryTriggerRegionException": return [3 /*break*/, 24];
                    case "MaximumBranchesExceededException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#MaximumBranchesExceededException": return [3 /*break*/, 26];
                    case "MaximumRepositoryTriggersExceededException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#MaximumRepositoryTriggersExceededException": return [3 /*break*/, 28];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 30];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 30];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 32];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 32];
                    case "RepositoryTriggerBranchNameListRequiredException": return [3 /*break*/, 34];
                    case "com.amazonaws.codecommit#RepositoryTriggerBranchNameListRequiredException": return [3 /*break*/, 34];
                    case "RepositoryTriggerDestinationArnRequiredException": return [3 /*break*/, 36];
                    case "com.amazonaws.codecommit#RepositoryTriggerDestinationArnRequiredException": return [3 /*break*/, 36];
                    case "RepositoryTriggerEventsListRequiredException": return [3 /*break*/, 38];
                    case "com.amazonaws.codecommit#RepositoryTriggerEventsListRequiredException": return [3 /*break*/, 38];
                    case "RepositoryTriggerNameRequiredException": return [3 /*break*/, 40];
                    case "com.amazonaws.codecommit#RepositoryTriggerNameRequiredException": return [3 /*break*/, 40];
                    case "RepositoryTriggersListRequiredException": return [3 /*break*/, 42];
                    case "com.amazonaws.codecommit#RepositoryTriggersListRequiredException": return [3 /*break*/, 42];
                }
                return [3 /*break*/, 44];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryTriggerBranchNameExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryTriggerCustomDataExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryTriggerDestinationArnExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryTriggerEventsExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryTriggerNameExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryTriggerRegionExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumBranchesExceededExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumRepositoryTriggersExceededExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 30:
                _s = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 32:
                _t = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 34:
                _u = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryTriggerBranchNameListRequiredExceptionResponse(parsedOutput, context)];
            case 35:
                response = __assign.apply(void 0, [__assign.apply(void 0, _u.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 36:
                _v = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryTriggerDestinationArnRequiredExceptionResponse(parsedOutput, context)];
            case 37:
                response = __assign.apply(void 0, [__assign.apply(void 0, _v.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 38:
                _w = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryTriggerEventsListRequiredExceptionResponse(parsedOutput, context)];
            case 39:
                response = __assign.apply(void 0, [__assign.apply(void 0, _w.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 40:
                _x = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryTriggerNameRequiredExceptionResponse(parsedOutput, context)];
            case 41:
                response = __assign.apply(void 0, [__assign.apply(void 0, _x.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 42:
                _y = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryTriggersListRequiredExceptionResponse(parsedOutput, context)];
            case 43:
                response = __assign.apply(void 0, [__assign.apply(void 0, _y.concat([(_0.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 45];
            case 44:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _0.label = 45;
            case 45:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1UntagResourceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1UntagResourceCommandError(output, context)];
                }
                return [4 /*yield*/, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1UntagResourceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, parsedBody, message;
    var _m;
    return __generator(this, function (_o) {
        switch (_o.label) {
            case 0:
                _a = [__assign({}, output)];
                _m = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_m.body = _o.sent(), _m)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidRepositoryNameException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 2];
                    case "InvalidResourceArnException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#InvalidResourceArnException": return [3 /*break*/, 4];
                    case "InvalidSystemTagUsageException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#InvalidSystemTagUsageException": return [3 /*break*/, 6];
                    case "InvalidTagKeysListException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#InvalidTagKeysListException": return [3 /*break*/, 8];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 10];
                    case "ResourceArnRequiredException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#ResourceArnRequiredException": return [3 /*break*/, 12];
                    case "TagKeysListRequiredException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#TagKeysListRequiredException": return [3 /*break*/, 14];
                    case "TagPolicyException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#TagPolicyException": return [3 /*break*/, 16];
                    case "TooManyTagsException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#TooManyTagsException": return [3 /*break*/, 18];
                }
                return [3 /*break*/, 20];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidResourceArnExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidSystemTagUsageExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidTagKeysListExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ResourceArnRequiredExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1TagKeysListRequiredExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1TagPolicyExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1TooManyTagsExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 20:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _o.label = 21;
            case 21:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1UpdateApprovalRuleTemplateContentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1UpdateApprovalRuleTemplateContentCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1UpdateApprovalRuleTemplateContentOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1UpdateApprovalRuleTemplateContentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function (_k) {
        switch (_k.label) {
            case 0:
                _a = [__assign({}, output)];
                _j = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ApprovalRuleTemplateContentRequiredException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#ApprovalRuleTemplateContentRequiredException": return [3 /*break*/, 2];
                    case "ApprovalRuleTemplateDoesNotExistException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#ApprovalRuleTemplateDoesNotExistException": return [3 /*break*/, 4];
                    case "ApprovalRuleTemplateNameRequiredException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#ApprovalRuleTemplateNameRequiredException": return [3 /*break*/, 6];
                    case "InvalidApprovalRuleTemplateContentException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#InvalidApprovalRuleTemplateContentException": return [3 /*break*/, 8];
                    case "InvalidApprovalRuleTemplateNameException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#InvalidApprovalRuleTemplateNameException": return [3 /*break*/, 10];
                    case "InvalidRuleContentSha256Exception": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#InvalidRuleContentSha256Exception": return [3 /*break*/, 12];
                }
                return [3 /*break*/, 14];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleTemplateContentRequiredExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 15];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleTemplateDoesNotExistExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 15];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleTemplateNameRequiredExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 15];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidApprovalRuleTemplateContentExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 15];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidApprovalRuleTemplateNameExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 15];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRuleContentSha256ExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 15];
            case 14:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _k.label = 15;
            case 15:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1UpdateApprovalRuleTemplateDescriptionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1UpdateApprovalRuleTemplateDescriptionCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1UpdateApprovalRuleTemplateDescriptionOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1UpdateApprovalRuleTemplateDescriptionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function (_h) {
        switch (_h.label) {
            case 0:
                _a = [__assign({}, output)];
                _g = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ApprovalRuleTemplateDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#ApprovalRuleTemplateDoesNotExistException": return [3 /*break*/, 2];
                    case "ApprovalRuleTemplateNameRequiredException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#ApprovalRuleTemplateNameRequiredException": return [3 /*break*/, 4];
                    case "InvalidApprovalRuleTemplateDescriptionException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#InvalidApprovalRuleTemplateDescriptionException": return [3 /*break*/, 6];
                    case "InvalidApprovalRuleTemplateNameException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#InvalidApprovalRuleTemplateNameException": return [3 /*break*/, 8];
                }
                return [3 /*break*/, 10];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleTemplateDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 11];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleTemplateNameRequiredExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 11];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidApprovalRuleTemplateDescriptionExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 11];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidApprovalRuleTemplateNameExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 11];
            case 10:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _h.label = 11;
            case 11:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1UpdateApprovalRuleTemplateNameCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1UpdateApprovalRuleTemplateNameCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1UpdateApprovalRuleTemplateNameOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1UpdateApprovalRuleTemplateNameCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function (_h) {
        switch (_h.label) {
            case 0:
                _a = [__assign({}, output)];
                _g = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ApprovalRuleTemplateDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#ApprovalRuleTemplateDoesNotExistException": return [3 /*break*/, 2];
                    case "ApprovalRuleTemplateNameAlreadyExistsException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#ApprovalRuleTemplateNameAlreadyExistsException": return [3 /*break*/, 4];
                    case "ApprovalRuleTemplateNameRequiredException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#ApprovalRuleTemplateNameRequiredException": return [3 /*break*/, 6];
                    case "InvalidApprovalRuleTemplateNameException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#InvalidApprovalRuleTemplateNameException": return [3 /*break*/, 8];
                }
                return [3 /*break*/, 10];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleTemplateDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 11];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleTemplateNameAlreadyExistsExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 11];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleTemplateNameRequiredExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 11];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidApprovalRuleTemplateNameExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 11];
            case 10:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _h.label = 11;
            case 11:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1UpdateCommentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1UpdateCommentCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1UpdateCommentOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1UpdateCommentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
    var _k;
    return __generator(this, function (_l) {
        switch (_l.label) {
            case 0:
                _a = [__assign({}, output)];
                _k = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "CommentContentRequiredException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#CommentContentRequiredException": return [3 /*break*/, 2];
                    case "CommentContentSizeLimitExceededException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#CommentContentSizeLimitExceededException": return [3 /*break*/, 4];
                    case "CommentDeletedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#CommentDeletedException": return [3 /*break*/, 6];
                    case "CommentDoesNotExistException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#CommentDoesNotExistException": return [3 /*break*/, 8];
                    case "CommentIdRequiredException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#CommentIdRequiredException": return [3 /*break*/, 10];
                    case "CommentNotCreatedByCallerException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#CommentNotCreatedByCallerException": return [3 /*break*/, 12];
                    case "InvalidCommentIdException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#InvalidCommentIdException": return [3 /*break*/, 14];
                }
                return [3 /*break*/, 16];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentContentRequiredExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentContentSizeLimitExceededExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentDeletedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentDoesNotExistExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentIdRequiredExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CommentNotCreatedByCallerExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidCommentIdExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 17];
            case 16:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _l.label = 17;
            case 17:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1UpdateDefaultBranchCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1UpdateDefaultBranchCommandError(output, context)];
                }
                return [4 /*yield*/, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1UpdateDefaultBranchCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, parsedBody, message;
    var _p;
    return __generator(this, function (_q) {
        switch (_q.label) {
            case 0:
                _a = [__assign({}, output)];
                _p = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_p.body = _q.sent(), _p)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BranchDoesNotExistException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#BranchDoesNotExistException": return [3 /*break*/, 2];
                    case "BranchNameRequiredException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#BranchNameRequiredException": return [3 /*break*/, 4];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 6];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 8];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 10];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 12];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 14];
                    case "InvalidBranchNameException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidBranchNameException": return [3 /*break*/, 16];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 18];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 20];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 22];
                }
                return [3 /*break*/, 24];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BranchDoesNotExistExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1BranchNameRequiredExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidBranchNameExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 24:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _q.label = 25;
            case 25:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1UpdatePullRequestApprovalRuleContentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1UpdatePullRequestApprovalRuleContentCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1UpdatePullRequestApprovalRuleContentOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1UpdatePullRequestApprovalRuleContentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, parsedBody, message;
    var _u;
    return __generator(this, function (_v) {
        switch (_v.label) {
            case 0:
                _a = [__assign({}, output)];
                _u = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_u.body = _v.sent(), _u)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ApprovalRuleContentRequiredException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#ApprovalRuleContentRequiredException": return [3 /*break*/, 2];
                    case "ApprovalRuleDoesNotExistException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#ApprovalRuleDoesNotExistException": return [3 /*break*/, 4];
                    case "ApprovalRuleNameRequiredException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#ApprovalRuleNameRequiredException": return [3 /*break*/, 6];
                    case "CannotModifyApprovalRuleFromTemplateException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#CannotModifyApprovalRuleFromTemplateException": return [3 /*break*/, 8];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 10];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 12];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 14];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 16];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 18];
                    case "InvalidApprovalRuleContentException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#InvalidApprovalRuleContentException": return [3 /*break*/, 20];
                    case "InvalidApprovalRuleNameException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#InvalidApprovalRuleNameException": return [3 /*break*/, 22];
                    case "InvalidPullRequestIdException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#InvalidPullRequestIdException": return [3 /*break*/, 24];
                    case "InvalidRuleContentSha256Exception": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#InvalidRuleContentSha256Exception": return [3 /*break*/, 26];
                    case "PullRequestAlreadyClosedException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#PullRequestAlreadyClosedException": return [3 /*break*/, 28];
                    case "PullRequestDoesNotExistException": return [3 /*break*/, 30];
                    case "com.amazonaws.codecommit#PullRequestDoesNotExistException": return [3 /*break*/, 30];
                    case "PullRequestIdRequiredException": return [3 /*break*/, 32];
                    case "com.amazonaws.codecommit#PullRequestIdRequiredException": return [3 /*break*/, 32];
                }
                return [3 /*break*/, 34];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleContentRequiredExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleDoesNotExistExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalRuleNameRequiredExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1CannotModifyApprovalRuleFromTemplateExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidApprovalRuleContentExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidApprovalRuleNameExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPullRequestIdExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRuleContentSha256ExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestAlreadyClosedExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 30:
                _s = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestDoesNotExistExceptionResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 32:
                _t = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestIdRequiredExceptionResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 34:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _v.label = 35;
            case 35:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1UpdatePullRequestApprovalStateCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1UpdatePullRequestApprovalStateCommandError(output, context)];
                }
                return [4 /*yield*/, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1UpdatePullRequestApprovalStateCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, parsedBody, message;
    var _u;
    return __generator(this, function (_v) {
        switch (_v.label) {
            case 0:
                _a = [__assign({}, output)];
                _u = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_u.body = _v.sent(), _u)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ApprovalStateRequiredException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#ApprovalStateRequiredException": return [3 /*break*/, 2];
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 4];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 6];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 8];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 10];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 12];
                    case "InvalidApprovalStateException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#InvalidApprovalStateException": return [3 /*break*/, 14];
                    case "InvalidPullRequestIdException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidPullRequestIdException": return [3 /*break*/, 16];
                    case "InvalidRevisionIdException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#InvalidRevisionIdException": return [3 /*break*/, 18];
                    case "MaximumNumberOfApprovalsExceededException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#MaximumNumberOfApprovalsExceededException": return [3 /*break*/, 20];
                    case "PullRequestAlreadyClosedException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#PullRequestAlreadyClosedException": return [3 /*break*/, 22];
                    case "PullRequestCannotBeApprovedByAuthorException": return [3 /*break*/, 24];
                    case "com.amazonaws.codecommit#PullRequestCannotBeApprovedByAuthorException": return [3 /*break*/, 24];
                    case "PullRequestDoesNotExistException": return [3 /*break*/, 26];
                    case "com.amazonaws.codecommit#PullRequestDoesNotExistException": return [3 /*break*/, 26];
                    case "PullRequestIdRequiredException": return [3 /*break*/, 28];
                    case "com.amazonaws.codecommit#PullRequestIdRequiredException": return [3 /*break*/, 28];
                    case "RevisionIdRequiredException": return [3 /*break*/, 30];
                    case "com.amazonaws.codecommit#RevisionIdRequiredException": return [3 /*break*/, 30];
                    case "RevisionNotCurrentException": return [3 /*break*/, 32];
                    case "com.amazonaws.codecommit#RevisionNotCurrentException": return [3 /*break*/, 32];
                }
                return [3 /*break*/, 34];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1ApprovalStateRequiredExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidApprovalStateExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPullRequestIdExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRevisionIdExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1MaximumNumberOfApprovalsExceededExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestAlreadyClosedExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 24:
                _p = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestCannotBeApprovedByAuthorExceptionResponse(parsedOutput, context)];
            case 25:
                response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 26:
                _q = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestDoesNotExistExceptionResponse(parsedOutput, context)];
            case 27:
                response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 28:
                _r = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestIdRequiredExceptionResponse(parsedOutput, context)];
            case 29:
                response = __assign.apply(void 0, [__assign.apply(void 0, _r.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 30:
                _s = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RevisionIdRequiredExceptionResponse(parsedOutput, context)];
            case 31:
                response = __assign.apply(void 0, [__assign.apply(void 0, _s.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 32:
                _t = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RevisionNotCurrentExceptionResponse(parsedOutput, context)];
            case 33:
                response = __assign.apply(void 0, [__assign.apply(void 0, _t.concat([(_v.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 35];
            case 34:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _v.label = 35;
            case 35:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1UpdatePullRequestDescriptionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1UpdatePullRequestDescriptionCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1UpdatePullRequestDescriptionOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1UpdatePullRequestDescriptionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return __generator(this, function (_j) {
        switch (_j.label) {
            case 0:
                _a = [__assign({}, output)];
                _h = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidDescriptionException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#InvalidDescriptionException": return [3 /*break*/, 2];
                    case "InvalidPullRequestIdException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#InvalidPullRequestIdException": return [3 /*break*/, 4];
                    case "PullRequestAlreadyClosedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#PullRequestAlreadyClosedException": return [3 /*break*/, 6];
                    case "PullRequestDoesNotExistException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#PullRequestDoesNotExistException": return [3 /*break*/, 8];
                    case "PullRequestIdRequiredException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#PullRequestIdRequiredException": return [3 /*break*/, 10];
                }
                return [3 /*break*/, 12];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidDescriptionExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 13];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPullRequestIdExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 13];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestAlreadyClosedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 13];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestDoesNotExistExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 13];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestIdRequiredExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 13];
            case 12:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _j.label = 13;
            case 13:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1UpdatePullRequestStatusCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1UpdatePullRequestStatusCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1UpdatePullRequestStatusOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1UpdatePullRequestStatusCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, parsedBody, message;
    var _p;
    return __generator(this, function (_q) {
        switch (_q.label) {
            case 0:
                _a = [__assign({}, output)];
                _p = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_p.body = _q.sent(), _p)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "InvalidPullRequestIdException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#InvalidPullRequestIdException": return [3 /*break*/, 12];
                    case "InvalidPullRequestStatusException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#InvalidPullRequestStatusException": return [3 /*break*/, 14];
                    case "InvalidPullRequestStatusUpdateException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#InvalidPullRequestStatusUpdateException": return [3 /*break*/, 16];
                    case "PullRequestDoesNotExistException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#PullRequestDoesNotExistException": return [3 /*break*/, 18];
                    case "PullRequestIdRequiredException": return [3 /*break*/, 20];
                    case "com.amazonaws.codecommit#PullRequestIdRequiredException": return [3 /*break*/, 20];
                    case "PullRequestStatusRequiredException": return [3 /*break*/, 22];
                    case "com.amazonaws.codecommit#PullRequestStatusRequiredException": return [3 /*break*/, 22];
                }
                return [3 /*break*/, 24];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPullRequestIdExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPullRequestStatusExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPullRequestStatusUpdateExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestDoesNotExistExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestIdRequiredExceptionResponse(parsedOutput, context)];
            case 21:
                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestStatusRequiredExceptionResponse(parsedOutput, context)];
            case 23:
                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 24:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _q.label = 25;
            case 25:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1UpdatePullRequestTitleCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1UpdatePullRequestTitleCommandError(output, context)];
                }
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1UpdatePullRequestTitleOutput(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1UpdatePullRequestTitleCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
    var _j;
    return __generator(this, function (_k) {
        switch (_k.label) {
            case 0:
                _a = [__assign({}, output)];
                _j = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_j.body = _k.sent(), _j)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidPullRequestIdException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#InvalidPullRequestIdException": return [3 /*break*/, 2];
                    case "InvalidTitleException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#InvalidTitleException": return [3 /*break*/, 4];
                    case "PullRequestAlreadyClosedException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#PullRequestAlreadyClosedException": return [3 /*break*/, 6];
                    case "PullRequestDoesNotExistException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#PullRequestDoesNotExistException": return [3 /*break*/, 8];
                    case "PullRequestIdRequiredException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#PullRequestIdRequiredException": return [3 /*break*/, 10];
                    case "TitleRequiredException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#TitleRequiredException": return [3 /*break*/, 12];
                }
                return [3 /*break*/, 14];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidPullRequestIdExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 15];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidTitleExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 15];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestAlreadyClosedExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 15];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestDoesNotExistExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 15];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1PullRequestIdRequiredExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 15];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1TitleRequiredExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_k.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 15];
            case 14:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _k.label = 15;
            case 15:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1UpdateRepositoryDescriptionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1UpdateRepositoryDescriptionCommandError(output, context)];
                }
                return [4 /*yield*/, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1UpdateRepositoryDescriptionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, parsedBody, message;
    var _m;
    return __generator(this, function (_o) {
        switch (_o.label) {
            case 0:
                _a = [__assign({}, output)];
                _m = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_m.body = _o.sent(), _m)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#EncryptionIntegrityChecksFailedException": return [3 /*break*/, 2];
                    case "EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#EncryptionKeyAccessDeniedException": return [3 /*break*/, 4];
                    case "EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#EncryptionKeyDisabledException": return [3 /*break*/, 6];
                    case "EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#EncryptionKeyNotFoundException": return [3 /*break*/, 8];
                    case "EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "com.amazonaws.codecommit#EncryptionKeyUnavailableException": return [3 /*break*/, 10];
                    case "InvalidRepositoryDescriptionException": return [3 /*break*/, 12];
                    case "com.amazonaws.codecommit#InvalidRepositoryDescriptionException": return [3 /*break*/, 12];
                    case "InvalidRepositoryNameException": return [3 /*break*/, 14];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 14];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 16];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 16];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 18];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 18];
                }
                return [3 /*break*/, 20];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse(parsedOutput, context)];
            case 11:
                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryDescriptionExceptionResponse(parsedOutput, context)];
            case 13:
                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 15:
                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 17:
                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 19:
                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 21];
            case 20:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _o.label = 21;
            case 21:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
export var deserializeAws_json1_1UpdateRepositoryNameCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_json1_1UpdateRepositoryNameCommandError(output, context)];
                }
                return [4 /*yield*/, collectBody(output.body, context)];
            case 1:
                _a.sent();
                response = {
                    $metadata: deserializeMetadata(output),
                };
                return [2 /*return*/, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1UpdateRepositoryNameCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return __generator(this, function (_h) {
        switch (_h.label) {
            case 0:
                _a = [__assign({}, output)];
                _g = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InvalidRepositoryNameException": return [3 /*break*/, 2];
                    case "com.amazonaws.codecommit#InvalidRepositoryNameException": return [3 /*break*/, 2];
                    case "RepositoryDoesNotExistException": return [3 /*break*/, 4];
                    case "com.amazonaws.codecommit#RepositoryDoesNotExistException": return [3 /*break*/, 4];
                    case "RepositoryNameExistsException": return [3 /*break*/, 6];
                    case "com.amazonaws.codecommit#RepositoryNameExistsException": return [3 /*break*/, 6];
                    case "RepositoryNameRequiredException": return [3 /*break*/, 8];
                    case "com.amazonaws.codecommit#RepositoryNameRequiredException": return [3 /*break*/, 8];
                }
                return [3 /*break*/, 10];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_json1_1InvalidRepositoryNameExceptionResponse(parsedOutput, context)];
            case 3:
                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 11];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse(parsedOutput, context)];
            case 5:
                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 11];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameExistsExceptionResponse(parsedOutput, context)];
            case 7:
                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 11];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_json1_1RepositoryNameRequiredExceptionResponse(parsedOutput, context)];
            case 9:
                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 11];
            case 10:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = __assign(__assign({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _h.label = 11;
            case 11:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
var deserializeAws_json1_1ActorDoesNotExistExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ActorDoesNotExistException(body, context);
        contents = __assign({ name: "ActorDoesNotExistException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ApprovalRuleContentRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ApprovalRuleContentRequiredException(body, context);
        contents = __assign({ name: "ApprovalRuleContentRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ApprovalRuleDoesNotExistExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ApprovalRuleDoesNotExistException(body, context);
        contents = __assign({ name: "ApprovalRuleDoesNotExistException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ApprovalRuleNameAlreadyExistsExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ApprovalRuleNameAlreadyExistsException(body, context);
        contents = __assign({ name: "ApprovalRuleNameAlreadyExistsException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ApprovalRuleNameRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ApprovalRuleNameRequiredException(body, context);
        contents = __assign({ name: "ApprovalRuleNameRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ApprovalRuleTemplateContentRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ApprovalRuleTemplateContentRequiredException(body, context);
        contents = __assign({ name: "ApprovalRuleTemplateContentRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ApprovalRuleTemplateDoesNotExistExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ApprovalRuleTemplateDoesNotExistException(body, context);
        contents = __assign({ name: "ApprovalRuleTemplateDoesNotExistException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ApprovalRuleTemplateInUseExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ApprovalRuleTemplateInUseException(body, context);
        contents = __assign({ name: "ApprovalRuleTemplateInUseException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ApprovalRuleTemplateNameAlreadyExistsExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ApprovalRuleTemplateNameAlreadyExistsException(body, context);
        contents = __assign({ name: "ApprovalRuleTemplateNameAlreadyExistsException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ApprovalRuleTemplateNameRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ApprovalRuleTemplateNameRequiredException(body, context);
        contents = __assign({ name: "ApprovalRuleTemplateNameRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ApprovalStateRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ApprovalStateRequiredException(body, context);
        contents = __assign({ name: "ApprovalStateRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1AuthorDoesNotExistExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1AuthorDoesNotExistException(body, context);
        contents = __assign({ name: "AuthorDoesNotExistException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1BeforeCommitIdAndAfterCommitIdAreSameExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1BeforeCommitIdAndAfterCommitIdAreSameException(body, context);
        contents = __assign({ name: "BeforeCommitIdAndAfterCommitIdAreSameException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1BlobIdDoesNotExistExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1BlobIdDoesNotExistException(body, context);
        contents = __assign({ name: "BlobIdDoesNotExistException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1BlobIdRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1BlobIdRequiredException(body, context);
        contents = __assign({ name: "BlobIdRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1BranchDoesNotExistExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1BranchDoesNotExistException(body, context);
        contents = __assign({ name: "BranchDoesNotExistException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1BranchNameExistsExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1BranchNameExistsException(body, context);
        contents = __assign({ name: "BranchNameExistsException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1BranchNameIsTagNameExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1BranchNameIsTagNameException(body, context);
        contents = __assign({ name: "BranchNameIsTagNameException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1BranchNameRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1BranchNameRequiredException(body, context);
        contents = __assign({ name: "BranchNameRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1CannotDeleteApprovalRuleFromTemplateExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1CannotDeleteApprovalRuleFromTemplateException(body, context);
        contents = __assign({ name: "CannotDeleteApprovalRuleFromTemplateException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1CannotModifyApprovalRuleFromTemplateExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1CannotModifyApprovalRuleFromTemplateException(body, context);
        contents = __assign({ name: "CannotModifyApprovalRuleFromTemplateException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ClientRequestTokenRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ClientRequestTokenRequiredException(body, context);
        contents = __assign({ name: "ClientRequestTokenRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1CommentContentRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1CommentContentRequiredException(body, context);
        contents = __assign({ name: "CommentContentRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1CommentContentSizeLimitExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1CommentContentSizeLimitExceededException(body, context);
        contents = __assign({ name: "CommentContentSizeLimitExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1CommentDeletedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1CommentDeletedException(body, context);
        contents = __assign({ name: "CommentDeletedException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1CommentDoesNotExistExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1CommentDoesNotExistException(body, context);
        contents = __assign({ name: "CommentDoesNotExistException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1CommentIdRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1CommentIdRequiredException(body, context);
        contents = __assign({ name: "CommentIdRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1CommentNotCreatedByCallerExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1CommentNotCreatedByCallerException(body, context);
        contents = __assign({ name: "CommentNotCreatedByCallerException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1CommitDoesNotExistExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1CommitDoesNotExistException(body, context);
        contents = __assign({ name: "CommitDoesNotExistException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1CommitIdDoesNotExistExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1CommitIdDoesNotExistException(body, context);
        contents = __assign({ name: "CommitIdDoesNotExistException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1CommitIdRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1CommitIdRequiredException(body, context);
        contents = __assign({ name: "CommitIdRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1CommitIdsLimitExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1CommitIdsLimitExceededException(body, context);
        contents = __assign({ name: "CommitIdsLimitExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1CommitIdsListRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1CommitIdsListRequiredException(body, context);
        contents = __assign({ name: "CommitIdsListRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1CommitMessageLengthExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1CommitMessageLengthExceededException(body, context);
        contents = __assign({ name: "CommitMessageLengthExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1CommitRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1CommitRequiredException(body, context);
        contents = __assign({ name: "CommitRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ConcurrentReferenceUpdateExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ConcurrentReferenceUpdateException(body, context);
        contents = __assign({ name: "ConcurrentReferenceUpdateException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1DefaultBranchCannotBeDeletedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1DefaultBranchCannotBeDeletedException(body, context);
        contents = __assign({ name: "DefaultBranchCannotBeDeletedException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1DirectoryNameConflictsWithFileNameExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1DirectoryNameConflictsWithFileNameException(body, context);
        contents = __assign({ name: "DirectoryNameConflictsWithFileNameException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1EncryptionIntegrityChecksFailedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1EncryptionIntegrityChecksFailedException(body, context);
        contents = __assign({ name: "EncryptionIntegrityChecksFailedException", $fault: "server", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1EncryptionKeyAccessDeniedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1EncryptionKeyAccessDeniedException(body, context);
        contents = __assign({ name: "EncryptionKeyAccessDeniedException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1EncryptionKeyDisabledExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1EncryptionKeyDisabledException(body, context);
        contents = __assign({ name: "EncryptionKeyDisabledException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1EncryptionKeyNotFoundExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1EncryptionKeyNotFoundException(body, context);
        contents = __assign({ name: "EncryptionKeyNotFoundException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1EncryptionKeyUnavailableExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1EncryptionKeyUnavailableException(body, context);
        contents = __assign({ name: "EncryptionKeyUnavailableException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1FileContentAndSourceFileSpecifiedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1FileContentAndSourceFileSpecifiedException(body, context);
        contents = __assign({ name: "FileContentAndSourceFileSpecifiedException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1FileContentRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1FileContentRequiredException(body, context);
        contents = __assign({ name: "FileContentRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1FileContentSizeLimitExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1FileContentSizeLimitExceededException(body, context);
        contents = __assign({ name: "FileContentSizeLimitExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1FileDoesNotExistExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1FileDoesNotExistException(body, context);
        contents = __assign({ name: "FileDoesNotExistException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1FileEntryRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1FileEntryRequiredException(body, context);
        contents = __assign({ name: "FileEntryRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1FileModeRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1FileModeRequiredException(body, context);
        contents = __assign({ name: "FileModeRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1FileNameConflictsWithDirectoryNameExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1FileNameConflictsWithDirectoryNameException(body, context);
        contents = __assign({ name: "FileNameConflictsWithDirectoryNameException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1FilePathConflictsWithSubmodulePathExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1FilePathConflictsWithSubmodulePathException(body, context);
        contents = __assign({ name: "FilePathConflictsWithSubmodulePathException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1FileTooLargeExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1FileTooLargeException(body, context);
        contents = __assign({ name: "FileTooLargeException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1FolderContentSizeLimitExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1FolderContentSizeLimitExceededException(body, context);
        contents = __assign({ name: "FolderContentSizeLimitExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1FolderDoesNotExistExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1FolderDoesNotExistException(body, context);
        contents = __assign({ name: "FolderDoesNotExistException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1IdempotencyParameterMismatchExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1IdempotencyParameterMismatchException(body, context);
        contents = __assign({ name: "IdempotencyParameterMismatchException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidActorArnExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidActorArnException(body, context);
        contents = __assign({ name: "InvalidActorArnException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidApprovalRuleContentExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidApprovalRuleContentException(body, context);
        contents = __assign({ name: "InvalidApprovalRuleContentException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidApprovalRuleNameExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidApprovalRuleNameException(body, context);
        contents = __assign({ name: "InvalidApprovalRuleNameException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidApprovalRuleTemplateContentExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidApprovalRuleTemplateContentException(body, context);
        contents = __assign({ name: "InvalidApprovalRuleTemplateContentException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidApprovalRuleTemplateDescriptionExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidApprovalRuleTemplateDescriptionException(body, context);
        contents = __assign({ name: "InvalidApprovalRuleTemplateDescriptionException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidApprovalRuleTemplateNameExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidApprovalRuleTemplateNameException(body, context);
        contents = __assign({ name: "InvalidApprovalRuleTemplateNameException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidApprovalStateExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidApprovalStateException(body, context);
        contents = __assign({ name: "InvalidApprovalStateException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidAuthorArnExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidAuthorArnException(body, context);
        contents = __assign({ name: "InvalidAuthorArnException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidBlobIdExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidBlobIdException(body, context);
        contents = __assign({ name: "InvalidBlobIdException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidBranchNameExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidBranchNameException(body, context);
        contents = __assign({ name: "InvalidBranchNameException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidClientRequestTokenExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidClientRequestTokenException(body, context);
        contents = __assign({ name: "InvalidClientRequestTokenException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidCommentIdExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidCommentIdException(body, context);
        contents = __assign({ name: "InvalidCommentIdException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidCommitExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidCommitException(body, context);
        contents = __assign({ name: "InvalidCommitException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidCommitIdExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidCommitIdException(body, context);
        contents = __assign({ name: "InvalidCommitIdException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidConflictDetailLevelExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidConflictDetailLevelException(body, context);
        contents = __assign({ name: "InvalidConflictDetailLevelException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidConflictResolutionExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidConflictResolutionException(body, context);
        contents = __assign({ name: "InvalidConflictResolutionException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidConflictResolutionStrategyExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidConflictResolutionStrategyException(body, context);
        contents = __assign({ name: "InvalidConflictResolutionStrategyException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidContinuationTokenExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidContinuationTokenException(body, context);
        contents = __assign({ name: "InvalidContinuationTokenException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidDeletionParameterExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidDeletionParameterException(body, context);
        contents = __assign({ name: "InvalidDeletionParameterException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidDescriptionExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidDescriptionException(body, context);
        contents = __assign({ name: "InvalidDescriptionException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidDestinationCommitSpecifierExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidDestinationCommitSpecifierException(body, context);
        contents = __assign({ name: "InvalidDestinationCommitSpecifierException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidEmailExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidEmailException(body, context);
        contents = __assign({ name: "InvalidEmailException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidFileLocationExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidFileLocationException(body, context);
        contents = __assign({ name: "InvalidFileLocationException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidFileModeExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidFileModeException(body, context);
        contents = __assign({ name: "InvalidFileModeException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidFilePositionExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidFilePositionException(body, context);
        contents = __assign({ name: "InvalidFilePositionException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidMaxConflictFilesExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidMaxConflictFilesException(body, context);
        contents = __assign({ name: "InvalidMaxConflictFilesException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidMaxMergeHunksExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidMaxMergeHunksException(body, context);
        contents = __assign({ name: "InvalidMaxMergeHunksException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidMaxResultsExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidMaxResultsException(body, context);
        contents = __assign({ name: "InvalidMaxResultsException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidMergeOptionExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidMergeOptionException(body, context);
        contents = __assign({ name: "InvalidMergeOptionException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidOrderExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidOrderException(body, context);
        contents = __assign({ name: "InvalidOrderException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidOverrideStatusExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidOverrideStatusException(body, context);
        contents = __assign({ name: "InvalidOverrideStatusException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidParentCommitIdExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidParentCommitIdException(body, context);
        contents = __assign({ name: "InvalidParentCommitIdException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidPathExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidPathException(body, context);
        contents = __assign({ name: "InvalidPathException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidPullRequestEventTypeExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidPullRequestEventTypeException(body, context);
        contents = __assign({ name: "InvalidPullRequestEventTypeException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidPullRequestIdExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidPullRequestIdException(body, context);
        contents = __assign({ name: "InvalidPullRequestIdException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidPullRequestStatusExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidPullRequestStatusException(body, context);
        contents = __assign({ name: "InvalidPullRequestStatusException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidPullRequestStatusUpdateExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidPullRequestStatusUpdateException(body, context);
        contents = __assign({ name: "InvalidPullRequestStatusUpdateException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidReactionUserArnExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidReactionUserArnException(body, context);
        contents = __assign({ name: "InvalidReactionUserArnException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidReactionValueExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidReactionValueException(body, context);
        contents = __assign({ name: "InvalidReactionValueException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidReferenceNameExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidReferenceNameException(body, context);
        contents = __assign({ name: "InvalidReferenceNameException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidRelativeFileVersionEnumExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidRelativeFileVersionEnumException(body, context);
        contents = __assign({ name: "InvalidRelativeFileVersionEnumException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidReplacementContentExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidReplacementContentException(body, context);
        contents = __assign({ name: "InvalidReplacementContentException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidReplacementTypeExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidReplacementTypeException(body, context);
        contents = __assign({ name: "InvalidReplacementTypeException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidRepositoryDescriptionExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidRepositoryDescriptionException(body, context);
        contents = __assign({ name: "InvalidRepositoryDescriptionException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidRepositoryNameExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidRepositoryNameException(body, context);
        contents = __assign({ name: "InvalidRepositoryNameException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidRepositoryTriggerBranchNameExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidRepositoryTriggerBranchNameException(body, context);
        contents = __assign({ name: "InvalidRepositoryTriggerBranchNameException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidRepositoryTriggerCustomDataExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidRepositoryTriggerCustomDataException(body, context);
        contents = __assign({ name: "InvalidRepositoryTriggerCustomDataException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidRepositoryTriggerDestinationArnExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidRepositoryTriggerDestinationArnException(body, context);
        contents = __assign({ name: "InvalidRepositoryTriggerDestinationArnException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidRepositoryTriggerEventsExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidRepositoryTriggerEventsException(body, context);
        contents = __assign({ name: "InvalidRepositoryTriggerEventsException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidRepositoryTriggerNameExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidRepositoryTriggerNameException(body, context);
        contents = __assign({ name: "InvalidRepositoryTriggerNameException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidRepositoryTriggerRegionExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidRepositoryTriggerRegionException(body, context);
        contents = __assign({ name: "InvalidRepositoryTriggerRegionException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidResourceArnExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidResourceArnException(body, context);
        contents = __assign({ name: "InvalidResourceArnException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidRevisionIdExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidRevisionIdException(body, context);
        contents = __assign({ name: "InvalidRevisionIdException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidRuleContentSha256ExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidRuleContentSha256Exception(body, context);
        contents = __assign({ name: "InvalidRuleContentSha256Exception", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidSortByExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidSortByException(body, context);
        contents = __assign({ name: "InvalidSortByException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidSourceCommitSpecifierExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidSourceCommitSpecifierException(body, context);
        contents = __assign({ name: "InvalidSourceCommitSpecifierException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidSystemTagUsageExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidSystemTagUsageException(body, context);
        contents = __assign({ name: "InvalidSystemTagUsageException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidTagKeysListExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidTagKeysListException(body, context);
        contents = __assign({ name: "InvalidTagKeysListException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidTagsMapExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidTagsMapException(body, context);
        contents = __assign({ name: "InvalidTagsMapException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidTargetBranchExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidTargetBranchException(body, context);
        contents = __assign({ name: "InvalidTargetBranchException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidTargetExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidTargetException(body, context);
        contents = __assign({ name: "InvalidTargetException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidTargetsExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidTargetsException(body, context);
        contents = __assign({ name: "InvalidTargetsException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1InvalidTitleExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidTitleException(body, context);
        contents = __assign({ name: "InvalidTitleException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ManualMergeRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ManualMergeRequiredException(body, context);
        contents = __assign({ name: "ManualMergeRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1MaximumBranchesExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1MaximumBranchesExceededException(body, context);
        contents = __assign({ name: "MaximumBranchesExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1MaximumConflictResolutionEntriesExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1MaximumConflictResolutionEntriesExceededException(body, context);
        contents = __assign({ name: "MaximumConflictResolutionEntriesExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1MaximumFileContentToLoadExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1MaximumFileContentToLoadExceededException(body, context);
        contents = __assign({ name: "MaximumFileContentToLoadExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1MaximumFileEntriesExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1MaximumFileEntriesExceededException(body, context);
        contents = __assign({ name: "MaximumFileEntriesExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1MaximumItemsToCompareExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1MaximumItemsToCompareExceededException(body, context);
        contents = __assign({ name: "MaximumItemsToCompareExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1MaximumNumberOfApprovalsExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1MaximumNumberOfApprovalsExceededException(body, context);
        contents = __assign({ name: "MaximumNumberOfApprovalsExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1MaximumOpenPullRequestsExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1MaximumOpenPullRequestsExceededException(body, context);
        contents = __assign({ name: "MaximumOpenPullRequestsExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1MaximumRepositoryNamesExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1MaximumRepositoryNamesExceededException(body, context);
        contents = __assign({ name: "MaximumRepositoryNamesExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1MaximumRepositoryTriggersExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1MaximumRepositoryTriggersExceededException(body, context);
        contents = __assign({ name: "MaximumRepositoryTriggersExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1MaximumRuleTemplatesAssociatedWithRepositoryExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1MaximumRuleTemplatesAssociatedWithRepositoryException(body, context);
        contents = __assign({ name: "MaximumRuleTemplatesAssociatedWithRepositoryException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1MergeOptionRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1MergeOptionRequiredException(body, context);
        contents = __assign({ name: "MergeOptionRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1MultipleConflictResolutionEntriesExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1MultipleConflictResolutionEntriesException(body, context);
        contents = __assign({ name: "MultipleConflictResolutionEntriesException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1MultipleRepositoriesInPullRequestExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1MultipleRepositoriesInPullRequestException(body, context);
        contents = __assign({ name: "MultipleRepositoriesInPullRequestException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1NameLengthExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1NameLengthExceededException(body, context);
        contents = __assign({ name: "NameLengthExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1NoChangeExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1NoChangeException(body, context);
        contents = __assign({ name: "NoChangeException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1NumberOfRulesExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1NumberOfRulesExceededException(body, context);
        contents = __assign({ name: "NumberOfRulesExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1NumberOfRuleTemplatesExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1NumberOfRuleTemplatesExceededException(body, context);
        contents = __assign({ name: "NumberOfRuleTemplatesExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1OverrideAlreadySetExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1OverrideAlreadySetException(body, context);
        contents = __assign({ name: "OverrideAlreadySetException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1OverrideStatusRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1OverrideStatusRequiredException(body, context);
        contents = __assign({ name: "OverrideStatusRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ParentCommitDoesNotExistExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ParentCommitDoesNotExistException(body, context);
        contents = __assign({ name: "ParentCommitDoesNotExistException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ParentCommitIdOutdatedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ParentCommitIdOutdatedException(body, context);
        contents = __assign({ name: "ParentCommitIdOutdatedException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ParentCommitIdRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ParentCommitIdRequiredException(body, context);
        contents = __assign({ name: "ParentCommitIdRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1PathDoesNotExistExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1PathDoesNotExistException(body, context);
        contents = __assign({ name: "PathDoesNotExistException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1PathRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1PathRequiredException(body, context);
        contents = __assign({ name: "PathRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1PullRequestAlreadyClosedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1PullRequestAlreadyClosedException(body, context);
        contents = __assign({ name: "PullRequestAlreadyClosedException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1PullRequestApprovalRulesNotSatisfiedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1PullRequestApprovalRulesNotSatisfiedException(body, context);
        contents = __assign({ name: "PullRequestApprovalRulesNotSatisfiedException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1PullRequestCannotBeApprovedByAuthorExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1PullRequestCannotBeApprovedByAuthorException(body, context);
        contents = __assign({ name: "PullRequestCannotBeApprovedByAuthorException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1PullRequestDoesNotExistExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1PullRequestDoesNotExistException(body, context);
        contents = __assign({ name: "PullRequestDoesNotExistException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1PullRequestIdRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1PullRequestIdRequiredException(body, context);
        contents = __assign({ name: "PullRequestIdRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1PullRequestStatusRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1PullRequestStatusRequiredException(body, context);
        contents = __assign({ name: "PullRequestStatusRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1PutFileEntryConflictExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1PutFileEntryConflictException(body, context);
        contents = __assign({ name: "PutFileEntryConflictException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ReactionLimitExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ReactionLimitExceededException(body, context);
        contents = __assign({ name: "ReactionLimitExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ReactionValueRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ReactionValueRequiredException(body, context);
        contents = __assign({ name: "ReactionValueRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ReferenceDoesNotExistExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ReferenceDoesNotExistException(body, context);
        contents = __assign({ name: "ReferenceDoesNotExistException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ReferenceNameRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ReferenceNameRequiredException(body, context);
        contents = __assign({ name: "ReferenceNameRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ReferenceTypeNotSupportedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ReferenceTypeNotSupportedException(body, context);
        contents = __assign({ name: "ReferenceTypeNotSupportedException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ReplacementContentRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ReplacementContentRequiredException(body, context);
        contents = __assign({ name: "ReplacementContentRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ReplacementTypeRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ReplacementTypeRequiredException(body, context);
        contents = __assign({ name: "ReplacementTypeRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1RepositoryDoesNotExistExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1RepositoryDoesNotExistException(body, context);
        contents = __assign({ name: "RepositoryDoesNotExistException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1RepositoryLimitExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1RepositoryLimitExceededException(body, context);
        contents = __assign({ name: "RepositoryLimitExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1RepositoryNameExistsExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1RepositoryNameExistsException(body, context);
        contents = __assign({ name: "RepositoryNameExistsException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1RepositoryNameRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1RepositoryNameRequiredException(body, context);
        contents = __assign({ name: "RepositoryNameRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1RepositoryNamesRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1RepositoryNamesRequiredException(body, context);
        contents = __assign({ name: "RepositoryNamesRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1RepositoryNotAssociatedWithPullRequestExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1RepositoryNotAssociatedWithPullRequestException(body, context);
        contents = __assign({ name: "RepositoryNotAssociatedWithPullRequestException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1RepositoryTriggerBranchNameListRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1RepositoryTriggerBranchNameListRequiredException(body, context);
        contents = __assign({ name: "RepositoryTriggerBranchNameListRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1RepositoryTriggerDestinationArnRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1RepositoryTriggerDestinationArnRequiredException(body, context);
        contents = __assign({ name: "RepositoryTriggerDestinationArnRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1RepositoryTriggerEventsListRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1RepositoryTriggerEventsListRequiredException(body, context);
        contents = __assign({ name: "RepositoryTriggerEventsListRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1RepositoryTriggerNameRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1RepositoryTriggerNameRequiredException(body, context);
        contents = __assign({ name: "RepositoryTriggerNameRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1RepositoryTriggersListRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1RepositoryTriggersListRequiredException(body, context);
        contents = __assign({ name: "RepositoryTriggersListRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1ResourceArnRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ResourceArnRequiredException(body, context);
        contents = __assign({ name: "ResourceArnRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1RestrictedSourceFileExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1RestrictedSourceFileException(body, context);
        contents = __assign({ name: "RestrictedSourceFileException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1RevisionIdRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1RevisionIdRequiredException(body, context);
        contents = __assign({ name: "RevisionIdRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1RevisionNotCurrentExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1RevisionNotCurrentException(body, context);
        contents = __assign({ name: "RevisionNotCurrentException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1SameFileContentExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1SameFileContentException(body, context);
        contents = __assign({ name: "SameFileContentException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1SamePathRequestExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1SamePathRequestException(body, context);
        contents = __assign({ name: "SamePathRequestException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1SourceAndDestinationAreSameExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1SourceAndDestinationAreSameException(body, context);
        contents = __assign({ name: "SourceAndDestinationAreSameException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1SourceFileOrContentRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1SourceFileOrContentRequiredException(body, context);
        contents = __assign({ name: "SourceFileOrContentRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1TagKeysListRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1TagKeysListRequiredException(body, context);
        contents = __assign({ name: "TagKeysListRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1TagPolicyExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1TagPolicyException(body, context);
        contents = __assign({ name: "TagPolicyException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1TagsMapRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1TagsMapRequiredException(body, context);
        contents = __assign({ name: "TagsMapRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1TargetRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1TargetRequiredException(body, context);
        contents = __assign({ name: "TargetRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1TargetsRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1TargetsRequiredException(body, context);
        contents = __assign({ name: "TargetsRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1TipOfSourceReferenceIsDifferentExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1TipOfSourceReferenceIsDifferentException(body, context);
        contents = __assign({ name: "TipOfSourceReferenceIsDifferentException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1TipsDivergenceExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1TipsDivergenceExceededException(body, context);
        contents = __assign({ name: "TipsDivergenceExceededException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1TitleRequiredExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1TitleRequiredException(body, context);
        contents = __assign({ name: "TitleRequiredException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_json1_1TooManyTagsExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, contents;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1TooManyTagsException(body, context);
        contents = __assign({ name: "TooManyTagsException", $fault: "client", $metadata: deserializeMetadata(parsedOutput) }, deserialized);
        return [2 /*return*/, contents];
    });
}); };
var serializeAws_json1_1AssociateApprovalRuleTemplateWithRepositoryInput = function (input, context) {
    return __assign(__assign({}, (input.approvalRuleTemplateName !== undefined &&
        input.approvalRuleTemplateName !== null && { approvalRuleTemplateName: input.approvalRuleTemplateName })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName }));
};
var serializeAws_json1_1BatchAssociateApprovalRuleTemplateWithRepositoriesInput = function (input, context) {
    return __assign(__assign({}, (input.approvalRuleTemplateName !== undefined &&
        input.approvalRuleTemplateName !== null && { approvalRuleTemplateName: input.approvalRuleTemplateName })), (input.repositoryNames !== undefined &&
        input.repositoryNames !== null && {
        repositoryNames: serializeAws_json1_1RepositoryNameList(input.repositoryNames, context),
    }));
};
var serializeAws_json1_1BatchDescribeMergeConflictsInput = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.conflictDetailLevel !== undefined &&
        input.conflictDetailLevel !== null && { conflictDetailLevel: input.conflictDetailLevel })), (input.conflictResolutionStrategy !== undefined &&
        input.conflictResolutionStrategy !== null && { conflictResolutionStrategy: input.conflictResolutionStrategy })), (input.destinationCommitSpecifier !== undefined &&
        input.destinationCommitSpecifier !== null && { destinationCommitSpecifier: input.destinationCommitSpecifier })), (input.filePaths !== undefined &&
        input.filePaths !== null && { filePaths: serializeAws_json1_1FilePaths(input.filePaths, context) })), (input.maxConflictFiles !== undefined &&
        input.maxConflictFiles !== null && { maxConflictFiles: input.maxConflictFiles })), (input.maxMergeHunks !== undefined && input.maxMergeHunks !== null && { maxMergeHunks: input.maxMergeHunks })), (input.mergeOption !== undefined && input.mergeOption !== null && { mergeOption: input.mergeOption })), (input.nextToken !== undefined && input.nextToken !== null && { nextToken: input.nextToken })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName })), (input.sourceCommitSpecifier !== undefined &&
        input.sourceCommitSpecifier !== null && { sourceCommitSpecifier: input.sourceCommitSpecifier }));
};
var serializeAws_json1_1BatchDisassociateApprovalRuleTemplateFromRepositoriesInput = function (input, context) {
    return __assign(__assign({}, (input.approvalRuleTemplateName !== undefined &&
        input.approvalRuleTemplateName !== null && { approvalRuleTemplateName: input.approvalRuleTemplateName })), (input.repositoryNames !== undefined &&
        input.repositoryNames !== null && {
        repositoryNames: serializeAws_json1_1RepositoryNameList(input.repositoryNames, context),
    }));
};
var serializeAws_json1_1BatchGetCommitsInput = function (input, context) {
    return __assign(__assign({}, (input.commitIds !== undefined &&
        input.commitIds !== null && { commitIds: serializeAws_json1_1CommitIdsInputList(input.commitIds, context) })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName }));
};
var serializeAws_json1_1BatchGetRepositoriesInput = function (input, context) {
    return __assign({}, (input.repositoryNames !== undefined &&
        input.repositoryNames !== null && {
        repositoryNames: serializeAws_json1_1RepositoryNameList(input.repositoryNames, context),
    }));
};
var serializeAws_json1_1BranchNameList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
var serializeAws_json1_1CommitIdsInputList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
var serializeAws_json1_1ConflictResolution = function (input, context) {
    return __assign(__assign(__assign({}, (input.deleteFiles !== undefined &&
        input.deleteFiles !== null && { deleteFiles: serializeAws_json1_1DeleteFileEntries(input.deleteFiles, context) })), (input.replaceContents !== undefined &&
        input.replaceContents !== null && {
        replaceContents: serializeAws_json1_1ReplaceContentEntries(input.replaceContents, context),
    })), (input.setFileModes !== undefined &&
        input.setFileModes !== null && {
        setFileModes: serializeAws_json1_1SetFileModeEntries(input.setFileModes, context),
    }));
};
var serializeAws_json1_1CreateApprovalRuleTemplateInput = function (input, context) {
    return __assign(__assign(__assign({}, (input.approvalRuleTemplateContent !== undefined &&
        input.approvalRuleTemplateContent !== null && { approvalRuleTemplateContent: input.approvalRuleTemplateContent })), (input.approvalRuleTemplateDescription !== undefined &&
        input.approvalRuleTemplateDescription !== null && {
        approvalRuleTemplateDescription: input.approvalRuleTemplateDescription,
    })), (input.approvalRuleTemplateName !== undefined &&
        input.approvalRuleTemplateName !== null && { approvalRuleTemplateName: input.approvalRuleTemplateName }));
};
var serializeAws_json1_1CreateBranchInput = function (input, context) {
    return __assign(__assign(__assign({}, (input.branchName !== undefined && input.branchName !== null && { branchName: input.branchName })), (input.commitId !== undefined && input.commitId !== null && { commitId: input.commitId })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName }));
};
var serializeAws_json1_1CreateCommitInput = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.authorName !== undefined && input.authorName !== null && { authorName: input.authorName })), (input.branchName !== undefined && input.branchName !== null && { branchName: input.branchName })), (input.commitMessage !== undefined && input.commitMessage !== null && { commitMessage: input.commitMessage })), (input.deleteFiles !== undefined &&
        input.deleteFiles !== null && { deleteFiles: serializeAws_json1_1DeleteFileEntries(input.deleteFiles, context) })), (input.email !== undefined && input.email !== null && { email: input.email })), (input.keepEmptyFolders !== undefined &&
        input.keepEmptyFolders !== null && { keepEmptyFolders: input.keepEmptyFolders })), (input.parentCommitId !== undefined &&
        input.parentCommitId !== null && { parentCommitId: input.parentCommitId })), (input.putFiles !== undefined &&
        input.putFiles !== null && { putFiles: serializeAws_json1_1PutFileEntries(input.putFiles, context) })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName })), (input.setFileModes !== undefined &&
        input.setFileModes !== null && {
        setFileModes: serializeAws_json1_1SetFileModeEntries(input.setFileModes, context),
    }));
};
var serializeAws_json1_1CreatePullRequestApprovalRuleInput = function (input, context) {
    return __assign(__assign(__assign({}, (input.approvalRuleContent !== undefined &&
        input.approvalRuleContent !== null && { approvalRuleContent: input.approvalRuleContent })), (input.approvalRuleName !== undefined &&
        input.approvalRuleName !== null && { approvalRuleName: input.approvalRuleName })), (input.pullRequestId !== undefined && input.pullRequestId !== null && { pullRequestId: input.pullRequestId }));
};
var serializeAws_json1_1CreatePullRequestInput = function (input, context) {
    var _a;
    return __assign(__assign(__assign({ clientRequestToken: (_a = input.clientRequestToken) !== null && _a !== void 0 ? _a : generateIdempotencyToken() }, (input.description !== undefined && input.description !== null && { description: input.description })), (input.targets !== undefined &&
        input.targets !== null && { targets: serializeAws_json1_1TargetList(input.targets, context) })), (input.title !== undefined && input.title !== null && { title: input.title }));
};
var serializeAws_json1_1CreateRepositoryInput = function (input, context) {
    return __assign(__assign(__assign({}, (input.repositoryDescription !== undefined &&
        input.repositoryDescription !== null && { repositoryDescription: input.repositoryDescription })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName })), (input.tags !== undefined && input.tags !== null && { tags: serializeAws_json1_1TagsMap(input.tags, context) }));
};
var serializeAws_json1_1CreateUnreferencedMergeCommitInput = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.authorName !== undefined && input.authorName !== null && { authorName: input.authorName })), (input.commitMessage !== undefined && input.commitMessage !== null && { commitMessage: input.commitMessage })), (input.conflictDetailLevel !== undefined &&
        input.conflictDetailLevel !== null && { conflictDetailLevel: input.conflictDetailLevel })), (input.conflictResolution !== undefined &&
        input.conflictResolution !== null && {
        conflictResolution: serializeAws_json1_1ConflictResolution(input.conflictResolution, context),
    })), (input.conflictResolutionStrategy !== undefined &&
        input.conflictResolutionStrategy !== null && { conflictResolutionStrategy: input.conflictResolutionStrategy })), (input.destinationCommitSpecifier !== undefined &&
        input.destinationCommitSpecifier !== null && { destinationCommitSpecifier: input.destinationCommitSpecifier })), (input.email !== undefined && input.email !== null && { email: input.email })), (input.keepEmptyFolders !== undefined &&
        input.keepEmptyFolders !== null && { keepEmptyFolders: input.keepEmptyFolders })), (input.mergeOption !== undefined && input.mergeOption !== null && { mergeOption: input.mergeOption })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName })), (input.sourceCommitSpecifier !== undefined &&
        input.sourceCommitSpecifier !== null && { sourceCommitSpecifier: input.sourceCommitSpecifier }));
};
var serializeAws_json1_1DeleteApprovalRuleTemplateInput = function (input, context) {
    return __assign({}, (input.approvalRuleTemplateName !== undefined &&
        input.approvalRuleTemplateName !== null && { approvalRuleTemplateName: input.approvalRuleTemplateName }));
};
var serializeAws_json1_1DeleteBranchInput = function (input, context) {
    return __assign(__assign({}, (input.branchName !== undefined && input.branchName !== null && { branchName: input.branchName })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName }));
};
var serializeAws_json1_1DeleteCommentContentInput = function (input, context) {
    return __assign({}, (input.commentId !== undefined && input.commentId !== null && { commentId: input.commentId }));
};
var serializeAws_json1_1DeleteFileEntries = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1DeleteFileEntry(entry, context);
    });
};
var serializeAws_json1_1DeleteFileEntry = function (input, context) {
    return __assign({}, (input.filePath !== undefined && input.filePath !== null && { filePath: input.filePath }));
};
var serializeAws_json1_1DeleteFileInput = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.branchName !== undefined && input.branchName !== null && { branchName: input.branchName })), (input.commitMessage !== undefined && input.commitMessage !== null && { commitMessage: input.commitMessage })), (input.email !== undefined && input.email !== null && { email: input.email })), (input.filePath !== undefined && input.filePath !== null && { filePath: input.filePath })), (input.keepEmptyFolders !== undefined &&
        input.keepEmptyFolders !== null && { keepEmptyFolders: input.keepEmptyFolders })), (input.name !== undefined && input.name !== null && { name: input.name })), (input.parentCommitId !== undefined &&
        input.parentCommitId !== null && { parentCommitId: input.parentCommitId })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName }));
};
var serializeAws_json1_1DeletePullRequestApprovalRuleInput = function (input, context) {
    return __assign(__assign({}, (input.approvalRuleName !== undefined &&
        input.approvalRuleName !== null && { approvalRuleName: input.approvalRuleName })), (input.pullRequestId !== undefined && input.pullRequestId !== null && { pullRequestId: input.pullRequestId }));
};
var serializeAws_json1_1DeleteRepositoryInput = function (input, context) {
    return __assign({}, (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName }));
};
var serializeAws_json1_1DescribeMergeConflictsInput = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.conflictDetailLevel !== undefined &&
        input.conflictDetailLevel !== null && { conflictDetailLevel: input.conflictDetailLevel })), (input.conflictResolutionStrategy !== undefined &&
        input.conflictResolutionStrategy !== null && { conflictResolutionStrategy: input.conflictResolutionStrategy })), (input.destinationCommitSpecifier !== undefined &&
        input.destinationCommitSpecifier !== null && { destinationCommitSpecifier: input.destinationCommitSpecifier })), (input.filePath !== undefined && input.filePath !== null && { filePath: input.filePath })), (input.maxMergeHunks !== undefined && input.maxMergeHunks !== null && { maxMergeHunks: input.maxMergeHunks })), (input.mergeOption !== undefined && input.mergeOption !== null && { mergeOption: input.mergeOption })), (input.nextToken !== undefined && input.nextToken !== null && { nextToken: input.nextToken })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName })), (input.sourceCommitSpecifier !== undefined &&
        input.sourceCommitSpecifier !== null && { sourceCommitSpecifier: input.sourceCommitSpecifier }));
};
var serializeAws_json1_1DescribePullRequestEventsInput = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign({}, (input.actorArn !== undefined && input.actorArn !== null && { actorArn: input.actorArn })), (input.maxResults !== undefined && input.maxResults !== null && { maxResults: input.maxResults })), (input.nextToken !== undefined && input.nextToken !== null && { nextToken: input.nextToken })), (input.pullRequestEventType !== undefined &&
        input.pullRequestEventType !== null && { pullRequestEventType: input.pullRequestEventType })), (input.pullRequestId !== undefined && input.pullRequestId !== null && { pullRequestId: input.pullRequestId }));
};
var serializeAws_json1_1DisassociateApprovalRuleTemplateFromRepositoryInput = function (input, context) {
    return __assign(__assign({}, (input.approvalRuleTemplateName !== undefined &&
        input.approvalRuleTemplateName !== null && { approvalRuleTemplateName: input.approvalRuleTemplateName })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName }));
};
var serializeAws_json1_1EvaluatePullRequestApprovalRulesInput = function (input, context) {
    return __assign(__assign({}, (input.pullRequestId !== undefined && input.pullRequestId !== null && { pullRequestId: input.pullRequestId })), (input.revisionId !== undefined && input.revisionId !== null && { revisionId: input.revisionId }));
};
var serializeAws_json1_1FilePaths = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
var serializeAws_json1_1GetApprovalRuleTemplateInput = function (input, context) {
    return __assign({}, (input.approvalRuleTemplateName !== undefined &&
        input.approvalRuleTemplateName !== null && { approvalRuleTemplateName: input.approvalRuleTemplateName }));
};
var serializeAws_json1_1GetBlobInput = function (input, context) {
    return __assign(__assign({}, (input.blobId !== undefined && input.blobId !== null && { blobId: input.blobId })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName }));
};
var serializeAws_json1_1GetBranchInput = function (input, context) {
    return __assign(__assign({}, (input.branchName !== undefined && input.branchName !== null && { branchName: input.branchName })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName }));
};
var serializeAws_json1_1GetCommentInput = function (input, context) {
    return __assign({}, (input.commentId !== undefined && input.commentId !== null && { commentId: input.commentId }));
};
var serializeAws_json1_1GetCommentReactionsInput = function (input, context) {
    return __assign(__assign(__assign(__assign({}, (input.commentId !== undefined && input.commentId !== null && { commentId: input.commentId })), (input.maxResults !== undefined && input.maxResults !== null && { maxResults: input.maxResults })), (input.nextToken !== undefined && input.nextToken !== null && { nextToken: input.nextToken })), (input.reactionUserArn !== undefined &&
        input.reactionUserArn !== null && { reactionUserArn: input.reactionUserArn }));
};
var serializeAws_json1_1GetCommentsForComparedCommitInput = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign({}, (input.afterCommitId !== undefined && input.afterCommitId !== null && { afterCommitId: input.afterCommitId })), (input.beforeCommitId !== undefined &&
        input.beforeCommitId !== null && { beforeCommitId: input.beforeCommitId })), (input.maxResults !== undefined && input.maxResults !== null && { maxResults: input.maxResults })), (input.nextToken !== undefined && input.nextToken !== null && { nextToken: input.nextToken })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName }));
};
var serializeAws_json1_1GetCommentsForPullRequestInput = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign({}, (input.afterCommitId !== undefined && input.afterCommitId !== null && { afterCommitId: input.afterCommitId })), (input.beforeCommitId !== undefined &&
        input.beforeCommitId !== null && { beforeCommitId: input.beforeCommitId })), (input.maxResults !== undefined && input.maxResults !== null && { maxResults: input.maxResults })), (input.nextToken !== undefined && input.nextToken !== null && { nextToken: input.nextToken })), (input.pullRequestId !== undefined && input.pullRequestId !== null && { pullRequestId: input.pullRequestId })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName }));
};
var serializeAws_json1_1GetCommitInput = function (input, context) {
    return __assign(__assign({}, (input.commitId !== undefined && input.commitId !== null && { commitId: input.commitId })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName }));
};
var serializeAws_json1_1GetDifferencesInput = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults })), (input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken })), (input.afterCommitSpecifier !== undefined &&
        input.afterCommitSpecifier !== null && { afterCommitSpecifier: input.afterCommitSpecifier })), (input.afterPath !== undefined && input.afterPath !== null && { afterPath: input.afterPath })), (input.beforeCommitSpecifier !== undefined &&
        input.beforeCommitSpecifier !== null && { beforeCommitSpecifier: input.beforeCommitSpecifier })), (input.beforePath !== undefined && input.beforePath !== null && { beforePath: input.beforePath })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName }));
};
var serializeAws_json1_1GetFileInput = function (input, context) {
    return __assign(__assign(__assign({}, (input.commitSpecifier !== undefined &&
        input.commitSpecifier !== null && { commitSpecifier: input.commitSpecifier })), (input.filePath !== undefined && input.filePath !== null && { filePath: input.filePath })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName }));
};
var serializeAws_json1_1GetFolderInput = function (input, context) {
    return __assign(__assign(__assign({}, (input.commitSpecifier !== undefined &&
        input.commitSpecifier !== null && { commitSpecifier: input.commitSpecifier })), (input.folderPath !== undefined && input.folderPath !== null && { folderPath: input.folderPath })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName }));
};
var serializeAws_json1_1GetMergeCommitInput = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign({}, (input.conflictDetailLevel !== undefined &&
        input.conflictDetailLevel !== null && { conflictDetailLevel: input.conflictDetailLevel })), (input.conflictResolutionStrategy !== undefined &&
        input.conflictResolutionStrategy !== null && { conflictResolutionStrategy: input.conflictResolutionStrategy })), (input.destinationCommitSpecifier !== undefined &&
        input.destinationCommitSpecifier !== null && { destinationCommitSpecifier: input.destinationCommitSpecifier })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName })), (input.sourceCommitSpecifier !== undefined &&
        input.sourceCommitSpecifier !== null && { sourceCommitSpecifier: input.sourceCommitSpecifier }));
};
var serializeAws_json1_1GetMergeConflictsInput = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.conflictDetailLevel !== undefined &&
        input.conflictDetailLevel !== null && { conflictDetailLevel: input.conflictDetailLevel })), (input.conflictResolutionStrategy !== undefined &&
        input.conflictResolutionStrategy !== null && { conflictResolutionStrategy: input.conflictResolutionStrategy })), (input.destinationCommitSpecifier !== undefined &&
        input.destinationCommitSpecifier !== null && { destinationCommitSpecifier: input.destinationCommitSpecifier })), (input.maxConflictFiles !== undefined &&
        input.maxConflictFiles !== null && { maxConflictFiles: input.maxConflictFiles })), (input.mergeOption !== undefined && input.mergeOption !== null && { mergeOption: input.mergeOption })), (input.nextToken !== undefined && input.nextToken !== null && { nextToken: input.nextToken })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName })), (input.sourceCommitSpecifier !== undefined &&
        input.sourceCommitSpecifier !== null && { sourceCommitSpecifier: input.sourceCommitSpecifier }));
};
var serializeAws_json1_1GetMergeOptionsInput = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign({}, (input.conflictDetailLevel !== undefined &&
        input.conflictDetailLevel !== null && { conflictDetailLevel: input.conflictDetailLevel })), (input.conflictResolutionStrategy !== undefined &&
        input.conflictResolutionStrategy !== null && { conflictResolutionStrategy: input.conflictResolutionStrategy })), (input.destinationCommitSpecifier !== undefined &&
        input.destinationCommitSpecifier !== null && { destinationCommitSpecifier: input.destinationCommitSpecifier })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName })), (input.sourceCommitSpecifier !== undefined &&
        input.sourceCommitSpecifier !== null && { sourceCommitSpecifier: input.sourceCommitSpecifier }));
};
var serializeAws_json1_1GetPullRequestApprovalStatesInput = function (input, context) {
    return __assign(__assign({}, (input.pullRequestId !== undefined && input.pullRequestId !== null && { pullRequestId: input.pullRequestId })), (input.revisionId !== undefined && input.revisionId !== null && { revisionId: input.revisionId }));
};
var serializeAws_json1_1GetPullRequestInput = function (input, context) {
    return __assign({}, (input.pullRequestId !== undefined && input.pullRequestId !== null && { pullRequestId: input.pullRequestId }));
};
var serializeAws_json1_1GetPullRequestOverrideStateInput = function (input, context) {
    return __assign(__assign({}, (input.pullRequestId !== undefined && input.pullRequestId !== null && { pullRequestId: input.pullRequestId })), (input.revisionId !== undefined && input.revisionId !== null && { revisionId: input.revisionId }));
};
var serializeAws_json1_1GetRepositoryInput = function (input, context) {
    return __assign({}, (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName }));
};
var serializeAws_json1_1GetRepositoryTriggersInput = function (input, context) {
    return __assign({}, (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName }));
};
var serializeAws_json1_1ListApprovalRuleTemplatesInput = function (input, context) {
    return __assign(__assign({}, (input.maxResults !== undefined && input.maxResults !== null && { maxResults: input.maxResults })), (input.nextToken !== undefined && input.nextToken !== null && { nextToken: input.nextToken }));
};
var serializeAws_json1_1ListAssociatedApprovalRuleTemplatesForRepositoryInput = function (input, context) {
    return __assign(__assign(__assign({}, (input.maxResults !== undefined && input.maxResults !== null && { maxResults: input.maxResults })), (input.nextToken !== undefined && input.nextToken !== null && { nextToken: input.nextToken })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName }));
};
var serializeAws_json1_1ListBranchesInput = function (input, context) {
    return __assign(__assign({}, (input.nextToken !== undefined && input.nextToken !== null && { nextToken: input.nextToken })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName }));
};
var serializeAws_json1_1ListPullRequestsInput = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign({}, (input.authorArn !== undefined && input.authorArn !== null && { authorArn: input.authorArn })), (input.maxResults !== undefined && input.maxResults !== null && { maxResults: input.maxResults })), (input.nextToken !== undefined && input.nextToken !== null && { nextToken: input.nextToken })), (input.pullRequestStatus !== undefined &&
        input.pullRequestStatus !== null && { pullRequestStatus: input.pullRequestStatus })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName }));
};
var serializeAws_json1_1ListRepositoriesForApprovalRuleTemplateInput = function (input, context) {
    return __assign(__assign(__assign({}, (input.approvalRuleTemplateName !== undefined &&
        input.approvalRuleTemplateName !== null && { approvalRuleTemplateName: input.approvalRuleTemplateName })), (input.maxResults !== undefined && input.maxResults !== null && { maxResults: input.maxResults })), (input.nextToken !== undefined && input.nextToken !== null && { nextToken: input.nextToken }));
};
var serializeAws_json1_1ListRepositoriesInput = function (input, context) {
    return __assign(__assign(__assign({}, (input.nextToken !== undefined && input.nextToken !== null && { nextToken: input.nextToken })), (input.order !== undefined && input.order !== null && { order: input.order })), (input.sortBy !== undefined && input.sortBy !== null && { sortBy: input.sortBy }));
};
var serializeAws_json1_1ListTagsForResourceInput = function (input, context) {
    return __assign(__assign({}, (input.nextToken !== undefined && input.nextToken !== null && { nextToken: input.nextToken })), (input.resourceArn !== undefined && input.resourceArn !== null && { resourceArn: input.resourceArn }));
};
var serializeAws_json1_1Location = function (input, context) {
    return __assign(__assign(__assign({}, (input.filePath !== undefined && input.filePath !== null && { filePath: input.filePath })), (input.filePosition !== undefined && input.filePosition !== null && { filePosition: input.filePosition })), (input.relativeFileVersion !== undefined &&
        input.relativeFileVersion !== null && { relativeFileVersion: input.relativeFileVersion }));
};
var serializeAws_json1_1MergeBranchesByFastForwardInput = function (input, context) {
    return __assign(__assign(__assign(__assign({}, (input.destinationCommitSpecifier !== undefined &&
        input.destinationCommitSpecifier !== null && { destinationCommitSpecifier: input.destinationCommitSpecifier })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName })), (input.sourceCommitSpecifier !== undefined &&
        input.sourceCommitSpecifier !== null && { sourceCommitSpecifier: input.sourceCommitSpecifier })), (input.targetBranch !== undefined && input.targetBranch !== null && { targetBranch: input.targetBranch }));
};
var serializeAws_json1_1MergeBranchesBySquashInput = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.authorName !== undefined && input.authorName !== null && { authorName: input.authorName })), (input.commitMessage !== undefined && input.commitMessage !== null && { commitMessage: input.commitMessage })), (input.conflictDetailLevel !== undefined &&
        input.conflictDetailLevel !== null && { conflictDetailLevel: input.conflictDetailLevel })), (input.conflictResolution !== undefined &&
        input.conflictResolution !== null && {
        conflictResolution: serializeAws_json1_1ConflictResolution(input.conflictResolution, context),
    })), (input.conflictResolutionStrategy !== undefined &&
        input.conflictResolutionStrategy !== null && { conflictResolutionStrategy: input.conflictResolutionStrategy })), (input.destinationCommitSpecifier !== undefined &&
        input.destinationCommitSpecifier !== null && { destinationCommitSpecifier: input.destinationCommitSpecifier })), (input.email !== undefined && input.email !== null && { email: input.email })), (input.keepEmptyFolders !== undefined &&
        input.keepEmptyFolders !== null && { keepEmptyFolders: input.keepEmptyFolders })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName })), (input.sourceCommitSpecifier !== undefined &&
        input.sourceCommitSpecifier !== null && { sourceCommitSpecifier: input.sourceCommitSpecifier })), (input.targetBranch !== undefined && input.targetBranch !== null && { targetBranch: input.targetBranch }));
};
var serializeAws_json1_1MergeBranchesByThreeWayInput = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.authorName !== undefined && input.authorName !== null && { authorName: input.authorName })), (input.commitMessage !== undefined && input.commitMessage !== null && { commitMessage: input.commitMessage })), (input.conflictDetailLevel !== undefined &&
        input.conflictDetailLevel !== null && { conflictDetailLevel: input.conflictDetailLevel })), (input.conflictResolution !== undefined &&
        input.conflictResolution !== null && {
        conflictResolution: serializeAws_json1_1ConflictResolution(input.conflictResolution, context),
    })), (input.conflictResolutionStrategy !== undefined &&
        input.conflictResolutionStrategy !== null && { conflictResolutionStrategy: input.conflictResolutionStrategy })), (input.destinationCommitSpecifier !== undefined &&
        input.destinationCommitSpecifier !== null && { destinationCommitSpecifier: input.destinationCommitSpecifier })), (input.email !== undefined && input.email !== null && { email: input.email })), (input.keepEmptyFolders !== undefined &&
        input.keepEmptyFolders !== null && { keepEmptyFolders: input.keepEmptyFolders })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName })), (input.sourceCommitSpecifier !== undefined &&
        input.sourceCommitSpecifier !== null && { sourceCommitSpecifier: input.sourceCommitSpecifier })), (input.targetBranch !== undefined && input.targetBranch !== null && { targetBranch: input.targetBranch }));
};
var serializeAws_json1_1MergePullRequestByFastForwardInput = function (input, context) {
    return __assign(__assign(__assign({}, (input.pullRequestId !== undefined && input.pullRequestId !== null && { pullRequestId: input.pullRequestId })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName })), (input.sourceCommitId !== undefined &&
        input.sourceCommitId !== null && { sourceCommitId: input.sourceCommitId }));
};
var serializeAws_json1_1MergePullRequestBySquashInput = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.authorName !== undefined && input.authorName !== null && { authorName: input.authorName })), (input.commitMessage !== undefined && input.commitMessage !== null && { commitMessage: input.commitMessage })), (input.conflictDetailLevel !== undefined &&
        input.conflictDetailLevel !== null && { conflictDetailLevel: input.conflictDetailLevel })), (input.conflictResolution !== undefined &&
        input.conflictResolution !== null && {
        conflictResolution: serializeAws_json1_1ConflictResolution(input.conflictResolution, context),
    })), (input.conflictResolutionStrategy !== undefined &&
        input.conflictResolutionStrategy !== null && { conflictResolutionStrategy: input.conflictResolutionStrategy })), (input.email !== undefined && input.email !== null && { email: input.email })), (input.keepEmptyFolders !== undefined &&
        input.keepEmptyFolders !== null && { keepEmptyFolders: input.keepEmptyFolders })), (input.pullRequestId !== undefined && input.pullRequestId !== null && { pullRequestId: input.pullRequestId })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName })), (input.sourceCommitId !== undefined &&
        input.sourceCommitId !== null && { sourceCommitId: input.sourceCommitId }));
};
var serializeAws_json1_1MergePullRequestByThreeWayInput = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.authorName !== undefined && input.authorName !== null && { authorName: input.authorName })), (input.commitMessage !== undefined && input.commitMessage !== null && { commitMessage: input.commitMessage })), (input.conflictDetailLevel !== undefined &&
        input.conflictDetailLevel !== null && { conflictDetailLevel: input.conflictDetailLevel })), (input.conflictResolution !== undefined &&
        input.conflictResolution !== null && {
        conflictResolution: serializeAws_json1_1ConflictResolution(input.conflictResolution, context),
    })), (input.conflictResolutionStrategy !== undefined &&
        input.conflictResolutionStrategy !== null && { conflictResolutionStrategy: input.conflictResolutionStrategy })), (input.email !== undefined && input.email !== null && { email: input.email })), (input.keepEmptyFolders !== undefined &&
        input.keepEmptyFolders !== null && { keepEmptyFolders: input.keepEmptyFolders })), (input.pullRequestId !== undefined && input.pullRequestId !== null && { pullRequestId: input.pullRequestId })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName })), (input.sourceCommitId !== undefined &&
        input.sourceCommitId !== null && { sourceCommitId: input.sourceCommitId }));
};
var serializeAws_json1_1OverridePullRequestApprovalRulesInput = function (input, context) {
    return __assign(__assign(__assign({}, (input.overrideStatus !== undefined &&
        input.overrideStatus !== null && { overrideStatus: input.overrideStatus })), (input.pullRequestId !== undefined && input.pullRequestId !== null && { pullRequestId: input.pullRequestId })), (input.revisionId !== undefined && input.revisionId !== null && { revisionId: input.revisionId }));
};
var serializeAws_json1_1PostCommentForComparedCommitInput = function (input, context) {
    var _a;
    return __assign(__assign(__assign(__assign(__assign(__assign({}, (input.afterCommitId !== undefined && input.afterCommitId !== null && { afterCommitId: input.afterCommitId })), (input.beforeCommitId !== undefined &&
        input.beforeCommitId !== null && { beforeCommitId: input.beforeCommitId })), { clientRequestToken: (_a = input.clientRequestToken) !== null && _a !== void 0 ? _a : generateIdempotencyToken() }), (input.content !== undefined && input.content !== null && { content: input.content })), (input.location !== undefined &&
        input.location !== null && { location: serializeAws_json1_1Location(input.location, context) })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName }));
};
var serializeAws_json1_1PostCommentForPullRequestInput = function (input, context) {
    var _a;
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.afterCommitId !== undefined && input.afterCommitId !== null && { afterCommitId: input.afterCommitId })), (input.beforeCommitId !== undefined &&
        input.beforeCommitId !== null && { beforeCommitId: input.beforeCommitId })), { clientRequestToken: (_a = input.clientRequestToken) !== null && _a !== void 0 ? _a : generateIdempotencyToken() }), (input.content !== undefined && input.content !== null && { content: input.content })), (input.location !== undefined &&
        input.location !== null && { location: serializeAws_json1_1Location(input.location, context) })), (input.pullRequestId !== undefined && input.pullRequestId !== null && { pullRequestId: input.pullRequestId })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName }));
};
var serializeAws_json1_1PostCommentReplyInput = function (input, context) {
    var _a;
    return __assign(__assign({ clientRequestToken: (_a = input.clientRequestToken) !== null && _a !== void 0 ? _a : generateIdempotencyToken() }, (input.content !== undefined && input.content !== null && { content: input.content })), (input.inReplyTo !== undefined && input.inReplyTo !== null && { inReplyTo: input.inReplyTo }));
};
var serializeAws_json1_1PutCommentReactionInput = function (input, context) {
    return __assign(__assign({}, (input.commentId !== undefined && input.commentId !== null && { commentId: input.commentId })), (input.reactionValue !== undefined && input.reactionValue !== null && { reactionValue: input.reactionValue }));
};
var serializeAws_json1_1PutFileEntries = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1PutFileEntry(entry, context);
    });
};
var serializeAws_json1_1PutFileEntry = function (input, context) {
    return __assign(__assign(__assign(__assign({}, (input.fileContent !== undefined &&
        input.fileContent !== null && { fileContent: context.base64Encoder(input.fileContent) })), (input.fileMode !== undefined && input.fileMode !== null && { fileMode: input.fileMode })), (input.filePath !== undefined && input.filePath !== null && { filePath: input.filePath })), (input.sourceFile !== undefined &&
        input.sourceFile !== null && { sourceFile: serializeAws_json1_1SourceFileSpecifier(input.sourceFile, context) }));
};
var serializeAws_json1_1PutFileInput = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.branchName !== undefined && input.branchName !== null && { branchName: input.branchName })), (input.commitMessage !== undefined && input.commitMessage !== null && { commitMessage: input.commitMessage })), (input.email !== undefined && input.email !== null && { email: input.email })), (input.fileContent !== undefined &&
        input.fileContent !== null && { fileContent: context.base64Encoder(input.fileContent) })), (input.fileMode !== undefined && input.fileMode !== null && { fileMode: input.fileMode })), (input.filePath !== undefined && input.filePath !== null && { filePath: input.filePath })), (input.name !== undefined && input.name !== null && { name: input.name })), (input.parentCommitId !== undefined &&
        input.parentCommitId !== null && { parentCommitId: input.parentCommitId })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName }));
};
var serializeAws_json1_1PutRepositoryTriggersInput = function (input, context) {
    return __assign(__assign({}, (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName })), (input.triggers !== undefined &&
        input.triggers !== null && { triggers: serializeAws_json1_1RepositoryTriggersList(input.triggers, context) }));
};
var serializeAws_json1_1ReplaceContentEntries = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1ReplaceContentEntry(entry, context);
    });
};
var serializeAws_json1_1ReplaceContentEntry = function (input, context) {
    return __assign(__assign(__assign(__assign({}, (input.content !== undefined && input.content !== null && { content: context.base64Encoder(input.content) })), (input.fileMode !== undefined && input.fileMode !== null && { fileMode: input.fileMode })), (input.filePath !== undefined && input.filePath !== null && { filePath: input.filePath })), (input.replacementType !== undefined &&
        input.replacementType !== null && { replacementType: input.replacementType }));
};
var serializeAws_json1_1RepositoryNameList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
var serializeAws_json1_1RepositoryTrigger = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign({}, (input.branches !== undefined &&
        input.branches !== null && { branches: serializeAws_json1_1BranchNameList(input.branches, context) })), (input.customData !== undefined && input.customData !== null && { customData: input.customData })), (input.destinationArn !== undefined &&
        input.destinationArn !== null && { destinationArn: input.destinationArn })), (input.events !== undefined &&
        input.events !== null && { events: serializeAws_json1_1RepositoryTriggerEventList(input.events, context) })), (input.name !== undefined && input.name !== null && { name: input.name }));
};
var serializeAws_json1_1RepositoryTriggerEventList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
var serializeAws_json1_1RepositoryTriggersList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1RepositoryTrigger(entry, context);
    });
};
var serializeAws_json1_1SetFileModeEntries = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1SetFileModeEntry(entry, context);
    });
};
var serializeAws_json1_1SetFileModeEntry = function (input, context) {
    return __assign(__assign({}, (input.fileMode !== undefined && input.fileMode !== null && { fileMode: input.fileMode })), (input.filePath !== undefined && input.filePath !== null && { filePath: input.filePath }));
};
var serializeAws_json1_1SourceFileSpecifier = function (input, context) {
    return __assign(__assign({}, (input.filePath !== undefined && input.filePath !== null && { filePath: input.filePath })), (input.isMove !== undefined && input.isMove !== null && { isMove: input.isMove }));
};
var serializeAws_json1_1TagKeysList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
var serializeAws_json1_1TagResourceInput = function (input, context) {
    return __assign(__assign({}, (input.resourceArn !== undefined && input.resourceArn !== null && { resourceArn: input.resourceArn })), (input.tags !== undefined && input.tags !== null && { tags: serializeAws_json1_1TagsMap(input.tags, context) }));
};
var serializeAws_json1_1TagsMap = function (input, context) {
    return Object.entries(input).reduce(function (acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        if (value === null) {
            return acc;
        }
        return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));
    }, {});
};
var serializeAws_json1_1Target = function (input, context) {
    return __assign(__assign(__assign({}, (input.destinationReference !== undefined &&
        input.destinationReference !== null && { destinationReference: input.destinationReference })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName })), (input.sourceReference !== undefined &&
        input.sourceReference !== null && { sourceReference: input.sourceReference }));
};
var serializeAws_json1_1TargetList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1Target(entry, context);
    });
};
var serializeAws_json1_1TestRepositoryTriggersInput = function (input, context) {
    return __assign(__assign({}, (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName })), (input.triggers !== undefined &&
        input.triggers !== null && { triggers: serializeAws_json1_1RepositoryTriggersList(input.triggers, context) }));
};
var serializeAws_json1_1UntagResourceInput = function (input, context) {
    return __assign(__assign({}, (input.resourceArn !== undefined && input.resourceArn !== null && { resourceArn: input.resourceArn })), (input.tagKeys !== undefined &&
        input.tagKeys !== null && { tagKeys: serializeAws_json1_1TagKeysList(input.tagKeys, context) }));
};
var serializeAws_json1_1UpdateApprovalRuleTemplateContentInput = function (input, context) {
    return __assign(__assign(__assign({}, (input.approvalRuleTemplateName !== undefined &&
        input.approvalRuleTemplateName !== null && { approvalRuleTemplateName: input.approvalRuleTemplateName })), (input.existingRuleContentSha256 !== undefined &&
        input.existingRuleContentSha256 !== null && { existingRuleContentSha256: input.existingRuleContentSha256 })), (input.newRuleContent !== undefined &&
        input.newRuleContent !== null && { newRuleContent: input.newRuleContent }));
};
var serializeAws_json1_1UpdateApprovalRuleTemplateDescriptionInput = function (input, context) {
    return __assign(__assign({}, (input.approvalRuleTemplateDescription !== undefined &&
        input.approvalRuleTemplateDescription !== null && {
        approvalRuleTemplateDescription: input.approvalRuleTemplateDescription,
    })), (input.approvalRuleTemplateName !== undefined &&
        input.approvalRuleTemplateName !== null && { approvalRuleTemplateName: input.approvalRuleTemplateName }));
};
var serializeAws_json1_1UpdateApprovalRuleTemplateNameInput = function (input, context) {
    return __assign(__assign({}, (input.newApprovalRuleTemplateName !== undefined &&
        input.newApprovalRuleTemplateName !== null && { newApprovalRuleTemplateName: input.newApprovalRuleTemplateName })), (input.oldApprovalRuleTemplateName !== undefined &&
        input.oldApprovalRuleTemplateName !== null && { oldApprovalRuleTemplateName: input.oldApprovalRuleTemplateName }));
};
var serializeAws_json1_1UpdateCommentInput = function (input, context) {
    return __assign(__assign({}, (input.commentId !== undefined && input.commentId !== null && { commentId: input.commentId })), (input.content !== undefined && input.content !== null && { content: input.content }));
};
var serializeAws_json1_1UpdateDefaultBranchInput = function (input, context) {
    return __assign(__assign({}, (input.defaultBranchName !== undefined &&
        input.defaultBranchName !== null && { defaultBranchName: input.defaultBranchName })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName }));
};
var serializeAws_json1_1UpdatePullRequestApprovalRuleContentInput = function (input, context) {
    return __assign(__assign(__assign(__assign({}, (input.approvalRuleName !== undefined &&
        input.approvalRuleName !== null && { approvalRuleName: input.approvalRuleName })), (input.existingRuleContentSha256 !== undefined &&
        input.existingRuleContentSha256 !== null && { existingRuleContentSha256: input.existingRuleContentSha256 })), (input.newRuleContent !== undefined &&
        input.newRuleContent !== null && { newRuleContent: input.newRuleContent })), (input.pullRequestId !== undefined && input.pullRequestId !== null && { pullRequestId: input.pullRequestId }));
};
var serializeAws_json1_1UpdatePullRequestApprovalStateInput = function (input, context) {
    return __assign(__assign(__assign({}, (input.approvalState !== undefined && input.approvalState !== null && { approvalState: input.approvalState })), (input.pullRequestId !== undefined && input.pullRequestId !== null && { pullRequestId: input.pullRequestId })), (input.revisionId !== undefined && input.revisionId !== null && { revisionId: input.revisionId }));
};
var serializeAws_json1_1UpdatePullRequestDescriptionInput = function (input, context) {
    return __assign(__assign({}, (input.description !== undefined && input.description !== null && { description: input.description })), (input.pullRequestId !== undefined && input.pullRequestId !== null && { pullRequestId: input.pullRequestId }));
};
var serializeAws_json1_1UpdatePullRequestStatusInput = function (input, context) {
    return __assign(__assign({}, (input.pullRequestId !== undefined && input.pullRequestId !== null && { pullRequestId: input.pullRequestId })), (input.pullRequestStatus !== undefined &&
        input.pullRequestStatus !== null && { pullRequestStatus: input.pullRequestStatus }));
};
var serializeAws_json1_1UpdatePullRequestTitleInput = function (input, context) {
    return __assign(__assign({}, (input.pullRequestId !== undefined && input.pullRequestId !== null && { pullRequestId: input.pullRequestId })), (input.title !== undefined && input.title !== null && { title: input.title }));
};
var serializeAws_json1_1UpdateRepositoryDescriptionInput = function (input, context) {
    return __assign(__assign({}, (input.repositoryDescription !== undefined &&
        input.repositoryDescription !== null && { repositoryDescription: input.repositoryDescription })), (input.repositoryName !== undefined &&
        input.repositoryName !== null && { repositoryName: input.repositoryName }));
};
var serializeAws_json1_1UpdateRepositoryNameInput = function (input, context) {
    return __assign(__assign({}, (input.newName !== undefined && input.newName !== null && { newName: input.newName })), (input.oldName !== undefined && input.oldName !== null && { oldName: input.oldName }));
};
var deserializeAws_json1_1ActorDoesNotExistException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1Approval = function (output, context) {
    return {
        approvalState: output.approvalState !== undefined && output.approvalState !== null ? output.approvalState : undefined,
        userArn: output.userArn !== undefined && output.userArn !== null ? output.userArn : undefined,
    };
};
var deserializeAws_json1_1ApprovalList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Approval(entry, context);
    });
};
var deserializeAws_json1_1ApprovalRule = function (output, context) {
    return {
        approvalRuleContent: output.approvalRuleContent !== undefined && output.approvalRuleContent !== null
            ? output.approvalRuleContent
            : undefined,
        approvalRuleId: output.approvalRuleId !== undefined && output.approvalRuleId !== null ? output.approvalRuleId : undefined,
        approvalRuleName: output.approvalRuleName !== undefined && output.approvalRuleName !== null ? output.approvalRuleName : undefined,
        creationDate: output.creationDate !== undefined && output.creationDate !== null
            ? new Date(Math.round(output.creationDate * 1000))
            : undefined,
        lastModifiedDate: output.lastModifiedDate !== undefined && output.lastModifiedDate !== null
            ? new Date(Math.round(output.lastModifiedDate * 1000))
            : undefined,
        lastModifiedUser: output.lastModifiedUser !== undefined && output.lastModifiedUser !== null ? output.lastModifiedUser : undefined,
        originApprovalRuleTemplate: output.originApprovalRuleTemplate !== undefined && output.originApprovalRuleTemplate !== null
            ? deserializeAws_json1_1OriginApprovalRuleTemplate(output.originApprovalRuleTemplate, context)
            : undefined,
        ruleContentSha256: output.ruleContentSha256 !== undefined && output.ruleContentSha256 !== null
            ? output.ruleContentSha256
            : undefined,
    };
};
var deserializeAws_json1_1ApprovalRuleContentRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1ApprovalRuleDoesNotExistException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1ApprovalRuleEventMetadata = function (output, context) {
    return {
        approvalRuleContent: output.approvalRuleContent !== undefined && output.approvalRuleContent !== null
            ? output.approvalRuleContent
            : undefined,
        approvalRuleId: output.approvalRuleId !== undefined && output.approvalRuleId !== null ? output.approvalRuleId : undefined,
        approvalRuleName: output.approvalRuleName !== undefined && output.approvalRuleName !== null ? output.approvalRuleName : undefined,
    };
};
var deserializeAws_json1_1ApprovalRuleNameAlreadyExistsException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1ApprovalRuleNameRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1ApprovalRuleOverriddenEventMetadata = function (output, context) {
    return {
        overrideStatus: output.overrideStatus !== undefined && output.overrideStatus !== null ? output.overrideStatus : undefined,
        revisionId: output.revisionId !== undefined && output.revisionId !== null ? output.revisionId : undefined,
    };
};
var deserializeAws_json1_1ApprovalRulesList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ApprovalRule(entry, context);
    });
};
var deserializeAws_json1_1ApprovalRulesNotSatisfiedList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
var deserializeAws_json1_1ApprovalRulesSatisfiedList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
var deserializeAws_json1_1ApprovalRuleTemplate = function (output, context) {
    return {
        approvalRuleTemplateContent: output.approvalRuleTemplateContent !== undefined && output.approvalRuleTemplateContent !== null
            ? output.approvalRuleTemplateContent
            : undefined,
        approvalRuleTemplateDescription: output.approvalRuleTemplateDescription !== undefined && output.approvalRuleTemplateDescription !== null
            ? output.approvalRuleTemplateDescription
            : undefined,
        approvalRuleTemplateId: output.approvalRuleTemplateId !== undefined && output.approvalRuleTemplateId !== null
            ? output.approvalRuleTemplateId
            : undefined,
        approvalRuleTemplateName: output.approvalRuleTemplateName !== undefined && output.approvalRuleTemplateName !== null
            ? output.approvalRuleTemplateName
            : undefined,
        creationDate: output.creationDate !== undefined && output.creationDate !== null
            ? new Date(Math.round(output.creationDate * 1000))
            : undefined,
        lastModifiedDate: output.lastModifiedDate !== undefined && output.lastModifiedDate !== null
            ? new Date(Math.round(output.lastModifiedDate * 1000))
            : undefined,
        lastModifiedUser: output.lastModifiedUser !== undefined && output.lastModifiedUser !== null ? output.lastModifiedUser : undefined,
        ruleContentSha256: output.ruleContentSha256 !== undefined && output.ruleContentSha256 !== null
            ? output.ruleContentSha256
            : undefined,
    };
};
var deserializeAws_json1_1ApprovalRuleTemplateContentRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1ApprovalRuleTemplateDoesNotExistException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1ApprovalRuleTemplateInUseException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1ApprovalRuleTemplateNameAlreadyExistsException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1ApprovalRuleTemplateNameList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
var deserializeAws_json1_1ApprovalRuleTemplateNameRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1ApprovalStateChangedEventMetadata = function (output, context) {
    return {
        approvalStatus: output.approvalStatus !== undefined && output.approvalStatus !== null ? output.approvalStatus : undefined,
        revisionId: output.revisionId !== undefined && output.revisionId !== null ? output.revisionId : undefined,
    };
};
var deserializeAws_json1_1ApprovalStateRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1AuthorDoesNotExistException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1BatchAssociateApprovalRuleTemplateWithRepositoriesError = function (output, context) {
    return {
        errorCode: output.errorCode !== undefined && output.errorCode !== null ? output.errorCode : undefined,
        errorMessage: output.errorMessage !== undefined && output.errorMessage !== null ? output.errorMessage : undefined,
        repositoryName: output.repositoryName !== undefined && output.repositoryName !== null ? output.repositoryName : undefined,
    };
};
var deserializeAws_json1_1BatchAssociateApprovalRuleTemplateWithRepositoriesErrorsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1BatchAssociateApprovalRuleTemplateWithRepositoriesError(entry, context);
    });
};
var deserializeAws_json1_1BatchAssociateApprovalRuleTemplateWithRepositoriesOutput = function (output, context) {
    return {
        associatedRepositoryNames: output.associatedRepositoryNames !== undefined && output.associatedRepositoryNames !== null
            ? deserializeAws_json1_1RepositoryNameList(output.associatedRepositoryNames, context)
            : undefined,
        errors: output.errors !== undefined && output.errors !== null
            ? deserializeAws_json1_1BatchAssociateApprovalRuleTemplateWithRepositoriesErrorsList(output.errors, context)
            : undefined,
    };
};
var deserializeAws_json1_1BatchDescribeMergeConflictsError = function (output, context) {
    return {
        exceptionName: output.exceptionName !== undefined && output.exceptionName !== null ? output.exceptionName : undefined,
        filePath: output.filePath !== undefined && output.filePath !== null ? output.filePath : undefined,
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1BatchDescribeMergeConflictsErrors = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1BatchDescribeMergeConflictsError(entry, context);
    });
};
var deserializeAws_json1_1BatchDescribeMergeConflictsOutput = function (output, context) {
    return {
        baseCommitId: output.baseCommitId !== undefined && output.baseCommitId !== null ? output.baseCommitId : undefined,
        conflicts: output.conflicts !== undefined && output.conflicts !== null
            ? deserializeAws_json1_1Conflicts(output.conflicts, context)
            : undefined,
        destinationCommitId: output.destinationCommitId !== undefined && output.destinationCommitId !== null
            ? output.destinationCommitId
            : undefined,
        errors: output.errors !== undefined && output.errors !== null
            ? deserializeAws_json1_1BatchDescribeMergeConflictsErrors(output.errors, context)
            : undefined,
        nextToken: output.nextToken !== undefined && output.nextToken !== null ? output.nextToken : undefined,
        sourceCommitId: output.sourceCommitId !== undefined && output.sourceCommitId !== null ? output.sourceCommitId : undefined,
    };
};
var deserializeAws_json1_1BatchDisassociateApprovalRuleTemplateFromRepositoriesError = function (output, context) {
    return {
        errorCode: output.errorCode !== undefined && output.errorCode !== null ? output.errorCode : undefined,
        errorMessage: output.errorMessage !== undefined && output.errorMessage !== null ? output.errorMessage : undefined,
        repositoryName: output.repositoryName !== undefined && output.repositoryName !== null ? output.repositoryName : undefined,
    };
};
var deserializeAws_json1_1BatchDisassociateApprovalRuleTemplateFromRepositoriesErrorsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1BatchDisassociateApprovalRuleTemplateFromRepositoriesError(entry, context);
    });
};
var deserializeAws_json1_1BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput = function (output, context) {
    return {
        disassociatedRepositoryNames: output.disassociatedRepositoryNames !== undefined && output.disassociatedRepositoryNames !== null
            ? deserializeAws_json1_1RepositoryNameList(output.disassociatedRepositoryNames, context)
            : undefined,
        errors: output.errors !== undefined && output.errors !== null
            ? deserializeAws_json1_1BatchDisassociateApprovalRuleTemplateFromRepositoriesErrorsList(output.errors, context)
            : undefined,
    };
};
var deserializeAws_json1_1BatchGetCommitsError = function (output, context) {
    return {
        commitId: output.commitId !== undefined && output.commitId !== null ? output.commitId : undefined,
        errorCode: output.errorCode !== undefined && output.errorCode !== null ? output.errorCode : undefined,
        errorMessage: output.errorMessage !== undefined && output.errorMessage !== null ? output.errorMessage : undefined,
    };
};
var deserializeAws_json1_1BatchGetCommitsErrorsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1BatchGetCommitsError(entry, context);
    });
};
var deserializeAws_json1_1BatchGetCommitsOutput = function (output, context) {
    return {
        commits: output.commits !== undefined && output.commits !== null
            ? deserializeAws_json1_1CommitObjectsList(output.commits, context)
            : undefined,
        errors: output.errors !== undefined && output.errors !== null
            ? deserializeAws_json1_1BatchGetCommitsErrorsList(output.errors, context)
            : undefined,
    };
};
var deserializeAws_json1_1BatchGetRepositoriesOutput = function (output, context) {
    return {
        repositories: output.repositories !== undefined && output.repositories !== null
            ? deserializeAws_json1_1RepositoryMetadataList(output.repositories, context)
            : undefined,
        repositoriesNotFound: output.repositoriesNotFound !== undefined && output.repositoriesNotFound !== null
            ? deserializeAws_json1_1RepositoryNotFoundList(output.repositoriesNotFound, context)
            : undefined,
    };
};
var deserializeAws_json1_1BeforeCommitIdAndAfterCommitIdAreSameException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1BlobIdDoesNotExistException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1BlobIdRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1BlobMetadata = function (output, context) {
    return {
        blobId: output.blobId !== undefined && output.blobId !== null ? output.blobId : undefined,
        mode: output.mode !== undefined && output.mode !== null ? output.mode : undefined,
        path: output.path !== undefined && output.path !== null ? output.path : undefined,
    };
};
var deserializeAws_json1_1BranchDoesNotExistException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1BranchInfo = function (output, context) {
    return {
        branchName: output.branchName !== undefined && output.branchName !== null ? output.branchName : undefined,
        commitId: output.commitId !== undefined && output.commitId !== null ? output.commitId : undefined,
    };
};
var deserializeAws_json1_1BranchNameExistsException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1BranchNameIsTagNameException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1BranchNameList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
var deserializeAws_json1_1BranchNameRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1CallerReactions = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
var deserializeAws_json1_1CannotDeleteApprovalRuleFromTemplateException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1CannotModifyApprovalRuleFromTemplateException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1ClientRequestTokenRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1Comment = function (output, context) {
    return {
        authorArn: output.authorArn !== undefined && output.authorArn !== null ? output.authorArn : undefined,
        callerReactions: output.callerReactions !== undefined && output.callerReactions !== null
            ? deserializeAws_json1_1CallerReactions(output.callerReactions, context)
            : undefined,
        clientRequestToken: output.clientRequestToken !== undefined && output.clientRequestToken !== null
            ? output.clientRequestToken
            : undefined,
        commentId: output.commentId !== undefined && output.commentId !== null ? output.commentId : undefined,
        content: output.content !== undefined && output.content !== null ? output.content : undefined,
        creationDate: output.creationDate !== undefined && output.creationDate !== null
            ? new Date(Math.round(output.creationDate * 1000))
            : undefined,
        deleted: output.deleted !== undefined && output.deleted !== null ? output.deleted : undefined,
        inReplyTo: output.inReplyTo !== undefined && output.inReplyTo !== null ? output.inReplyTo : undefined,
        lastModifiedDate: output.lastModifiedDate !== undefined && output.lastModifiedDate !== null
            ? new Date(Math.round(output.lastModifiedDate * 1000))
            : undefined,
        reactionCounts: output.reactionCounts !== undefined && output.reactionCounts !== null
            ? deserializeAws_json1_1ReactionCountsMap(output.reactionCounts, context)
            : undefined,
    };
};
var deserializeAws_json1_1CommentContentRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1CommentContentSizeLimitExceededException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1CommentDeletedException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1CommentDoesNotExistException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1CommentIdRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1CommentNotCreatedByCallerException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1Comments = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Comment(entry, context);
    });
};
var deserializeAws_json1_1CommentsForComparedCommit = function (output, context) {
    return {
        afterBlobId: output.afterBlobId !== undefined && output.afterBlobId !== null ? output.afterBlobId : undefined,
        afterCommitId: output.afterCommitId !== undefined && output.afterCommitId !== null ? output.afterCommitId : undefined,
        beforeBlobId: output.beforeBlobId !== undefined && output.beforeBlobId !== null ? output.beforeBlobId : undefined,
        beforeCommitId: output.beforeCommitId !== undefined && output.beforeCommitId !== null ? output.beforeCommitId : undefined,
        comments: output.comments !== undefined && output.comments !== null
            ? deserializeAws_json1_1Comments(output.comments, context)
            : undefined,
        location: output.location !== undefined && output.location !== null
            ? deserializeAws_json1_1Location(output.location, context)
            : undefined,
        repositoryName: output.repositoryName !== undefined && output.repositoryName !== null ? output.repositoryName : undefined,
    };
};
var deserializeAws_json1_1CommentsForComparedCommitData = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1CommentsForComparedCommit(entry, context);
    });
};
var deserializeAws_json1_1CommentsForPullRequest = function (output, context) {
    return {
        afterBlobId: output.afterBlobId !== undefined && output.afterBlobId !== null ? output.afterBlobId : undefined,
        afterCommitId: output.afterCommitId !== undefined && output.afterCommitId !== null ? output.afterCommitId : undefined,
        beforeBlobId: output.beforeBlobId !== undefined && output.beforeBlobId !== null ? output.beforeBlobId : undefined,
        beforeCommitId: output.beforeCommitId !== undefined && output.beforeCommitId !== null ? output.beforeCommitId : undefined,
        comments: output.comments !== undefined && output.comments !== null
            ? deserializeAws_json1_1Comments(output.comments, context)
            : undefined,
        location: output.location !== undefined && output.location !== null
            ? deserializeAws_json1_1Location(output.location, context)
            : undefined,
        pullRequestId: output.pullRequestId !== undefined && output.pullRequestId !== null ? output.pullRequestId : undefined,
        repositoryName: output.repositoryName !== undefined && output.repositoryName !== null ? output.repositoryName : undefined,
    };
};
var deserializeAws_json1_1CommentsForPullRequestData = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1CommentsForPullRequest(entry, context);
    });
};
var deserializeAws_json1_1Commit = function (output, context) {
    return {
        additionalData: output.additionalData !== undefined && output.additionalData !== null ? output.additionalData : undefined,
        author: output.author !== undefined && output.author !== null
            ? deserializeAws_json1_1UserInfo(output.author, context)
            : undefined,
        commitId: output.commitId !== undefined && output.commitId !== null ? output.commitId : undefined,
        committer: output.committer !== undefined && output.committer !== null
            ? deserializeAws_json1_1UserInfo(output.committer, context)
            : undefined,
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
        parents: output.parents !== undefined && output.parents !== null
            ? deserializeAws_json1_1ParentList(output.parents, context)
            : undefined,
        treeId: output.treeId !== undefined && output.treeId !== null ? output.treeId : undefined,
    };
};
var deserializeAws_json1_1CommitDoesNotExistException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1CommitIdDoesNotExistException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1CommitIdRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1CommitIdsLimitExceededException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1CommitIdsListRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1CommitMessageLengthExceededException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1CommitObjectsList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Commit(entry, context);
    });
};
var deserializeAws_json1_1CommitRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1ConcurrentReferenceUpdateException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1Conflict = function (output, context) {
    return {
        conflictMetadata: output.conflictMetadata !== undefined && output.conflictMetadata !== null
            ? deserializeAws_json1_1ConflictMetadata(output.conflictMetadata, context)
            : undefined,
        mergeHunks: output.mergeHunks !== undefined && output.mergeHunks !== null
            ? deserializeAws_json1_1MergeHunks(output.mergeHunks, context)
            : undefined,
    };
};
var deserializeAws_json1_1ConflictMetadata = function (output, context) {
    return {
        contentConflict: output.contentConflict !== undefined && output.contentConflict !== null ? output.contentConflict : undefined,
        fileModeConflict: output.fileModeConflict !== undefined && output.fileModeConflict !== null ? output.fileModeConflict : undefined,
        fileModes: output.fileModes !== undefined && output.fileModes !== null
            ? deserializeAws_json1_1FileModes(output.fileModes, context)
            : undefined,
        filePath: output.filePath !== undefined && output.filePath !== null ? output.filePath : undefined,
        fileSizes: output.fileSizes !== undefined && output.fileSizes !== null
            ? deserializeAws_json1_1FileSizes(output.fileSizes, context)
            : undefined,
        isBinaryFile: output.isBinaryFile !== undefined && output.isBinaryFile !== null
            ? deserializeAws_json1_1IsBinaryFile(output.isBinaryFile, context)
            : undefined,
        mergeOperations: output.mergeOperations !== undefined && output.mergeOperations !== null
            ? deserializeAws_json1_1MergeOperations(output.mergeOperations, context)
            : undefined,
        numberOfConflicts: output.numberOfConflicts !== undefined && output.numberOfConflicts !== null
            ? output.numberOfConflicts
            : undefined,
        objectTypeConflict: output.objectTypeConflict !== undefined && output.objectTypeConflict !== null
            ? output.objectTypeConflict
            : undefined,
        objectTypes: output.objectTypes !== undefined && output.objectTypes !== null
            ? deserializeAws_json1_1ObjectTypes(output.objectTypes, context)
            : undefined,
    };
};
var deserializeAws_json1_1ConflictMetadataList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ConflictMetadata(entry, context);
    });
};
var deserializeAws_json1_1Conflicts = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Conflict(entry, context);
    });
};
var deserializeAws_json1_1CreateApprovalRuleTemplateOutput = function (output, context) {
    return {
        approvalRuleTemplate: output.approvalRuleTemplate !== undefined && output.approvalRuleTemplate !== null
            ? deserializeAws_json1_1ApprovalRuleTemplate(output.approvalRuleTemplate, context)
            : undefined,
    };
};
var deserializeAws_json1_1CreateCommitOutput = function (output, context) {
    return {
        commitId: output.commitId !== undefined && output.commitId !== null ? output.commitId : undefined,
        filesAdded: output.filesAdded !== undefined && output.filesAdded !== null
            ? deserializeAws_json1_1FilesMetadata(output.filesAdded, context)
            : undefined,
        filesDeleted: output.filesDeleted !== undefined && output.filesDeleted !== null
            ? deserializeAws_json1_1FilesMetadata(output.filesDeleted, context)
            : undefined,
        filesUpdated: output.filesUpdated !== undefined && output.filesUpdated !== null
            ? deserializeAws_json1_1FilesMetadata(output.filesUpdated, context)
            : undefined,
        treeId: output.treeId !== undefined && output.treeId !== null ? output.treeId : undefined,
    };
};
var deserializeAws_json1_1CreatePullRequestApprovalRuleOutput = function (output, context) {
    return {
        approvalRule: output.approvalRule !== undefined && output.approvalRule !== null
            ? deserializeAws_json1_1ApprovalRule(output.approvalRule, context)
            : undefined,
    };
};
var deserializeAws_json1_1CreatePullRequestOutput = function (output, context) {
    return {
        pullRequest: output.pullRequest !== undefined && output.pullRequest !== null
            ? deserializeAws_json1_1PullRequest(output.pullRequest, context)
            : undefined,
    };
};
var deserializeAws_json1_1CreateRepositoryOutput = function (output, context) {
    return {
        repositoryMetadata: output.repositoryMetadata !== undefined && output.repositoryMetadata !== null
            ? deserializeAws_json1_1RepositoryMetadata(output.repositoryMetadata, context)
            : undefined,
    };
};
var deserializeAws_json1_1CreateUnreferencedMergeCommitOutput = function (output, context) {
    return {
        commitId: output.commitId !== undefined && output.commitId !== null ? output.commitId : undefined,
        treeId: output.treeId !== undefined && output.treeId !== null ? output.treeId : undefined,
    };
};
var deserializeAws_json1_1DefaultBranchCannotBeDeletedException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1DeleteApprovalRuleTemplateOutput = function (output, context) {
    return {
        approvalRuleTemplateId: output.approvalRuleTemplateId !== undefined && output.approvalRuleTemplateId !== null
            ? output.approvalRuleTemplateId
            : undefined,
    };
};
var deserializeAws_json1_1DeleteBranchOutput = function (output, context) {
    return {
        deletedBranch: output.deletedBranch !== undefined && output.deletedBranch !== null
            ? deserializeAws_json1_1BranchInfo(output.deletedBranch, context)
            : undefined,
    };
};
var deserializeAws_json1_1DeleteCommentContentOutput = function (output, context) {
    return {
        comment: output.comment !== undefined && output.comment !== null
            ? deserializeAws_json1_1Comment(output.comment, context)
            : undefined,
    };
};
var deserializeAws_json1_1DeleteFileOutput = function (output, context) {
    return {
        blobId: output.blobId !== undefined && output.blobId !== null ? output.blobId : undefined,
        commitId: output.commitId !== undefined && output.commitId !== null ? output.commitId : undefined,
        filePath: output.filePath !== undefined && output.filePath !== null ? output.filePath : undefined,
        treeId: output.treeId !== undefined && output.treeId !== null ? output.treeId : undefined,
    };
};
var deserializeAws_json1_1DeletePullRequestApprovalRuleOutput = function (output, context) {
    return {
        approvalRuleId: output.approvalRuleId !== undefined && output.approvalRuleId !== null ? output.approvalRuleId : undefined,
    };
};
var deserializeAws_json1_1DeleteRepositoryOutput = function (output, context) {
    return {
        repositoryId: output.repositoryId !== undefined && output.repositoryId !== null ? output.repositoryId : undefined,
    };
};
var deserializeAws_json1_1DescribeMergeConflictsOutput = function (output, context) {
    return {
        baseCommitId: output.baseCommitId !== undefined && output.baseCommitId !== null ? output.baseCommitId : undefined,
        conflictMetadata: output.conflictMetadata !== undefined && output.conflictMetadata !== null
            ? deserializeAws_json1_1ConflictMetadata(output.conflictMetadata, context)
            : undefined,
        destinationCommitId: output.destinationCommitId !== undefined && output.destinationCommitId !== null
            ? output.destinationCommitId
            : undefined,
        mergeHunks: output.mergeHunks !== undefined && output.mergeHunks !== null
            ? deserializeAws_json1_1MergeHunks(output.mergeHunks, context)
            : undefined,
        nextToken: output.nextToken !== undefined && output.nextToken !== null ? output.nextToken : undefined,
        sourceCommitId: output.sourceCommitId !== undefined && output.sourceCommitId !== null ? output.sourceCommitId : undefined,
    };
};
var deserializeAws_json1_1DescribePullRequestEventsOutput = function (output, context) {
    return {
        nextToken: output.nextToken !== undefined && output.nextToken !== null ? output.nextToken : undefined,
        pullRequestEvents: output.pullRequestEvents !== undefined && output.pullRequestEvents !== null
            ? deserializeAws_json1_1PullRequestEventList(output.pullRequestEvents, context)
            : undefined,
    };
};
var deserializeAws_json1_1Difference = function (output, context) {
    return {
        afterBlob: output.afterBlob !== undefined && output.afterBlob !== null
            ? deserializeAws_json1_1BlobMetadata(output.afterBlob, context)
            : undefined,
        beforeBlob: output.beforeBlob !== undefined && output.beforeBlob !== null
            ? deserializeAws_json1_1BlobMetadata(output.beforeBlob, context)
            : undefined,
        changeType: output.changeType !== undefined && output.changeType !== null ? output.changeType : undefined,
    };
};
var deserializeAws_json1_1DifferenceList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Difference(entry, context);
    });
};
var deserializeAws_json1_1DirectoryNameConflictsWithFileNameException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1EncryptionIntegrityChecksFailedException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1EncryptionKeyAccessDeniedException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1EncryptionKeyDisabledException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1EncryptionKeyNotFoundException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1EncryptionKeyUnavailableException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1EvaluatePullRequestApprovalRulesOutput = function (output, context) {
    return {
        evaluation: output.evaluation !== undefined && output.evaluation !== null
            ? deserializeAws_json1_1Evaluation(output.evaluation, context)
            : undefined,
    };
};
var deserializeAws_json1_1Evaluation = function (output, context) {
    return {
        approvalRulesNotSatisfied: output.approvalRulesNotSatisfied !== undefined && output.approvalRulesNotSatisfied !== null
            ? deserializeAws_json1_1ApprovalRulesNotSatisfiedList(output.approvalRulesNotSatisfied, context)
            : undefined,
        approvalRulesSatisfied: output.approvalRulesSatisfied !== undefined && output.approvalRulesSatisfied !== null
            ? deserializeAws_json1_1ApprovalRulesSatisfiedList(output.approvalRulesSatisfied, context)
            : undefined,
        approved: output.approved !== undefined && output.approved !== null ? output.approved : undefined,
        overridden: output.overridden !== undefined && output.overridden !== null ? output.overridden : undefined,
    };
};
var deserializeAws_json1_1File = function (output, context) {
    return {
        absolutePath: output.absolutePath !== undefined && output.absolutePath !== null ? output.absolutePath : undefined,
        blobId: output.blobId !== undefined && output.blobId !== null ? output.blobId : undefined,
        fileMode: output.fileMode !== undefined && output.fileMode !== null ? output.fileMode : undefined,
        relativePath: output.relativePath !== undefined && output.relativePath !== null ? output.relativePath : undefined,
    };
};
var deserializeAws_json1_1FileContentAndSourceFileSpecifiedException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1FileContentRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1FileContentSizeLimitExceededException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1FileDoesNotExistException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1FileEntryRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1FileList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1File(entry, context);
    });
};
var deserializeAws_json1_1FileMetadata = function (output, context) {
    return {
        absolutePath: output.absolutePath !== undefined && output.absolutePath !== null ? output.absolutePath : undefined,
        blobId: output.blobId !== undefined && output.blobId !== null ? output.blobId : undefined,
        fileMode: output.fileMode !== undefined && output.fileMode !== null ? output.fileMode : undefined,
    };
};
var deserializeAws_json1_1FileModeRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1FileModes = function (output, context) {
    return {
        base: output.base !== undefined && output.base !== null ? output.base : undefined,
        destination: output.destination !== undefined && output.destination !== null ? output.destination : undefined,
        source: output.source !== undefined && output.source !== null ? output.source : undefined,
    };
};
var deserializeAws_json1_1FileNameConflictsWithDirectoryNameException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1FilePathConflictsWithSubmodulePathException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1FileSizes = function (output, context) {
    return {
        base: output.base !== undefined && output.base !== null ? output.base : undefined,
        destination: output.destination !== undefined && output.destination !== null ? output.destination : undefined,
        source: output.source !== undefined && output.source !== null ? output.source : undefined,
    };
};
var deserializeAws_json1_1FilesMetadata = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1FileMetadata(entry, context);
    });
};
var deserializeAws_json1_1FileTooLargeException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1Folder = function (output, context) {
    return {
        absolutePath: output.absolutePath !== undefined && output.absolutePath !== null ? output.absolutePath : undefined,
        relativePath: output.relativePath !== undefined && output.relativePath !== null ? output.relativePath : undefined,
        treeId: output.treeId !== undefined && output.treeId !== null ? output.treeId : undefined,
    };
};
var deserializeAws_json1_1FolderContentSizeLimitExceededException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1FolderDoesNotExistException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1FolderList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Folder(entry, context);
    });
};
var deserializeAws_json1_1GetApprovalRuleTemplateOutput = function (output, context) {
    return {
        approvalRuleTemplate: output.approvalRuleTemplate !== undefined && output.approvalRuleTemplate !== null
            ? deserializeAws_json1_1ApprovalRuleTemplate(output.approvalRuleTemplate, context)
            : undefined,
    };
};
var deserializeAws_json1_1GetBlobOutput = function (output, context) {
    return {
        content: output.content !== undefined && output.content !== null ? context.base64Decoder(output.content) : undefined,
    };
};
var deserializeAws_json1_1GetBranchOutput = function (output, context) {
    return {
        branch: output.branch !== undefined && output.branch !== null
            ? deserializeAws_json1_1BranchInfo(output.branch, context)
            : undefined,
    };
};
var deserializeAws_json1_1GetCommentOutput = function (output, context) {
    return {
        comment: output.comment !== undefined && output.comment !== null
            ? deserializeAws_json1_1Comment(output.comment, context)
            : undefined,
    };
};
var deserializeAws_json1_1GetCommentReactionsOutput = function (output, context) {
    return {
        nextToken: output.nextToken !== undefined && output.nextToken !== null ? output.nextToken : undefined,
        reactionsForComment: output.reactionsForComment !== undefined && output.reactionsForComment !== null
            ? deserializeAws_json1_1ReactionsForCommentList(output.reactionsForComment, context)
            : undefined,
    };
};
var deserializeAws_json1_1GetCommentsForComparedCommitOutput = function (output, context) {
    return {
        commentsForComparedCommitData: output.commentsForComparedCommitData !== undefined && output.commentsForComparedCommitData !== null
            ? deserializeAws_json1_1CommentsForComparedCommitData(output.commentsForComparedCommitData, context)
            : undefined,
        nextToken: output.nextToken !== undefined && output.nextToken !== null ? output.nextToken : undefined,
    };
};
var deserializeAws_json1_1GetCommentsForPullRequestOutput = function (output, context) {
    return {
        commentsForPullRequestData: output.commentsForPullRequestData !== undefined && output.commentsForPullRequestData !== null
            ? deserializeAws_json1_1CommentsForPullRequestData(output.commentsForPullRequestData, context)
            : undefined,
        nextToken: output.nextToken !== undefined && output.nextToken !== null ? output.nextToken : undefined,
    };
};
var deserializeAws_json1_1GetCommitOutput = function (output, context) {
    return {
        commit: output.commit !== undefined && output.commit !== null
            ? deserializeAws_json1_1Commit(output.commit, context)
            : undefined,
    };
};
var deserializeAws_json1_1GetDifferencesOutput = function (output, context) {
    return {
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
        differences: output.differences !== undefined && output.differences !== null
            ? deserializeAws_json1_1DifferenceList(output.differences, context)
            : undefined,
    };
};
var deserializeAws_json1_1GetFileOutput = function (output, context) {
    return {
        blobId: output.blobId !== undefined && output.blobId !== null ? output.blobId : undefined,
        commitId: output.commitId !== undefined && output.commitId !== null ? output.commitId : undefined,
        fileContent: output.fileContent !== undefined && output.fileContent !== null
            ? context.base64Decoder(output.fileContent)
            : undefined,
        fileMode: output.fileMode !== undefined && output.fileMode !== null ? output.fileMode : undefined,
        filePath: output.filePath !== undefined && output.filePath !== null ? output.filePath : undefined,
        fileSize: output.fileSize !== undefined && output.fileSize !== null ? output.fileSize : undefined,
    };
};
var deserializeAws_json1_1GetFolderOutput = function (output, context) {
    return {
        commitId: output.commitId !== undefined && output.commitId !== null ? output.commitId : undefined,
        files: output.files !== undefined && output.files !== null
            ? deserializeAws_json1_1FileList(output.files, context)
            : undefined,
        folderPath: output.folderPath !== undefined && output.folderPath !== null ? output.folderPath : undefined,
        subFolders: output.subFolders !== undefined && output.subFolders !== null
            ? deserializeAws_json1_1FolderList(output.subFolders, context)
            : undefined,
        subModules: output.subModules !== undefined && output.subModules !== null
            ? deserializeAws_json1_1SubModuleList(output.subModules, context)
            : undefined,
        symbolicLinks: output.symbolicLinks !== undefined && output.symbolicLinks !== null
            ? deserializeAws_json1_1SymbolicLinkList(output.symbolicLinks, context)
            : undefined,
        treeId: output.treeId !== undefined && output.treeId !== null ? output.treeId : undefined,
    };
};
var deserializeAws_json1_1GetMergeCommitOutput = function (output, context) {
    return {
        baseCommitId: output.baseCommitId !== undefined && output.baseCommitId !== null ? output.baseCommitId : undefined,
        destinationCommitId: output.destinationCommitId !== undefined && output.destinationCommitId !== null
            ? output.destinationCommitId
            : undefined,
        mergedCommitId: output.mergedCommitId !== undefined && output.mergedCommitId !== null ? output.mergedCommitId : undefined,
        sourceCommitId: output.sourceCommitId !== undefined && output.sourceCommitId !== null ? output.sourceCommitId : undefined,
    };
};
var deserializeAws_json1_1GetMergeConflictsOutput = function (output, context) {
    return {
        baseCommitId: output.baseCommitId !== undefined && output.baseCommitId !== null ? output.baseCommitId : undefined,
        conflictMetadataList: output.conflictMetadataList !== undefined && output.conflictMetadataList !== null
            ? deserializeAws_json1_1ConflictMetadataList(output.conflictMetadataList, context)
            : undefined,
        destinationCommitId: output.destinationCommitId !== undefined && output.destinationCommitId !== null
            ? output.destinationCommitId
            : undefined,
        mergeable: output.mergeable !== undefined && output.mergeable !== null ? output.mergeable : undefined,
        nextToken: output.nextToken !== undefined && output.nextToken !== null ? output.nextToken : undefined,
        sourceCommitId: output.sourceCommitId !== undefined && output.sourceCommitId !== null ? output.sourceCommitId : undefined,
    };
};
var deserializeAws_json1_1GetMergeOptionsOutput = function (output, context) {
    return {
        baseCommitId: output.baseCommitId !== undefined && output.baseCommitId !== null ? output.baseCommitId : undefined,
        destinationCommitId: output.destinationCommitId !== undefined && output.destinationCommitId !== null
            ? output.destinationCommitId
            : undefined,
        mergeOptions: output.mergeOptions !== undefined && output.mergeOptions !== null
            ? deserializeAws_json1_1MergeOptions(output.mergeOptions, context)
            : undefined,
        sourceCommitId: output.sourceCommitId !== undefined && output.sourceCommitId !== null ? output.sourceCommitId : undefined,
    };
};
var deserializeAws_json1_1GetPullRequestApprovalStatesOutput = function (output, context) {
    return {
        approvals: output.approvals !== undefined && output.approvals !== null
            ? deserializeAws_json1_1ApprovalList(output.approvals, context)
            : undefined,
    };
};
var deserializeAws_json1_1GetPullRequestOutput = function (output, context) {
    return {
        pullRequest: output.pullRequest !== undefined && output.pullRequest !== null
            ? deserializeAws_json1_1PullRequest(output.pullRequest, context)
            : undefined,
    };
};
var deserializeAws_json1_1GetPullRequestOverrideStateOutput = function (output, context) {
    return {
        overridden: output.overridden !== undefined && output.overridden !== null ? output.overridden : undefined,
        overrider: output.overrider !== undefined && output.overrider !== null ? output.overrider : undefined,
    };
};
var deserializeAws_json1_1GetRepositoryOutput = function (output, context) {
    return {
        repositoryMetadata: output.repositoryMetadata !== undefined && output.repositoryMetadata !== null
            ? deserializeAws_json1_1RepositoryMetadata(output.repositoryMetadata, context)
            : undefined,
    };
};
var deserializeAws_json1_1GetRepositoryTriggersOutput = function (output, context) {
    return {
        configurationId: output.configurationId !== undefined && output.configurationId !== null ? output.configurationId : undefined,
        triggers: output.triggers !== undefined && output.triggers !== null
            ? deserializeAws_json1_1RepositoryTriggersList(output.triggers, context)
            : undefined,
    };
};
var deserializeAws_json1_1IdempotencyParameterMismatchException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidActorArnException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidApprovalRuleContentException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidApprovalRuleNameException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidApprovalRuleTemplateContentException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidApprovalRuleTemplateDescriptionException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidApprovalRuleTemplateNameException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidApprovalStateException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidAuthorArnException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidBlobIdException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidBranchNameException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidClientRequestTokenException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidCommentIdException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidCommitException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidCommitIdException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidConflictDetailLevelException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidConflictResolutionException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidConflictResolutionStrategyException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidContinuationTokenException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidDeletionParameterException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidDescriptionException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidDestinationCommitSpecifierException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidEmailException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidFileLocationException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidFileModeException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidFilePositionException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidMaxConflictFilesException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidMaxMergeHunksException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidMaxResultsException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidMergeOptionException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidOrderException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidOverrideStatusException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidParentCommitIdException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidPathException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidPullRequestEventTypeException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidPullRequestIdException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidPullRequestStatusException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidPullRequestStatusUpdateException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidReactionUserArnException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidReactionValueException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidReferenceNameException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidRelativeFileVersionEnumException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidReplacementContentException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidReplacementTypeException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidRepositoryDescriptionException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidRepositoryNameException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidRepositoryTriggerBranchNameException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidRepositoryTriggerCustomDataException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidRepositoryTriggerDestinationArnException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidRepositoryTriggerEventsException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidRepositoryTriggerNameException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidRepositoryTriggerRegionException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidResourceArnException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidRevisionIdException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidRuleContentSha256Exception = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidSortByException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidSourceCommitSpecifierException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidSystemTagUsageException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidTagKeysListException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidTagsMapException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidTargetBranchException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidTargetException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidTargetsException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1InvalidTitleException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1IsBinaryFile = function (output, context) {
    return {
        base: output.base !== undefined && output.base !== null ? output.base : undefined,
        destination: output.destination !== undefined && output.destination !== null ? output.destination : undefined,
        source: output.source !== undefined && output.source !== null ? output.source : undefined,
    };
};
var deserializeAws_json1_1ListApprovalRuleTemplatesOutput = function (output, context) {
    return {
        approvalRuleTemplateNames: output.approvalRuleTemplateNames !== undefined && output.approvalRuleTemplateNames !== null
            ? deserializeAws_json1_1ApprovalRuleTemplateNameList(output.approvalRuleTemplateNames, context)
            : undefined,
        nextToken: output.nextToken !== undefined && output.nextToken !== null ? output.nextToken : undefined,
    };
};
var deserializeAws_json1_1ListAssociatedApprovalRuleTemplatesForRepositoryOutput = function (output, context) {
    return {
        approvalRuleTemplateNames: output.approvalRuleTemplateNames !== undefined && output.approvalRuleTemplateNames !== null
            ? deserializeAws_json1_1ApprovalRuleTemplateNameList(output.approvalRuleTemplateNames, context)
            : undefined,
        nextToken: output.nextToken !== undefined && output.nextToken !== null ? output.nextToken : undefined,
    };
};
var deserializeAws_json1_1ListBranchesOutput = function (output, context) {
    return {
        branches: output.branches !== undefined && output.branches !== null
            ? deserializeAws_json1_1BranchNameList(output.branches, context)
            : undefined,
        nextToken: output.nextToken !== undefined && output.nextToken !== null ? output.nextToken : undefined,
    };
};
var deserializeAws_json1_1ListPullRequestsOutput = function (output, context) {
    return {
        nextToken: output.nextToken !== undefined && output.nextToken !== null ? output.nextToken : undefined,
        pullRequestIds: output.pullRequestIds !== undefined && output.pullRequestIds !== null
            ? deserializeAws_json1_1PullRequestIdList(output.pullRequestIds, context)
            : undefined,
    };
};
var deserializeAws_json1_1ListRepositoriesForApprovalRuleTemplateOutput = function (output, context) {
    return {
        nextToken: output.nextToken !== undefined && output.nextToken !== null ? output.nextToken : undefined,
        repositoryNames: output.repositoryNames !== undefined && output.repositoryNames !== null
            ? deserializeAws_json1_1RepositoryNameList(output.repositoryNames, context)
            : undefined,
    };
};
var deserializeAws_json1_1ListRepositoriesOutput = function (output, context) {
    return {
        nextToken: output.nextToken !== undefined && output.nextToken !== null ? output.nextToken : undefined,
        repositories: output.repositories !== undefined && output.repositories !== null
            ? deserializeAws_json1_1RepositoryNameIdPairList(output.repositories, context)
            : undefined,
    };
};
var deserializeAws_json1_1ListTagsForResourceOutput = function (output, context) {
    return {
        nextToken: output.nextToken !== undefined && output.nextToken !== null ? output.nextToken : undefined,
        tags: output.tags !== undefined && output.tags !== null
            ? deserializeAws_json1_1TagsMap(output.tags, context)
            : undefined,
    };
};
var deserializeAws_json1_1Location = function (output, context) {
    return {
        filePath: output.filePath !== undefined && output.filePath !== null ? output.filePath : undefined,
        filePosition: output.filePosition !== undefined && output.filePosition !== null ? output.filePosition : undefined,
        relativeFileVersion: output.relativeFileVersion !== undefined && output.relativeFileVersion !== null
            ? output.relativeFileVersion
            : undefined,
    };
};
var deserializeAws_json1_1ManualMergeRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1MaximumBranchesExceededException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1MaximumConflictResolutionEntriesExceededException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1MaximumFileContentToLoadExceededException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1MaximumFileEntriesExceededException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1MaximumItemsToCompareExceededException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1MaximumNumberOfApprovalsExceededException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1MaximumOpenPullRequestsExceededException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1MaximumRepositoryNamesExceededException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1MaximumRepositoryTriggersExceededException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1MaximumRuleTemplatesAssociatedWithRepositoryException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1MergeBranchesByFastForwardOutput = function (output, context) {
    return {
        commitId: output.commitId !== undefined && output.commitId !== null ? output.commitId : undefined,
        treeId: output.treeId !== undefined && output.treeId !== null ? output.treeId : undefined,
    };
};
var deserializeAws_json1_1MergeBranchesBySquashOutput = function (output, context) {
    return {
        commitId: output.commitId !== undefined && output.commitId !== null ? output.commitId : undefined,
        treeId: output.treeId !== undefined && output.treeId !== null ? output.treeId : undefined,
    };
};
var deserializeAws_json1_1MergeBranchesByThreeWayOutput = function (output, context) {
    return {
        commitId: output.commitId !== undefined && output.commitId !== null ? output.commitId : undefined,
        treeId: output.treeId !== undefined && output.treeId !== null ? output.treeId : undefined,
    };
};
var deserializeAws_json1_1MergeHunk = function (output, context) {
    return {
        base: output.base !== undefined && output.base !== null
            ? deserializeAws_json1_1MergeHunkDetail(output.base, context)
            : undefined,
        destination: output.destination !== undefined && output.destination !== null
            ? deserializeAws_json1_1MergeHunkDetail(output.destination, context)
            : undefined,
        isConflict: output.isConflict !== undefined && output.isConflict !== null ? output.isConflict : undefined,
        source: output.source !== undefined && output.source !== null
            ? deserializeAws_json1_1MergeHunkDetail(output.source, context)
            : undefined,
    };
};
var deserializeAws_json1_1MergeHunkDetail = function (output, context) {
    return {
        endLine: output.endLine !== undefined && output.endLine !== null ? output.endLine : undefined,
        hunkContent: output.hunkContent !== undefined && output.hunkContent !== null ? output.hunkContent : undefined,
        startLine: output.startLine !== undefined && output.startLine !== null ? output.startLine : undefined,
    };
};
var deserializeAws_json1_1MergeHunks = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1MergeHunk(entry, context);
    });
};
var deserializeAws_json1_1MergeMetadata = function (output, context) {
    return {
        isMerged: output.isMerged !== undefined && output.isMerged !== null ? output.isMerged : undefined,
        mergeCommitId: output.mergeCommitId !== undefined && output.mergeCommitId !== null ? output.mergeCommitId : undefined,
        mergeOption: output.mergeOption !== undefined && output.mergeOption !== null ? output.mergeOption : undefined,
        mergedBy: output.mergedBy !== undefined && output.mergedBy !== null ? output.mergedBy : undefined,
    };
};
var deserializeAws_json1_1MergeOperations = function (output, context) {
    return {
        destination: output.destination !== undefined && output.destination !== null ? output.destination : undefined,
        source: output.source !== undefined && output.source !== null ? output.source : undefined,
    };
};
var deserializeAws_json1_1MergeOptionRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1MergeOptions = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
var deserializeAws_json1_1MergePullRequestByFastForwardOutput = function (output, context) {
    return {
        pullRequest: output.pullRequest !== undefined && output.pullRequest !== null
            ? deserializeAws_json1_1PullRequest(output.pullRequest, context)
            : undefined,
    };
};
var deserializeAws_json1_1MergePullRequestBySquashOutput = function (output, context) {
    return {
        pullRequest: output.pullRequest !== undefined && output.pullRequest !== null
            ? deserializeAws_json1_1PullRequest(output.pullRequest, context)
            : undefined,
    };
};
var deserializeAws_json1_1MergePullRequestByThreeWayOutput = function (output, context) {
    return {
        pullRequest: output.pullRequest !== undefined && output.pullRequest !== null
            ? deserializeAws_json1_1PullRequest(output.pullRequest, context)
            : undefined,
    };
};
var deserializeAws_json1_1MultipleConflictResolutionEntriesException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1MultipleRepositoriesInPullRequestException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1NameLengthExceededException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1NoChangeException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1NumberOfRulesExceededException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1NumberOfRuleTemplatesExceededException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1ObjectTypes = function (output, context) {
    return {
        base: output.base !== undefined && output.base !== null ? output.base : undefined,
        destination: output.destination !== undefined && output.destination !== null ? output.destination : undefined,
        source: output.source !== undefined && output.source !== null ? output.source : undefined,
    };
};
var deserializeAws_json1_1OriginApprovalRuleTemplate = function (output, context) {
    return {
        approvalRuleTemplateId: output.approvalRuleTemplateId !== undefined && output.approvalRuleTemplateId !== null
            ? output.approvalRuleTemplateId
            : undefined,
        approvalRuleTemplateName: output.approvalRuleTemplateName !== undefined && output.approvalRuleTemplateName !== null
            ? output.approvalRuleTemplateName
            : undefined,
    };
};
var deserializeAws_json1_1OverrideAlreadySetException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1OverrideStatusRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1ParentCommitDoesNotExistException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1ParentCommitIdOutdatedException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1ParentCommitIdRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1ParentList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
var deserializeAws_json1_1PathDoesNotExistException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1PathRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1PostCommentForComparedCommitOutput = function (output, context) {
    return {
        afterBlobId: output.afterBlobId !== undefined && output.afterBlobId !== null ? output.afterBlobId : undefined,
        afterCommitId: output.afterCommitId !== undefined && output.afterCommitId !== null ? output.afterCommitId : undefined,
        beforeBlobId: output.beforeBlobId !== undefined && output.beforeBlobId !== null ? output.beforeBlobId : undefined,
        beforeCommitId: output.beforeCommitId !== undefined && output.beforeCommitId !== null ? output.beforeCommitId : undefined,
        comment: output.comment !== undefined && output.comment !== null
            ? deserializeAws_json1_1Comment(output.comment, context)
            : undefined,
        location: output.location !== undefined && output.location !== null
            ? deserializeAws_json1_1Location(output.location, context)
            : undefined,
        repositoryName: output.repositoryName !== undefined && output.repositoryName !== null ? output.repositoryName : undefined,
    };
};
var deserializeAws_json1_1PostCommentForPullRequestOutput = function (output, context) {
    return {
        afterBlobId: output.afterBlobId !== undefined && output.afterBlobId !== null ? output.afterBlobId : undefined,
        afterCommitId: output.afterCommitId !== undefined && output.afterCommitId !== null ? output.afterCommitId : undefined,
        beforeBlobId: output.beforeBlobId !== undefined && output.beforeBlobId !== null ? output.beforeBlobId : undefined,
        beforeCommitId: output.beforeCommitId !== undefined && output.beforeCommitId !== null ? output.beforeCommitId : undefined,
        comment: output.comment !== undefined && output.comment !== null
            ? deserializeAws_json1_1Comment(output.comment, context)
            : undefined,
        location: output.location !== undefined && output.location !== null
            ? deserializeAws_json1_1Location(output.location, context)
            : undefined,
        pullRequestId: output.pullRequestId !== undefined && output.pullRequestId !== null ? output.pullRequestId : undefined,
        repositoryName: output.repositoryName !== undefined && output.repositoryName !== null ? output.repositoryName : undefined,
    };
};
var deserializeAws_json1_1PostCommentReplyOutput = function (output, context) {
    return {
        comment: output.comment !== undefined && output.comment !== null
            ? deserializeAws_json1_1Comment(output.comment, context)
            : undefined,
    };
};
var deserializeAws_json1_1PullRequest = function (output, context) {
    return {
        approvalRules: output.approvalRules !== undefined && output.approvalRules !== null
            ? deserializeAws_json1_1ApprovalRulesList(output.approvalRules, context)
            : undefined,
        authorArn: output.authorArn !== undefined && output.authorArn !== null ? output.authorArn : undefined,
        clientRequestToken: output.clientRequestToken !== undefined && output.clientRequestToken !== null
            ? output.clientRequestToken
            : undefined,
        creationDate: output.creationDate !== undefined && output.creationDate !== null
            ? new Date(Math.round(output.creationDate * 1000))
            : undefined,
        description: output.description !== undefined && output.description !== null ? output.description : undefined,
        lastActivityDate: output.lastActivityDate !== undefined && output.lastActivityDate !== null
            ? new Date(Math.round(output.lastActivityDate * 1000))
            : undefined,
        pullRequestId: output.pullRequestId !== undefined && output.pullRequestId !== null ? output.pullRequestId : undefined,
        pullRequestStatus: output.pullRequestStatus !== undefined && output.pullRequestStatus !== null
            ? output.pullRequestStatus
            : undefined,
        pullRequestTargets: output.pullRequestTargets !== undefined && output.pullRequestTargets !== null
            ? deserializeAws_json1_1PullRequestTargetList(output.pullRequestTargets, context)
            : undefined,
        revisionId: output.revisionId !== undefined && output.revisionId !== null ? output.revisionId : undefined,
        title: output.title !== undefined && output.title !== null ? output.title : undefined,
    };
};
var deserializeAws_json1_1PullRequestAlreadyClosedException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1PullRequestApprovalRulesNotSatisfiedException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1PullRequestCannotBeApprovedByAuthorException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1PullRequestCreatedEventMetadata = function (output, context) {
    return {
        destinationCommitId: output.destinationCommitId !== undefined && output.destinationCommitId !== null
            ? output.destinationCommitId
            : undefined,
        mergeBase: output.mergeBase !== undefined && output.mergeBase !== null ? output.mergeBase : undefined,
        repositoryName: output.repositoryName !== undefined && output.repositoryName !== null ? output.repositoryName : undefined,
        sourceCommitId: output.sourceCommitId !== undefined && output.sourceCommitId !== null ? output.sourceCommitId : undefined,
    };
};
var deserializeAws_json1_1PullRequestDoesNotExistException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1PullRequestEvent = function (output, context) {
    return {
        actorArn: output.actorArn !== undefined && output.actorArn !== null ? output.actorArn : undefined,
        approvalRuleEventMetadata: output.approvalRuleEventMetadata !== undefined && output.approvalRuleEventMetadata !== null
            ? deserializeAws_json1_1ApprovalRuleEventMetadata(output.approvalRuleEventMetadata, context)
            : undefined,
        approvalRuleOverriddenEventMetadata: output.approvalRuleOverriddenEventMetadata !== undefined && output.approvalRuleOverriddenEventMetadata !== null
            ? deserializeAws_json1_1ApprovalRuleOverriddenEventMetadata(output.approvalRuleOverriddenEventMetadata, context)
            : undefined,
        approvalStateChangedEventMetadata: output.approvalStateChangedEventMetadata !== undefined && output.approvalStateChangedEventMetadata !== null
            ? deserializeAws_json1_1ApprovalStateChangedEventMetadata(output.approvalStateChangedEventMetadata, context)
            : undefined,
        eventDate: output.eventDate !== undefined && output.eventDate !== null
            ? new Date(Math.round(output.eventDate * 1000))
            : undefined,
        pullRequestCreatedEventMetadata: output.pullRequestCreatedEventMetadata !== undefined && output.pullRequestCreatedEventMetadata !== null
            ? deserializeAws_json1_1PullRequestCreatedEventMetadata(output.pullRequestCreatedEventMetadata, context)
            : undefined,
        pullRequestEventType: output.pullRequestEventType !== undefined && output.pullRequestEventType !== null
            ? output.pullRequestEventType
            : undefined,
        pullRequestId: output.pullRequestId !== undefined && output.pullRequestId !== null ? output.pullRequestId : undefined,
        pullRequestMergedStateChangedEventMetadata: output.pullRequestMergedStateChangedEventMetadata !== undefined &&
            output.pullRequestMergedStateChangedEventMetadata !== null
            ? deserializeAws_json1_1PullRequestMergedStateChangedEventMetadata(output.pullRequestMergedStateChangedEventMetadata, context)
            : undefined,
        pullRequestSourceReferenceUpdatedEventMetadata: output.pullRequestSourceReferenceUpdatedEventMetadata !== undefined &&
            output.pullRequestSourceReferenceUpdatedEventMetadata !== null
            ? deserializeAws_json1_1PullRequestSourceReferenceUpdatedEventMetadata(output.pullRequestSourceReferenceUpdatedEventMetadata, context)
            : undefined,
        pullRequestStatusChangedEventMetadata: output.pullRequestStatusChangedEventMetadata !== undefined &&
            output.pullRequestStatusChangedEventMetadata !== null
            ? deserializeAws_json1_1PullRequestStatusChangedEventMetadata(output.pullRequestStatusChangedEventMetadata, context)
            : undefined,
    };
};
var deserializeAws_json1_1PullRequestEventList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1PullRequestEvent(entry, context);
    });
};
var deserializeAws_json1_1PullRequestIdList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
var deserializeAws_json1_1PullRequestIdRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1PullRequestMergedStateChangedEventMetadata = function (output, context) {
    return {
        destinationReference: output.destinationReference !== undefined && output.destinationReference !== null
            ? output.destinationReference
            : undefined,
        mergeMetadata: output.mergeMetadata !== undefined && output.mergeMetadata !== null
            ? deserializeAws_json1_1MergeMetadata(output.mergeMetadata, context)
            : undefined,
        repositoryName: output.repositoryName !== undefined && output.repositoryName !== null ? output.repositoryName : undefined,
    };
};
var deserializeAws_json1_1PullRequestSourceReferenceUpdatedEventMetadata = function (output, context) {
    return {
        afterCommitId: output.afterCommitId !== undefined && output.afterCommitId !== null ? output.afterCommitId : undefined,
        beforeCommitId: output.beforeCommitId !== undefined && output.beforeCommitId !== null ? output.beforeCommitId : undefined,
        mergeBase: output.mergeBase !== undefined && output.mergeBase !== null ? output.mergeBase : undefined,
        repositoryName: output.repositoryName !== undefined && output.repositoryName !== null ? output.repositoryName : undefined,
    };
};
var deserializeAws_json1_1PullRequestStatusChangedEventMetadata = function (output, context) {
    return {
        pullRequestStatus: output.pullRequestStatus !== undefined && output.pullRequestStatus !== null
            ? output.pullRequestStatus
            : undefined,
    };
};
var deserializeAws_json1_1PullRequestStatusRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1PullRequestTarget = function (output, context) {
    return {
        destinationCommit: output.destinationCommit !== undefined && output.destinationCommit !== null
            ? output.destinationCommit
            : undefined,
        destinationReference: output.destinationReference !== undefined && output.destinationReference !== null
            ? output.destinationReference
            : undefined,
        mergeBase: output.mergeBase !== undefined && output.mergeBase !== null ? output.mergeBase : undefined,
        mergeMetadata: output.mergeMetadata !== undefined && output.mergeMetadata !== null
            ? deserializeAws_json1_1MergeMetadata(output.mergeMetadata, context)
            : undefined,
        repositoryName: output.repositoryName !== undefined && output.repositoryName !== null ? output.repositoryName : undefined,
        sourceCommit: output.sourceCommit !== undefined && output.sourceCommit !== null ? output.sourceCommit : undefined,
        sourceReference: output.sourceReference !== undefined && output.sourceReference !== null ? output.sourceReference : undefined,
    };
};
var deserializeAws_json1_1PullRequestTargetList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1PullRequestTarget(entry, context);
    });
};
var deserializeAws_json1_1PutFileEntryConflictException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1PutFileOutput = function (output, context) {
    return {
        blobId: output.blobId !== undefined && output.blobId !== null ? output.blobId : undefined,
        commitId: output.commitId !== undefined && output.commitId !== null ? output.commitId : undefined,
        treeId: output.treeId !== undefined && output.treeId !== null ? output.treeId : undefined,
    };
};
var deserializeAws_json1_1PutRepositoryTriggersOutput = function (output, context) {
    return {
        configurationId: output.configurationId !== undefined && output.configurationId !== null ? output.configurationId : undefined,
    };
};
var deserializeAws_json1_1ReactionCountsMap = function (output, context) {
    return Object.entries(output).reduce(function (acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        if (value === null) {
            return acc;
        }
        return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));
    }, {});
};
var deserializeAws_json1_1ReactionForComment = function (output, context) {
    return {
        reaction: output.reaction !== undefined && output.reaction !== null
            ? deserializeAws_json1_1ReactionValueFormats(output.reaction, context)
            : undefined,
        reactionUsers: output.reactionUsers !== undefined && output.reactionUsers !== null
            ? deserializeAws_json1_1ReactionUsersList(output.reactionUsers, context)
            : undefined,
        reactionsFromDeletedUsersCount: output.reactionsFromDeletedUsersCount !== undefined && output.reactionsFromDeletedUsersCount !== null
            ? output.reactionsFromDeletedUsersCount
            : undefined,
    };
};
var deserializeAws_json1_1ReactionLimitExceededException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1ReactionsForCommentList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ReactionForComment(entry, context);
    });
};
var deserializeAws_json1_1ReactionUsersList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
var deserializeAws_json1_1ReactionValueFormats = function (output, context) {
    return {
        emoji: output.emoji !== undefined && output.emoji !== null ? output.emoji : undefined,
        shortCode: output.shortCode !== undefined && output.shortCode !== null ? output.shortCode : undefined,
        unicode: output.unicode !== undefined && output.unicode !== null ? output.unicode : undefined,
    };
};
var deserializeAws_json1_1ReactionValueRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1ReferenceDoesNotExistException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1ReferenceNameRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1ReferenceTypeNotSupportedException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1ReplacementContentRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1ReplacementTypeRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1RepositoryDoesNotExistException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1RepositoryLimitExceededException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1RepositoryMetadata = function (output, context) {
    return {
        Arn: output.Arn !== undefined && output.Arn !== null ? output.Arn : undefined,
        accountId: output.accountId !== undefined && output.accountId !== null ? output.accountId : undefined,
        cloneUrlHttp: output.cloneUrlHttp !== undefined && output.cloneUrlHttp !== null ? output.cloneUrlHttp : undefined,
        cloneUrlSsh: output.cloneUrlSsh !== undefined && output.cloneUrlSsh !== null ? output.cloneUrlSsh : undefined,
        creationDate: output.creationDate !== undefined && output.creationDate !== null
            ? new Date(Math.round(output.creationDate * 1000))
            : undefined,
        defaultBranch: output.defaultBranch !== undefined && output.defaultBranch !== null ? output.defaultBranch : undefined,
        lastModifiedDate: output.lastModifiedDate !== undefined && output.lastModifiedDate !== null
            ? new Date(Math.round(output.lastModifiedDate * 1000))
            : undefined,
        repositoryDescription: output.repositoryDescription !== undefined && output.repositoryDescription !== null
            ? output.repositoryDescription
            : undefined,
        repositoryId: output.repositoryId !== undefined && output.repositoryId !== null ? output.repositoryId : undefined,
        repositoryName: output.repositoryName !== undefined && output.repositoryName !== null ? output.repositoryName : undefined,
    };
};
var deserializeAws_json1_1RepositoryMetadataList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RepositoryMetadata(entry, context);
    });
};
var deserializeAws_json1_1RepositoryNameExistsException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1RepositoryNameIdPair = function (output, context) {
    return {
        repositoryId: output.repositoryId !== undefined && output.repositoryId !== null ? output.repositoryId : undefined,
        repositoryName: output.repositoryName !== undefined && output.repositoryName !== null ? output.repositoryName : undefined,
    };
};
var deserializeAws_json1_1RepositoryNameIdPairList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RepositoryNameIdPair(entry, context);
    });
};
var deserializeAws_json1_1RepositoryNameList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
var deserializeAws_json1_1RepositoryNameRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1RepositoryNamesRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1RepositoryNotAssociatedWithPullRequestException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1RepositoryNotFoundList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
var deserializeAws_json1_1RepositoryTrigger = function (output, context) {
    return {
        branches: output.branches !== undefined && output.branches !== null
            ? deserializeAws_json1_1BranchNameList(output.branches, context)
            : undefined,
        customData: output.customData !== undefined && output.customData !== null ? output.customData : undefined,
        destinationArn: output.destinationArn !== undefined && output.destinationArn !== null ? output.destinationArn : undefined,
        events: output.events !== undefined && output.events !== null
            ? deserializeAws_json1_1RepositoryTriggerEventList(output.events, context)
            : undefined,
        name: output.name !== undefined && output.name !== null ? output.name : undefined,
    };
};
var deserializeAws_json1_1RepositoryTriggerBranchNameListRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1RepositoryTriggerDestinationArnRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1RepositoryTriggerEventList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
var deserializeAws_json1_1RepositoryTriggerEventsListRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1RepositoryTriggerExecutionFailure = function (output, context) {
    return {
        failureMessage: output.failureMessage !== undefined && output.failureMessage !== null ? output.failureMessage : undefined,
        trigger: output.trigger !== undefined && output.trigger !== null ? output.trigger : undefined,
    };
};
var deserializeAws_json1_1RepositoryTriggerExecutionFailureList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RepositoryTriggerExecutionFailure(entry, context);
    });
};
var deserializeAws_json1_1RepositoryTriggerNameList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
var deserializeAws_json1_1RepositoryTriggerNameRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1RepositoryTriggersList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RepositoryTrigger(entry, context);
    });
};
var deserializeAws_json1_1RepositoryTriggersListRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1ResourceArnRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1RestrictedSourceFileException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1RevisionIdRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1RevisionNotCurrentException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1SameFileContentException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1SamePathRequestException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1SourceAndDestinationAreSameException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1SourceFileOrContentRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1SubModule = function (output, context) {
    return {
        absolutePath: output.absolutePath !== undefined && output.absolutePath !== null ? output.absolutePath : undefined,
        commitId: output.commitId !== undefined && output.commitId !== null ? output.commitId : undefined,
        relativePath: output.relativePath !== undefined && output.relativePath !== null ? output.relativePath : undefined,
    };
};
var deserializeAws_json1_1SubModuleList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SubModule(entry, context);
    });
};
var deserializeAws_json1_1SymbolicLink = function (output, context) {
    return {
        absolutePath: output.absolutePath !== undefined && output.absolutePath !== null ? output.absolutePath : undefined,
        blobId: output.blobId !== undefined && output.blobId !== null ? output.blobId : undefined,
        fileMode: output.fileMode !== undefined && output.fileMode !== null ? output.fileMode : undefined,
        relativePath: output.relativePath !== undefined && output.relativePath !== null ? output.relativePath : undefined,
    };
};
var deserializeAws_json1_1SymbolicLinkList = function (output, context) {
    return (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SymbolicLink(entry, context);
    });
};
var deserializeAws_json1_1TagKeysListRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1TagPolicyException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1TagsMap = function (output, context) {
    return Object.entries(output).reduce(function (acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        if (value === null) {
            return acc;
        }
        return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));
    }, {});
};
var deserializeAws_json1_1TagsMapRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1TargetRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1TargetsRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1TestRepositoryTriggersOutput = function (output, context) {
    return {
        failedExecutions: output.failedExecutions !== undefined && output.failedExecutions !== null
            ? deserializeAws_json1_1RepositoryTriggerExecutionFailureList(output.failedExecutions, context)
            : undefined,
        successfulExecutions: output.successfulExecutions !== undefined && output.successfulExecutions !== null
            ? deserializeAws_json1_1RepositoryTriggerNameList(output.successfulExecutions, context)
            : undefined,
    };
};
var deserializeAws_json1_1TipOfSourceReferenceIsDifferentException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1TipsDivergenceExceededException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1TitleRequiredException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1TooManyTagsException = function (output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
    };
};
var deserializeAws_json1_1UpdateApprovalRuleTemplateContentOutput = function (output, context) {
    return {
        approvalRuleTemplate: output.approvalRuleTemplate !== undefined && output.approvalRuleTemplate !== null
            ? deserializeAws_json1_1ApprovalRuleTemplate(output.approvalRuleTemplate, context)
            : undefined,
    };
};
var deserializeAws_json1_1UpdateApprovalRuleTemplateDescriptionOutput = function (output, context) {
    return {
        approvalRuleTemplate: output.approvalRuleTemplate !== undefined && output.approvalRuleTemplate !== null
            ? deserializeAws_json1_1ApprovalRuleTemplate(output.approvalRuleTemplate, context)
            : undefined,
    };
};
var deserializeAws_json1_1UpdateApprovalRuleTemplateNameOutput = function (output, context) {
    return {
        approvalRuleTemplate: output.approvalRuleTemplate !== undefined && output.approvalRuleTemplate !== null
            ? deserializeAws_json1_1ApprovalRuleTemplate(output.approvalRuleTemplate, context)
            : undefined,
    };
};
var deserializeAws_json1_1UpdateCommentOutput = function (output, context) {
    return {
        comment: output.comment !== undefined && output.comment !== null
            ? deserializeAws_json1_1Comment(output.comment, context)
            : undefined,
    };
};
var deserializeAws_json1_1UpdatePullRequestApprovalRuleContentOutput = function (output, context) {
    return {
        approvalRule: output.approvalRule !== undefined && output.approvalRule !== null
            ? deserializeAws_json1_1ApprovalRule(output.approvalRule, context)
            : undefined,
    };
};
var deserializeAws_json1_1UpdatePullRequestDescriptionOutput = function (output, context) {
    return {
        pullRequest: output.pullRequest !== undefined && output.pullRequest !== null
            ? deserializeAws_json1_1PullRequest(output.pullRequest, context)
            : undefined,
    };
};
var deserializeAws_json1_1UpdatePullRequestStatusOutput = function (output, context) {
    return {
        pullRequest: output.pullRequest !== undefined && output.pullRequest !== null
            ? deserializeAws_json1_1PullRequest(output.pullRequest, context)
            : undefined,
    };
};
var deserializeAws_json1_1UpdatePullRequestTitleOutput = function (output, context) {
    return {
        pullRequest: output.pullRequest !== undefined && output.pullRequest !== null
            ? deserializeAws_json1_1PullRequest(output.pullRequest, context)
            : undefined,
    };
};
var deserializeAws_json1_1UserInfo = function (output, context) {
    return {
        date: output.date !== undefined && output.date !== null ? output.date : undefined,
        email: output.email !== undefined && output.email !== null ? output.email : undefined,
        name: output.name !== undefined && output.name !== null ? output.name : undefined,
    };
};
var deserializeMetadata = function (output) {
    var _a;
    return ({
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"],
    });
};
// Collect low-level response body stream to Uint8Array.
var collectBody = function (streamBody, context) {
    if (streamBody === void 0) { streamBody = new Uint8Array(); }
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
// Encode Uint8Array data into string with utf-8.
var collectBodyString = function (streamBody, context) {
    return collectBody(streamBody, context).then(function (body) { return context.utf8Encoder(body); });
};
var buildHttpRpcRequest = function (context, headers, path, resolvedHostname, body) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4 /*yield*/, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                contents = {
                    protocol: protocol,
                    hostname: hostname,
                    port: port,
                    method: "POST",
                    path: path,
                    headers: headers,
                };
                if (resolvedHostname !== undefined) {
                    contents.hostname = resolvedHostname;
                }
                if (body !== undefined) {
                    contents.body = body;
                }
                return [2 /*return*/, new __HttpRequest(contents)];
        }
    });
}); };
var parseBody = function (streamBody, context) {
    return collectBodyString(streamBody, context).then(function (encoded) {
        if (encoded.length) {
            return JSON.parse(encoded);
        }
        return {};
    });
};
/**
 * Load an error code for the aws.rest-json-1.1 protocol.
 */
var loadRestJsonErrorCode = function (output, data) {
    var findKey = function (object, key) { return Object.keys(object).find(function (k) { return k.toLowerCase() === key.toLowerCase(); }); };
    var sanitizeErrorCode = function (rawValue) {
        var cleanValue = rawValue;
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    var headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
    return "";
};
//# sourceMappingURL=Aws_json1_1.js.map