"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeAws_json1_1DeleteAppCommand = exports.serializeAws_json1_1DeleteAlgorithmCommand = exports.serializeAws_json1_1DeleteActionCommand = exports.serializeAws_json1_1CreateWorkteamCommand = exports.serializeAws_json1_1CreateWorkforceCommand = exports.serializeAws_json1_1CreateUserProfileCommand = exports.serializeAws_json1_1CreateTrialComponentCommand = exports.serializeAws_json1_1CreateTrialCommand = exports.serializeAws_json1_1CreateTransformJobCommand = exports.serializeAws_json1_1CreateTrainingJobCommand = exports.serializeAws_json1_1CreateProjectCommand = exports.serializeAws_json1_1CreateProcessingJobCommand = exports.serializeAws_json1_1CreatePresignedNotebookInstanceUrlCommand = exports.serializeAws_json1_1CreatePresignedDomainUrlCommand = exports.serializeAws_json1_1CreatePipelineCommand = exports.serializeAws_json1_1CreateNotebookInstanceLifecycleConfigCommand = exports.serializeAws_json1_1CreateNotebookInstanceCommand = exports.serializeAws_json1_1CreateMonitoringScheduleCommand = exports.serializeAws_json1_1CreateModelQualityJobDefinitionCommand = exports.serializeAws_json1_1CreateModelPackageGroupCommand = exports.serializeAws_json1_1CreateModelPackageCommand = exports.serializeAws_json1_1CreateModelExplainabilityJobDefinitionCommand = exports.serializeAws_json1_1CreateModelBiasJobDefinitionCommand = exports.serializeAws_json1_1CreateModelCommand = exports.serializeAws_json1_1CreateLabelingJobCommand = exports.serializeAws_json1_1CreateImageVersionCommand = exports.serializeAws_json1_1CreateImageCommand = exports.serializeAws_json1_1CreateHyperParameterTuningJobCommand = exports.serializeAws_json1_1CreateHumanTaskUiCommand = exports.serializeAws_json1_1CreateFlowDefinitionCommand = exports.serializeAws_json1_1CreateFeatureGroupCommand = exports.serializeAws_json1_1CreateExperimentCommand = exports.serializeAws_json1_1CreateEndpointConfigCommand = exports.serializeAws_json1_1CreateEndpointCommand = exports.serializeAws_json1_1CreateEdgePackagingJobCommand = exports.serializeAws_json1_1CreateDomainCommand = exports.serializeAws_json1_1CreateDeviceFleetCommand = exports.serializeAws_json1_1CreateDataQualityJobDefinitionCommand = exports.serializeAws_json1_1CreateContextCommand = exports.serializeAws_json1_1CreateCompilationJobCommand = exports.serializeAws_json1_1CreateCodeRepositoryCommand = exports.serializeAws_json1_1CreateAutoMLJobCommand = exports.serializeAws_json1_1CreateArtifactCommand = exports.serializeAws_json1_1CreateAppImageConfigCommand = exports.serializeAws_json1_1CreateAppCommand = exports.serializeAws_json1_1CreateAlgorithmCommand = exports.serializeAws_json1_1CreateActionCommand = exports.serializeAws_json1_1AssociateTrialComponentCommand = exports.serializeAws_json1_1AddTagsCommand = exports.serializeAws_json1_1AddAssociationCommand = void 0;
exports.serializeAws_json1_1DescribeEndpointCommand = exports.serializeAws_json1_1DescribeEdgePackagingJobCommand = exports.serializeAws_json1_1DescribeDomainCommand = exports.serializeAws_json1_1DescribeDeviceFleetCommand = exports.serializeAws_json1_1DescribeDeviceCommand = exports.serializeAws_json1_1DescribeDataQualityJobDefinitionCommand = exports.serializeAws_json1_1DescribeContextCommand = exports.serializeAws_json1_1DescribeCompilationJobCommand = exports.serializeAws_json1_1DescribeCodeRepositoryCommand = exports.serializeAws_json1_1DescribeAutoMLJobCommand = exports.serializeAws_json1_1DescribeArtifactCommand = exports.serializeAws_json1_1DescribeAppImageConfigCommand = exports.serializeAws_json1_1DescribeAppCommand = exports.serializeAws_json1_1DescribeAlgorithmCommand = exports.serializeAws_json1_1DescribeActionCommand = exports.serializeAws_json1_1DeregisterDevicesCommand = exports.serializeAws_json1_1DeleteWorkteamCommand = exports.serializeAws_json1_1DeleteWorkforceCommand = exports.serializeAws_json1_1DeleteUserProfileCommand = exports.serializeAws_json1_1DeleteTrialComponentCommand = exports.serializeAws_json1_1DeleteTrialCommand = exports.serializeAws_json1_1DeleteTagsCommand = exports.serializeAws_json1_1DeleteProjectCommand = exports.serializeAws_json1_1DeletePipelineCommand = exports.serializeAws_json1_1DeleteNotebookInstanceLifecycleConfigCommand = exports.serializeAws_json1_1DeleteNotebookInstanceCommand = exports.serializeAws_json1_1DeleteMonitoringScheduleCommand = exports.serializeAws_json1_1DeleteModelQualityJobDefinitionCommand = exports.serializeAws_json1_1DeleteModelPackageGroupPolicyCommand = exports.serializeAws_json1_1DeleteModelPackageGroupCommand = exports.serializeAws_json1_1DeleteModelPackageCommand = exports.serializeAws_json1_1DeleteModelExplainabilityJobDefinitionCommand = exports.serializeAws_json1_1DeleteModelBiasJobDefinitionCommand = exports.serializeAws_json1_1DeleteModelCommand = exports.serializeAws_json1_1DeleteImageVersionCommand = exports.serializeAws_json1_1DeleteImageCommand = exports.serializeAws_json1_1DeleteHumanTaskUiCommand = exports.serializeAws_json1_1DeleteFlowDefinitionCommand = exports.serializeAws_json1_1DeleteFeatureGroupCommand = exports.serializeAws_json1_1DeleteExperimentCommand = exports.serializeAws_json1_1DeleteEndpointConfigCommand = exports.serializeAws_json1_1DeleteEndpointCommand = exports.serializeAws_json1_1DeleteDomainCommand = exports.serializeAws_json1_1DeleteDeviceFleetCommand = exports.serializeAws_json1_1DeleteDataQualityJobDefinitionCommand = exports.serializeAws_json1_1DeleteContextCommand = exports.serializeAws_json1_1DeleteCodeRepositoryCommand = exports.serializeAws_json1_1DeleteAssociationCommand = exports.serializeAws_json1_1DeleteArtifactCommand = exports.serializeAws_json1_1DeleteAppImageConfigCommand = void 0;
exports.serializeAws_json1_1ListDataQualityJobDefinitionsCommand = exports.serializeAws_json1_1ListContextsCommand = exports.serializeAws_json1_1ListCompilationJobsCommand = exports.serializeAws_json1_1ListCodeRepositoriesCommand = exports.serializeAws_json1_1ListCandidatesForAutoMLJobCommand = exports.serializeAws_json1_1ListAutoMLJobsCommand = exports.serializeAws_json1_1ListAssociationsCommand = exports.serializeAws_json1_1ListArtifactsCommand = exports.serializeAws_json1_1ListAppsCommand = exports.serializeAws_json1_1ListAppImageConfigsCommand = exports.serializeAws_json1_1ListAlgorithmsCommand = exports.serializeAws_json1_1ListActionsCommand = exports.serializeAws_json1_1GetSearchSuggestionsCommand = exports.serializeAws_json1_1GetSagemakerServicecatalogPortfolioStatusCommand = exports.serializeAws_json1_1GetModelPackageGroupPolicyCommand = exports.serializeAws_json1_1GetDeviceFleetReportCommand = exports.serializeAws_json1_1EnableSagemakerServicecatalogPortfolioCommand = exports.serializeAws_json1_1DisassociateTrialComponentCommand = exports.serializeAws_json1_1DisableSagemakerServicecatalogPortfolioCommand = exports.serializeAws_json1_1DescribeWorkteamCommand = exports.serializeAws_json1_1DescribeWorkforceCommand = exports.serializeAws_json1_1DescribeUserProfileCommand = exports.serializeAws_json1_1DescribeTrialComponentCommand = exports.serializeAws_json1_1DescribeTrialCommand = exports.serializeAws_json1_1DescribeTransformJobCommand = exports.serializeAws_json1_1DescribeTrainingJobCommand = exports.serializeAws_json1_1DescribeSubscribedWorkteamCommand = exports.serializeAws_json1_1DescribeProjectCommand = exports.serializeAws_json1_1DescribeProcessingJobCommand = exports.serializeAws_json1_1DescribePipelineExecutionCommand = exports.serializeAws_json1_1DescribePipelineDefinitionForExecutionCommand = exports.serializeAws_json1_1DescribePipelineCommand = exports.serializeAws_json1_1DescribeNotebookInstanceLifecycleConfigCommand = exports.serializeAws_json1_1DescribeNotebookInstanceCommand = exports.serializeAws_json1_1DescribeMonitoringScheduleCommand = exports.serializeAws_json1_1DescribeModelQualityJobDefinitionCommand = exports.serializeAws_json1_1DescribeModelPackageGroupCommand = exports.serializeAws_json1_1DescribeModelPackageCommand = exports.serializeAws_json1_1DescribeModelExplainabilityJobDefinitionCommand = exports.serializeAws_json1_1DescribeModelBiasJobDefinitionCommand = exports.serializeAws_json1_1DescribeModelCommand = exports.serializeAws_json1_1DescribeLabelingJobCommand = exports.serializeAws_json1_1DescribeImageVersionCommand = exports.serializeAws_json1_1DescribeImageCommand = exports.serializeAws_json1_1DescribeHyperParameterTuningJobCommand = exports.serializeAws_json1_1DescribeHumanTaskUiCommand = exports.serializeAws_json1_1DescribeFlowDefinitionCommand = exports.serializeAws_json1_1DescribeFeatureGroupCommand = exports.serializeAws_json1_1DescribeExperimentCommand = exports.serializeAws_json1_1DescribeEndpointConfigCommand = void 0;
exports.serializeAws_json1_1StopCompilationJobCommand = exports.serializeAws_json1_1StopAutoMLJobCommand = exports.serializeAws_json1_1StartPipelineExecutionCommand = exports.serializeAws_json1_1StartNotebookInstanceCommand = exports.serializeAws_json1_1StartMonitoringScheduleCommand = exports.serializeAws_json1_1SearchCommand = exports.serializeAws_json1_1RenderUiTemplateCommand = exports.serializeAws_json1_1RegisterDevicesCommand = exports.serializeAws_json1_1PutModelPackageGroupPolicyCommand = exports.serializeAws_json1_1ListWorkteamsCommand = exports.serializeAws_json1_1ListWorkforcesCommand = exports.serializeAws_json1_1ListUserProfilesCommand = exports.serializeAws_json1_1ListTrialsCommand = exports.serializeAws_json1_1ListTrialComponentsCommand = exports.serializeAws_json1_1ListTransformJobsCommand = exports.serializeAws_json1_1ListTrainingJobsForHyperParameterTuningJobCommand = exports.serializeAws_json1_1ListTrainingJobsCommand = exports.serializeAws_json1_1ListTagsCommand = exports.serializeAws_json1_1ListSubscribedWorkteamsCommand = exports.serializeAws_json1_1ListProjectsCommand = exports.serializeAws_json1_1ListProcessingJobsCommand = exports.serializeAws_json1_1ListPipelinesCommand = exports.serializeAws_json1_1ListPipelineParametersForExecutionCommand = exports.serializeAws_json1_1ListPipelineExecutionStepsCommand = exports.serializeAws_json1_1ListPipelineExecutionsCommand = exports.serializeAws_json1_1ListNotebookInstancesCommand = exports.serializeAws_json1_1ListNotebookInstanceLifecycleConfigsCommand = exports.serializeAws_json1_1ListMonitoringSchedulesCommand = exports.serializeAws_json1_1ListMonitoringExecutionsCommand = exports.serializeAws_json1_1ListModelsCommand = exports.serializeAws_json1_1ListModelQualityJobDefinitionsCommand = exports.serializeAws_json1_1ListModelPackagesCommand = exports.serializeAws_json1_1ListModelPackageGroupsCommand = exports.serializeAws_json1_1ListModelExplainabilityJobDefinitionsCommand = exports.serializeAws_json1_1ListModelBiasJobDefinitionsCommand = exports.serializeAws_json1_1ListLabelingJobsForWorkteamCommand = exports.serializeAws_json1_1ListLabelingJobsCommand = exports.serializeAws_json1_1ListImageVersionsCommand = exports.serializeAws_json1_1ListImagesCommand = exports.serializeAws_json1_1ListHyperParameterTuningJobsCommand = exports.serializeAws_json1_1ListHumanTaskUisCommand = exports.serializeAws_json1_1ListFlowDefinitionsCommand = exports.serializeAws_json1_1ListFeatureGroupsCommand = exports.serializeAws_json1_1ListExperimentsCommand = exports.serializeAws_json1_1ListEndpointsCommand = exports.serializeAws_json1_1ListEndpointConfigsCommand = exports.serializeAws_json1_1ListEdgePackagingJobsCommand = exports.serializeAws_json1_1ListDomainsCommand = exports.serializeAws_json1_1ListDevicesCommand = exports.serializeAws_json1_1ListDeviceFleetsCommand = void 0;
exports.deserializeAws_json1_1CreateEndpointCommand = exports.deserializeAws_json1_1CreateEdgePackagingJobCommand = exports.deserializeAws_json1_1CreateDomainCommand = exports.deserializeAws_json1_1CreateDeviceFleetCommand = exports.deserializeAws_json1_1CreateDataQualityJobDefinitionCommand = exports.deserializeAws_json1_1CreateContextCommand = exports.deserializeAws_json1_1CreateCompilationJobCommand = exports.deserializeAws_json1_1CreateCodeRepositoryCommand = exports.deserializeAws_json1_1CreateAutoMLJobCommand = exports.deserializeAws_json1_1CreateArtifactCommand = exports.deserializeAws_json1_1CreateAppImageConfigCommand = exports.deserializeAws_json1_1CreateAppCommand = exports.deserializeAws_json1_1CreateAlgorithmCommand = exports.deserializeAws_json1_1CreateActionCommand = exports.deserializeAws_json1_1AssociateTrialComponentCommand = exports.deserializeAws_json1_1AddTagsCommand = exports.deserializeAws_json1_1AddAssociationCommand = exports.serializeAws_json1_1UpdateWorkteamCommand = exports.serializeAws_json1_1UpdateWorkforceCommand = exports.serializeAws_json1_1UpdateUserProfileCommand = exports.serializeAws_json1_1UpdateTrialComponentCommand = exports.serializeAws_json1_1UpdateTrialCommand = exports.serializeAws_json1_1UpdateTrainingJobCommand = exports.serializeAws_json1_1UpdatePipelineExecutionCommand = exports.serializeAws_json1_1UpdatePipelineCommand = exports.serializeAws_json1_1UpdateNotebookInstanceLifecycleConfigCommand = exports.serializeAws_json1_1UpdateNotebookInstanceCommand = exports.serializeAws_json1_1UpdateMonitoringScheduleCommand = exports.serializeAws_json1_1UpdateModelPackageCommand = exports.serializeAws_json1_1UpdateImageCommand = exports.serializeAws_json1_1UpdateExperimentCommand = exports.serializeAws_json1_1UpdateEndpointWeightsAndCapacitiesCommand = exports.serializeAws_json1_1UpdateEndpointCommand = exports.serializeAws_json1_1UpdateDomainCommand = exports.serializeAws_json1_1UpdateDevicesCommand = exports.serializeAws_json1_1UpdateDeviceFleetCommand = exports.serializeAws_json1_1UpdateContextCommand = exports.serializeAws_json1_1UpdateCodeRepositoryCommand = exports.serializeAws_json1_1UpdateArtifactCommand = exports.serializeAws_json1_1UpdateAppImageConfigCommand = exports.serializeAws_json1_1UpdateActionCommand = exports.serializeAws_json1_1StopTransformJobCommand = exports.serializeAws_json1_1StopTrainingJobCommand = exports.serializeAws_json1_1StopProcessingJobCommand = exports.serializeAws_json1_1StopPipelineExecutionCommand = exports.serializeAws_json1_1StopNotebookInstanceCommand = exports.serializeAws_json1_1StopMonitoringScheduleCommand = exports.serializeAws_json1_1StopLabelingJobCommand = exports.serializeAws_json1_1StopHyperParameterTuningJobCommand = exports.serializeAws_json1_1StopEdgePackagingJobCommand = void 0;
exports.deserializeAws_json1_1DeleteModelCommand = exports.deserializeAws_json1_1DeleteImageVersionCommand = exports.deserializeAws_json1_1DeleteImageCommand = exports.deserializeAws_json1_1DeleteHumanTaskUiCommand = exports.deserializeAws_json1_1DeleteFlowDefinitionCommand = exports.deserializeAws_json1_1DeleteFeatureGroupCommand = exports.deserializeAws_json1_1DeleteExperimentCommand = exports.deserializeAws_json1_1DeleteEndpointConfigCommand = exports.deserializeAws_json1_1DeleteEndpointCommand = exports.deserializeAws_json1_1DeleteDomainCommand = exports.deserializeAws_json1_1DeleteDeviceFleetCommand = exports.deserializeAws_json1_1DeleteDataQualityJobDefinitionCommand = exports.deserializeAws_json1_1DeleteContextCommand = exports.deserializeAws_json1_1DeleteCodeRepositoryCommand = exports.deserializeAws_json1_1DeleteAssociationCommand = exports.deserializeAws_json1_1DeleteArtifactCommand = exports.deserializeAws_json1_1DeleteAppImageConfigCommand = exports.deserializeAws_json1_1DeleteAppCommand = exports.deserializeAws_json1_1DeleteAlgorithmCommand = exports.deserializeAws_json1_1DeleteActionCommand = exports.deserializeAws_json1_1CreateWorkteamCommand = exports.deserializeAws_json1_1CreateWorkforceCommand = exports.deserializeAws_json1_1CreateUserProfileCommand = exports.deserializeAws_json1_1CreateTrialComponentCommand = exports.deserializeAws_json1_1CreateTrialCommand = exports.deserializeAws_json1_1CreateTransformJobCommand = exports.deserializeAws_json1_1CreateTrainingJobCommand = exports.deserializeAws_json1_1CreateProjectCommand = exports.deserializeAws_json1_1CreateProcessingJobCommand = exports.deserializeAws_json1_1CreatePresignedNotebookInstanceUrlCommand = exports.deserializeAws_json1_1CreatePresignedDomainUrlCommand = exports.deserializeAws_json1_1CreatePipelineCommand = exports.deserializeAws_json1_1CreateNotebookInstanceLifecycleConfigCommand = exports.deserializeAws_json1_1CreateNotebookInstanceCommand = exports.deserializeAws_json1_1CreateMonitoringScheduleCommand = exports.deserializeAws_json1_1CreateModelQualityJobDefinitionCommand = exports.deserializeAws_json1_1CreateModelPackageGroupCommand = exports.deserializeAws_json1_1CreateModelPackageCommand = exports.deserializeAws_json1_1CreateModelExplainabilityJobDefinitionCommand = exports.deserializeAws_json1_1CreateModelBiasJobDefinitionCommand = exports.deserializeAws_json1_1CreateModelCommand = exports.deserializeAws_json1_1CreateLabelingJobCommand = exports.deserializeAws_json1_1CreateImageVersionCommand = exports.deserializeAws_json1_1CreateImageCommand = exports.deserializeAws_json1_1CreateHyperParameterTuningJobCommand = exports.deserializeAws_json1_1CreateHumanTaskUiCommand = exports.deserializeAws_json1_1CreateFlowDefinitionCommand = exports.deserializeAws_json1_1CreateFeatureGroupCommand = exports.deserializeAws_json1_1CreateExperimentCommand = exports.deserializeAws_json1_1CreateEndpointConfigCommand = void 0;
exports.deserializeAws_json1_1DescribeNotebookInstanceCommand = exports.deserializeAws_json1_1DescribeMonitoringScheduleCommand = exports.deserializeAws_json1_1DescribeModelQualityJobDefinitionCommand = exports.deserializeAws_json1_1DescribeModelPackageGroupCommand = exports.deserializeAws_json1_1DescribeModelPackageCommand = exports.deserializeAws_json1_1DescribeModelExplainabilityJobDefinitionCommand = exports.deserializeAws_json1_1DescribeModelBiasJobDefinitionCommand = exports.deserializeAws_json1_1DescribeModelCommand = exports.deserializeAws_json1_1DescribeLabelingJobCommand = exports.deserializeAws_json1_1DescribeImageVersionCommand = exports.deserializeAws_json1_1DescribeImageCommand = exports.deserializeAws_json1_1DescribeHyperParameterTuningJobCommand = exports.deserializeAws_json1_1DescribeHumanTaskUiCommand = exports.deserializeAws_json1_1DescribeFlowDefinitionCommand = exports.deserializeAws_json1_1DescribeFeatureGroupCommand = exports.deserializeAws_json1_1DescribeExperimentCommand = exports.deserializeAws_json1_1DescribeEndpointConfigCommand = exports.deserializeAws_json1_1DescribeEndpointCommand = exports.deserializeAws_json1_1DescribeEdgePackagingJobCommand = exports.deserializeAws_json1_1DescribeDomainCommand = exports.deserializeAws_json1_1DescribeDeviceFleetCommand = exports.deserializeAws_json1_1DescribeDeviceCommand = exports.deserializeAws_json1_1DescribeDataQualityJobDefinitionCommand = exports.deserializeAws_json1_1DescribeContextCommand = exports.deserializeAws_json1_1DescribeCompilationJobCommand = exports.deserializeAws_json1_1DescribeCodeRepositoryCommand = exports.deserializeAws_json1_1DescribeAutoMLJobCommand = exports.deserializeAws_json1_1DescribeArtifactCommand = exports.deserializeAws_json1_1DescribeAppImageConfigCommand = exports.deserializeAws_json1_1DescribeAppCommand = exports.deserializeAws_json1_1DescribeAlgorithmCommand = exports.deserializeAws_json1_1DescribeActionCommand = exports.deserializeAws_json1_1DeregisterDevicesCommand = exports.deserializeAws_json1_1DeleteWorkteamCommand = exports.deserializeAws_json1_1DeleteWorkforceCommand = exports.deserializeAws_json1_1DeleteUserProfileCommand = exports.deserializeAws_json1_1DeleteTrialComponentCommand = exports.deserializeAws_json1_1DeleteTrialCommand = exports.deserializeAws_json1_1DeleteTagsCommand = exports.deserializeAws_json1_1DeleteProjectCommand = exports.deserializeAws_json1_1DeletePipelineCommand = exports.deserializeAws_json1_1DeleteNotebookInstanceLifecycleConfigCommand = exports.deserializeAws_json1_1DeleteNotebookInstanceCommand = exports.deserializeAws_json1_1DeleteMonitoringScheduleCommand = exports.deserializeAws_json1_1DeleteModelQualityJobDefinitionCommand = exports.deserializeAws_json1_1DeleteModelPackageGroupPolicyCommand = exports.deserializeAws_json1_1DeleteModelPackageGroupCommand = exports.deserializeAws_json1_1DeleteModelPackageCommand = exports.deserializeAws_json1_1DeleteModelExplainabilityJobDefinitionCommand = exports.deserializeAws_json1_1DeleteModelBiasJobDefinitionCommand = void 0;
exports.deserializeAws_json1_1ListModelExplainabilityJobDefinitionsCommand = exports.deserializeAws_json1_1ListModelBiasJobDefinitionsCommand = exports.deserializeAws_json1_1ListLabelingJobsForWorkteamCommand = exports.deserializeAws_json1_1ListLabelingJobsCommand = exports.deserializeAws_json1_1ListImageVersionsCommand = exports.deserializeAws_json1_1ListImagesCommand = exports.deserializeAws_json1_1ListHyperParameterTuningJobsCommand = exports.deserializeAws_json1_1ListHumanTaskUisCommand = exports.deserializeAws_json1_1ListFlowDefinitionsCommand = exports.deserializeAws_json1_1ListFeatureGroupsCommand = exports.deserializeAws_json1_1ListExperimentsCommand = exports.deserializeAws_json1_1ListEndpointsCommand = exports.deserializeAws_json1_1ListEndpointConfigsCommand = exports.deserializeAws_json1_1ListEdgePackagingJobsCommand = exports.deserializeAws_json1_1ListDomainsCommand = exports.deserializeAws_json1_1ListDevicesCommand = exports.deserializeAws_json1_1ListDeviceFleetsCommand = exports.deserializeAws_json1_1ListDataQualityJobDefinitionsCommand = exports.deserializeAws_json1_1ListContextsCommand = exports.deserializeAws_json1_1ListCompilationJobsCommand = exports.deserializeAws_json1_1ListCodeRepositoriesCommand = exports.deserializeAws_json1_1ListCandidatesForAutoMLJobCommand = exports.deserializeAws_json1_1ListAutoMLJobsCommand = exports.deserializeAws_json1_1ListAssociationsCommand = exports.deserializeAws_json1_1ListArtifactsCommand = exports.deserializeAws_json1_1ListAppsCommand = exports.deserializeAws_json1_1ListAppImageConfigsCommand = exports.deserializeAws_json1_1ListAlgorithmsCommand = exports.deserializeAws_json1_1ListActionsCommand = exports.deserializeAws_json1_1GetSearchSuggestionsCommand = exports.deserializeAws_json1_1GetSagemakerServicecatalogPortfolioStatusCommand = exports.deserializeAws_json1_1GetModelPackageGroupPolicyCommand = exports.deserializeAws_json1_1GetDeviceFleetReportCommand = exports.deserializeAws_json1_1EnableSagemakerServicecatalogPortfolioCommand = exports.deserializeAws_json1_1DisassociateTrialComponentCommand = exports.deserializeAws_json1_1DisableSagemakerServicecatalogPortfolioCommand = exports.deserializeAws_json1_1DescribeWorkteamCommand = exports.deserializeAws_json1_1DescribeWorkforceCommand = exports.deserializeAws_json1_1DescribeUserProfileCommand = exports.deserializeAws_json1_1DescribeTrialComponentCommand = exports.deserializeAws_json1_1DescribeTrialCommand = exports.deserializeAws_json1_1DescribeTransformJobCommand = exports.deserializeAws_json1_1DescribeTrainingJobCommand = exports.deserializeAws_json1_1DescribeSubscribedWorkteamCommand = exports.deserializeAws_json1_1DescribeProjectCommand = exports.deserializeAws_json1_1DescribeProcessingJobCommand = exports.deserializeAws_json1_1DescribePipelineExecutionCommand = exports.deserializeAws_json1_1DescribePipelineDefinitionForExecutionCommand = exports.deserializeAws_json1_1DescribePipelineCommand = exports.deserializeAws_json1_1DescribeNotebookInstanceLifecycleConfigCommand = void 0;
exports.deserializeAws_json1_1UpdateDomainCommand = exports.deserializeAws_json1_1UpdateDevicesCommand = exports.deserializeAws_json1_1UpdateDeviceFleetCommand = exports.deserializeAws_json1_1UpdateContextCommand = exports.deserializeAws_json1_1UpdateCodeRepositoryCommand = exports.deserializeAws_json1_1UpdateArtifactCommand = exports.deserializeAws_json1_1UpdateAppImageConfigCommand = exports.deserializeAws_json1_1UpdateActionCommand = exports.deserializeAws_json1_1StopTransformJobCommand = exports.deserializeAws_json1_1StopTrainingJobCommand = exports.deserializeAws_json1_1StopProcessingJobCommand = exports.deserializeAws_json1_1StopPipelineExecutionCommand = exports.deserializeAws_json1_1StopNotebookInstanceCommand = exports.deserializeAws_json1_1StopMonitoringScheduleCommand = exports.deserializeAws_json1_1StopLabelingJobCommand = exports.deserializeAws_json1_1StopHyperParameterTuningJobCommand = exports.deserializeAws_json1_1StopEdgePackagingJobCommand = exports.deserializeAws_json1_1StopCompilationJobCommand = exports.deserializeAws_json1_1StopAutoMLJobCommand = exports.deserializeAws_json1_1StartPipelineExecutionCommand = exports.deserializeAws_json1_1StartNotebookInstanceCommand = exports.deserializeAws_json1_1StartMonitoringScheduleCommand = exports.deserializeAws_json1_1SearchCommand = exports.deserializeAws_json1_1RenderUiTemplateCommand = exports.deserializeAws_json1_1RegisterDevicesCommand = exports.deserializeAws_json1_1PutModelPackageGroupPolicyCommand = exports.deserializeAws_json1_1ListWorkteamsCommand = exports.deserializeAws_json1_1ListWorkforcesCommand = exports.deserializeAws_json1_1ListUserProfilesCommand = exports.deserializeAws_json1_1ListTrialsCommand = exports.deserializeAws_json1_1ListTrialComponentsCommand = exports.deserializeAws_json1_1ListTransformJobsCommand = exports.deserializeAws_json1_1ListTrainingJobsForHyperParameterTuningJobCommand = exports.deserializeAws_json1_1ListTrainingJobsCommand = exports.deserializeAws_json1_1ListTagsCommand = exports.deserializeAws_json1_1ListSubscribedWorkteamsCommand = exports.deserializeAws_json1_1ListProjectsCommand = exports.deserializeAws_json1_1ListProcessingJobsCommand = exports.deserializeAws_json1_1ListPipelinesCommand = exports.deserializeAws_json1_1ListPipelineParametersForExecutionCommand = exports.deserializeAws_json1_1ListPipelineExecutionStepsCommand = exports.deserializeAws_json1_1ListPipelineExecutionsCommand = exports.deserializeAws_json1_1ListNotebookInstancesCommand = exports.deserializeAws_json1_1ListNotebookInstanceLifecycleConfigsCommand = exports.deserializeAws_json1_1ListMonitoringSchedulesCommand = exports.deserializeAws_json1_1ListMonitoringExecutionsCommand = exports.deserializeAws_json1_1ListModelsCommand = exports.deserializeAws_json1_1ListModelQualityJobDefinitionsCommand = exports.deserializeAws_json1_1ListModelPackagesCommand = exports.deserializeAws_json1_1ListModelPackageGroupsCommand = void 0;
exports.deserializeAws_json1_1UpdateWorkteamCommand = exports.deserializeAws_json1_1UpdateWorkforceCommand = exports.deserializeAws_json1_1UpdateUserProfileCommand = exports.deserializeAws_json1_1UpdateTrialComponentCommand = exports.deserializeAws_json1_1UpdateTrialCommand = exports.deserializeAws_json1_1UpdateTrainingJobCommand = exports.deserializeAws_json1_1UpdatePipelineExecutionCommand = exports.deserializeAws_json1_1UpdatePipelineCommand = exports.deserializeAws_json1_1UpdateNotebookInstanceLifecycleConfigCommand = exports.deserializeAws_json1_1UpdateNotebookInstanceCommand = exports.deserializeAws_json1_1UpdateMonitoringScheduleCommand = exports.deserializeAws_json1_1UpdateModelPackageCommand = exports.deserializeAws_json1_1UpdateImageCommand = exports.deserializeAws_json1_1UpdateExperimentCommand = exports.deserializeAws_json1_1UpdateEndpointWeightsAndCapacitiesCommand = exports.deserializeAws_json1_1UpdateEndpointCommand = void 0;
const models_1_1 = require("../models/models_1");
const protocol_http_1 = require("@aws-sdk/protocol-http");
const smithy_client_1 = require("@aws-sdk/smithy-client");
const uuid_1 = require("uuid");
const serializeAws_json1_1AddAssociationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.AddAssociation",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1AddAssociationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1AddAssociationCommand = serializeAws_json1_1AddAssociationCommand;
const serializeAws_json1_1AddTagsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.AddTags",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1AddTagsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1AddTagsCommand = serializeAws_json1_1AddTagsCommand;
const serializeAws_json1_1AssociateTrialComponentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.AssociateTrialComponent",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1AssociateTrialComponentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1AssociateTrialComponentCommand = serializeAws_json1_1AssociateTrialComponentCommand;
const serializeAws_json1_1CreateActionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateAction",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateActionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateActionCommand = serializeAws_json1_1CreateActionCommand;
const serializeAws_json1_1CreateAlgorithmCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateAlgorithm",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateAlgorithmInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateAlgorithmCommand = serializeAws_json1_1CreateAlgorithmCommand;
const serializeAws_json1_1CreateAppCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateApp",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateAppRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateAppCommand = serializeAws_json1_1CreateAppCommand;
const serializeAws_json1_1CreateAppImageConfigCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateAppImageConfig",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateAppImageConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateAppImageConfigCommand = serializeAws_json1_1CreateAppImageConfigCommand;
const serializeAws_json1_1CreateArtifactCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateArtifact",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateArtifactRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateArtifactCommand = serializeAws_json1_1CreateArtifactCommand;
const serializeAws_json1_1CreateAutoMLJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateAutoMLJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateAutoMLJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateAutoMLJobCommand = serializeAws_json1_1CreateAutoMLJobCommand;
const serializeAws_json1_1CreateCodeRepositoryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateCodeRepository",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateCodeRepositoryInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateCodeRepositoryCommand = serializeAws_json1_1CreateCodeRepositoryCommand;
const serializeAws_json1_1CreateCompilationJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateCompilationJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateCompilationJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateCompilationJobCommand = serializeAws_json1_1CreateCompilationJobCommand;
const serializeAws_json1_1CreateContextCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateContext",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateContextRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateContextCommand = serializeAws_json1_1CreateContextCommand;
const serializeAws_json1_1CreateDataQualityJobDefinitionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateDataQualityJobDefinition",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateDataQualityJobDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateDataQualityJobDefinitionCommand = serializeAws_json1_1CreateDataQualityJobDefinitionCommand;
const serializeAws_json1_1CreateDeviceFleetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateDeviceFleet",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateDeviceFleetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateDeviceFleetCommand = serializeAws_json1_1CreateDeviceFleetCommand;
const serializeAws_json1_1CreateDomainCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateDomain",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateDomainRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateDomainCommand = serializeAws_json1_1CreateDomainCommand;
const serializeAws_json1_1CreateEdgePackagingJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateEdgePackagingJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateEdgePackagingJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateEdgePackagingJobCommand = serializeAws_json1_1CreateEdgePackagingJobCommand;
const serializeAws_json1_1CreateEndpointCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateEndpoint",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateEndpointInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateEndpointCommand = serializeAws_json1_1CreateEndpointCommand;
const serializeAws_json1_1CreateEndpointConfigCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateEndpointConfig",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateEndpointConfigInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateEndpointConfigCommand = serializeAws_json1_1CreateEndpointConfigCommand;
const serializeAws_json1_1CreateExperimentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateExperiment",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateExperimentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateExperimentCommand = serializeAws_json1_1CreateExperimentCommand;
const serializeAws_json1_1CreateFeatureGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateFeatureGroup",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateFeatureGroupRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateFeatureGroupCommand = serializeAws_json1_1CreateFeatureGroupCommand;
const serializeAws_json1_1CreateFlowDefinitionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateFlowDefinition",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateFlowDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateFlowDefinitionCommand = serializeAws_json1_1CreateFlowDefinitionCommand;
const serializeAws_json1_1CreateHumanTaskUiCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateHumanTaskUi",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateHumanTaskUiRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateHumanTaskUiCommand = serializeAws_json1_1CreateHumanTaskUiCommand;
const serializeAws_json1_1CreateHyperParameterTuningJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateHyperParameterTuningJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateHyperParameterTuningJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateHyperParameterTuningJobCommand = serializeAws_json1_1CreateHyperParameterTuningJobCommand;
const serializeAws_json1_1CreateImageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateImage",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateImageRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateImageCommand = serializeAws_json1_1CreateImageCommand;
const serializeAws_json1_1CreateImageVersionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateImageVersion",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateImageVersionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateImageVersionCommand = serializeAws_json1_1CreateImageVersionCommand;
const serializeAws_json1_1CreateLabelingJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateLabelingJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateLabelingJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateLabelingJobCommand = serializeAws_json1_1CreateLabelingJobCommand;
const serializeAws_json1_1CreateModelCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateModel",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateModelInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateModelCommand = serializeAws_json1_1CreateModelCommand;
const serializeAws_json1_1CreateModelBiasJobDefinitionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateModelBiasJobDefinition",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateModelBiasJobDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateModelBiasJobDefinitionCommand = serializeAws_json1_1CreateModelBiasJobDefinitionCommand;
const serializeAws_json1_1CreateModelExplainabilityJobDefinitionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateModelExplainabilityJobDefinition",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateModelExplainabilityJobDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateModelExplainabilityJobDefinitionCommand = serializeAws_json1_1CreateModelExplainabilityJobDefinitionCommand;
const serializeAws_json1_1CreateModelPackageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateModelPackage",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateModelPackageInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateModelPackageCommand = serializeAws_json1_1CreateModelPackageCommand;
const serializeAws_json1_1CreateModelPackageGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateModelPackageGroup",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateModelPackageGroupInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateModelPackageGroupCommand = serializeAws_json1_1CreateModelPackageGroupCommand;
const serializeAws_json1_1CreateModelQualityJobDefinitionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateModelQualityJobDefinition",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateModelQualityJobDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateModelQualityJobDefinitionCommand = serializeAws_json1_1CreateModelQualityJobDefinitionCommand;
const serializeAws_json1_1CreateMonitoringScheduleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateMonitoringSchedule",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateMonitoringScheduleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateMonitoringScheduleCommand = serializeAws_json1_1CreateMonitoringScheduleCommand;
const serializeAws_json1_1CreateNotebookInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateNotebookInstance",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateNotebookInstanceInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateNotebookInstanceCommand = serializeAws_json1_1CreateNotebookInstanceCommand;
const serializeAws_json1_1CreateNotebookInstanceLifecycleConfigCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateNotebookInstanceLifecycleConfig",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateNotebookInstanceLifecycleConfigInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateNotebookInstanceLifecycleConfigCommand = serializeAws_json1_1CreateNotebookInstanceLifecycleConfigCommand;
const serializeAws_json1_1CreatePipelineCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreatePipeline",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreatePipelineRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreatePipelineCommand = serializeAws_json1_1CreatePipelineCommand;
const serializeAws_json1_1CreatePresignedDomainUrlCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreatePresignedDomainUrl",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreatePresignedDomainUrlRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreatePresignedDomainUrlCommand = serializeAws_json1_1CreatePresignedDomainUrlCommand;
const serializeAws_json1_1CreatePresignedNotebookInstanceUrlCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreatePresignedNotebookInstanceUrl",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreatePresignedNotebookInstanceUrlInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreatePresignedNotebookInstanceUrlCommand = serializeAws_json1_1CreatePresignedNotebookInstanceUrlCommand;
const serializeAws_json1_1CreateProcessingJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateProcessingJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateProcessingJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateProcessingJobCommand = serializeAws_json1_1CreateProcessingJobCommand;
const serializeAws_json1_1CreateProjectCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateProject",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateProjectInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateProjectCommand = serializeAws_json1_1CreateProjectCommand;
const serializeAws_json1_1CreateTrainingJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateTrainingJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateTrainingJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateTrainingJobCommand = serializeAws_json1_1CreateTrainingJobCommand;
const serializeAws_json1_1CreateTransformJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateTransformJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateTransformJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateTransformJobCommand = serializeAws_json1_1CreateTransformJobCommand;
const serializeAws_json1_1CreateTrialCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateTrial",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateTrialRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateTrialCommand = serializeAws_json1_1CreateTrialCommand;
const serializeAws_json1_1CreateTrialComponentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateTrialComponent",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateTrialComponentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateTrialComponentCommand = serializeAws_json1_1CreateTrialComponentCommand;
const serializeAws_json1_1CreateUserProfileCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateUserProfile",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateUserProfileRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateUserProfileCommand = serializeAws_json1_1CreateUserProfileCommand;
const serializeAws_json1_1CreateWorkforceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateWorkforce",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateWorkforceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateWorkforceCommand = serializeAws_json1_1CreateWorkforceCommand;
const serializeAws_json1_1CreateWorkteamCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.CreateWorkteam",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateWorkteamRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1CreateWorkteamCommand = serializeAws_json1_1CreateWorkteamCommand;
const serializeAws_json1_1DeleteActionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteAction",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteActionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteActionCommand = serializeAws_json1_1DeleteActionCommand;
const serializeAws_json1_1DeleteAlgorithmCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteAlgorithm",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteAlgorithmInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteAlgorithmCommand = serializeAws_json1_1DeleteAlgorithmCommand;
const serializeAws_json1_1DeleteAppCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteApp",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteAppRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteAppCommand = serializeAws_json1_1DeleteAppCommand;
const serializeAws_json1_1DeleteAppImageConfigCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteAppImageConfig",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteAppImageConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteAppImageConfigCommand = serializeAws_json1_1DeleteAppImageConfigCommand;
const serializeAws_json1_1DeleteArtifactCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteArtifact",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteArtifactRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteArtifactCommand = serializeAws_json1_1DeleteArtifactCommand;
const serializeAws_json1_1DeleteAssociationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteAssociation",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteAssociationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteAssociationCommand = serializeAws_json1_1DeleteAssociationCommand;
const serializeAws_json1_1DeleteCodeRepositoryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteCodeRepository",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteCodeRepositoryInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteCodeRepositoryCommand = serializeAws_json1_1DeleteCodeRepositoryCommand;
const serializeAws_json1_1DeleteContextCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteContext",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteContextRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteContextCommand = serializeAws_json1_1DeleteContextCommand;
const serializeAws_json1_1DeleteDataQualityJobDefinitionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteDataQualityJobDefinition",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteDataQualityJobDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteDataQualityJobDefinitionCommand = serializeAws_json1_1DeleteDataQualityJobDefinitionCommand;
const serializeAws_json1_1DeleteDeviceFleetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteDeviceFleet",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteDeviceFleetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteDeviceFleetCommand = serializeAws_json1_1DeleteDeviceFleetCommand;
const serializeAws_json1_1DeleteDomainCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteDomain",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteDomainRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteDomainCommand = serializeAws_json1_1DeleteDomainCommand;
const serializeAws_json1_1DeleteEndpointCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteEndpoint",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteEndpointInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteEndpointCommand = serializeAws_json1_1DeleteEndpointCommand;
const serializeAws_json1_1DeleteEndpointConfigCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteEndpointConfig",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteEndpointConfigInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteEndpointConfigCommand = serializeAws_json1_1DeleteEndpointConfigCommand;
const serializeAws_json1_1DeleteExperimentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteExperiment",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteExperimentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteExperimentCommand = serializeAws_json1_1DeleteExperimentCommand;
const serializeAws_json1_1DeleteFeatureGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteFeatureGroup",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteFeatureGroupRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteFeatureGroupCommand = serializeAws_json1_1DeleteFeatureGroupCommand;
const serializeAws_json1_1DeleteFlowDefinitionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteFlowDefinition",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteFlowDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteFlowDefinitionCommand = serializeAws_json1_1DeleteFlowDefinitionCommand;
const serializeAws_json1_1DeleteHumanTaskUiCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteHumanTaskUi",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteHumanTaskUiRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteHumanTaskUiCommand = serializeAws_json1_1DeleteHumanTaskUiCommand;
const serializeAws_json1_1DeleteImageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteImage",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteImageRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteImageCommand = serializeAws_json1_1DeleteImageCommand;
const serializeAws_json1_1DeleteImageVersionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteImageVersion",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteImageVersionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteImageVersionCommand = serializeAws_json1_1DeleteImageVersionCommand;
const serializeAws_json1_1DeleteModelCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteModel",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteModelInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteModelCommand = serializeAws_json1_1DeleteModelCommand;
const serializeAws_json1_1DeleteModelBiasJobDefinitionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteModelBiasJobDefinition",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteModelBiasJobDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteModelBiasJobDefinitionCommand = serializeAws_json1_1DeleteModelBiasJobDefinitionCommand;
const serializeAws_json1_1DeleteModelExplainabilityJobDefinitionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteModelExplainabilityJobDefinition",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteModelExplainabilityJobDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteModelExplainabilityJobDefinitionCommand = serializeAws_json1_1DeleteModelExplainabilityJobDefinitionCommand;
const serializeAws_json1_1DeleteModelPackageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteModelPackage",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteModelPackageInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteModelPackageCommand = serializeAws_json1_1DeleteModelPackageCommand;
const serializeAws_json1_1DeleteModelPackageGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteModelPackageGroup",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteModelPackageGroupInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteModelPackageGroupCommand = serializeAws_json1_1DeleteModelPackageGroupCommand;
const serializeAws_json1_1DeleteModelPackageGroupPolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteModelPackageGroupPolicy",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteModelPackageGroupPolicyInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteModelPackageGroupPolicyCommand = serializeAws_json1_1DeleteModelPackageGroupPolicyCommand;
const serializeAws_json1_1DeleteModelQualityJobDefinitionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteModelQualityJobDefinition",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteModelQualityJobDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteModelQualityJobDefinitionCommand = serializeAws_json1_1DeleteModelQualityJobDefinitionCommand;
const serializeAws_json1_1DeleteMonitoringScheduleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteMonitoringSchedule",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteMonitoringScheduleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteMonitoringScheduleCommand = serializeAws_json1_1DeleteMonitoringScheduleCommand;
const serializeAws_json1_1DeleteNotebookInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteNotebookInstance",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteNotebookInstanceInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteNotebookInstanceCommand = serializeAws_json1_1DeleteNotebookInstanceCommand;
const serializeAws_json1_1DeleteNotebookInstanceLifecycleConfigCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteNotebookInstanceLifecycleConfig",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteNotebookInstanceLifecycleConfigInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteNotebookInstanceLifecycleConfigCommand = serializeAws_json1_1DeleteNotebookInstanceLifecycleConfigCommand;
const serializeAws_json1_1DeletePipelineCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeletePipeline",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeletePipelineRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeletePipelineCommand = serializeAws_json1_1DeletePipelineCommand;
const serializeAws_json1_1DeleteProjectCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteProject",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteProjectInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteProjectCommand = serializeAws_json1_1DeleteProjectCommand;
const serializeAws_json1_1DeleteTagsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteTags",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteTagsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteTagsCommand = serializeAws_json1_1DeleteTagsCommand;
const serializeAws_json1_1DeleteTrialCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteTrial",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteTrialRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteTrialCommand = serializeAws_json1_1DeleteTrialCommand;
const serializeAws_json1_1DeleteTrialComponentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteTrialComponent",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteTrialComponentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteTrialComponentCommand = serializeAws_json1_1DeleteTrialComponentCommand;
const serializeAws_json1_1DeleteUserProfileCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteUserProfile",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteUserProfileRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteUserProfileCommand = serializeAws_json1_1DeleteUserProfileCommand;
const serializeAws_json1_1DeleteWorkforceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteWorkforce",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteWorkforceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteWorkforceCommand = serializeAws_json1_1DeleteWorkforceCommand;
const serializeAws_json1_1DeleteWorkteamCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeleteWorkteam",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteWorkteamRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeleteWorkteamCommand = serializeAws_json1_1DeleteWorkteamCommand;
const serializeAws_json1_1DeregisterDevicesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DeregisterDevices",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeregisterDevicesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DeregisterDevicesCommand = serializeAws_json1_1DeregisterDevicesCommand;
const serializeAws_json1_1DescribeActionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeAction",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeActionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeActionCommand = serializeAws_json1_1DescribeActionCommand;
const serializeAws_json1_1DescribeAlgorithmCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeAlgorithm",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeAlgorithmInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeAlgorithmCommand = serializeAws_json1_1DescribeAlgorithmCommand;
const serializeAws_json1_1DescribeAppCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeApp",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeAppRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeAppCommand = serializeAws_json1_1DescribeAppCommand;
const serializeAws_json1_1DescribeAppImageConfigCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeAppImageConfig",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeAppImageConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeAppImageConfigCommand = serializeAws_json1_1DescribeAppImageConfigCommand;
const serializeAws_json1_1DescribeArtifactCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeArtifact",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeArtifactRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeArtifactCommand = serializeAws_json1_1DescribeArtifactCommand;
const serializeAws_json1_1DescribeAutoMLJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeAutoMLJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeAutoMLJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeAutoMLJobCommand = serializeAws_json1_1DescribeAutoMLJobCommand;
const serializeAws_json1_1DescribeCodeRepositoryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeCodeRepository",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeCodeRepositoryInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeCodeRepositoryCommand = serializeAws_json1_1DescribeCodeRepositoryCommand;
const serializeAws_json1_1DescribeCompilationJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeCompilationJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeCompilationJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeCompilationJobCommand = serializeAws_json1_1DescribeCompilationJobCommand;
const serializeAws_json1_1DescribeContextCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeContext",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeContextRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeContextCommand = serializeAws_json1_1DescribeContextCommand;
const serializeAws_json1_1DescribeDataQualityJobDefinitionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeDataQualityJobDefinition",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeDataQualityJobDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeDataQualityJobDefinitionCommand = serializeAws_json1_1DescribeDataQualityJobDefinitionCommand;
const serializeAws_json1_1DescribeDeviceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeDevice",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeDeviceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeDeviceCommand = serializeAws_json1_1DescribeDeviceCommand;
const serializeAws_json1_1DescribeDeviceFleetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeDeviceFleet",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeDeviceFleetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeDeviceFleetCommand = serializeAws_json1_1DescribeDeviceFleetCommand;
const serializeAws_json1_1DescribeDomainCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeDomain",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeDomainRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeDomainCommand = serializeAws_json1_1DescribeDomainCommand;
const serializeAws_json1_1DescribeEdgePackagingJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeEdgePackagingJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeEdgePackagingJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeEdgePackagingJobCommand = serializeAws_json1_1DescribeEdgePackagingJobCommand;
const serializeAws_json1_1DescribeEndpointCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeEndpoint",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeEndpointInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeEndpointCommand = serializeAws_json1_1DescribeEndpointCommand;
const serializeAws_json1_1DescribeEndpointConfigCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeEndpointConfig",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeEndpointConfigInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeEndpointConfigCommand = serializeAws_json1_1DescribeEndpointConfigCommand;
const serializeAws_json1_1DescribeExperimentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeExperiment",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeExperimentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeExperimentCommand = serializeAws_json1_1DescribeExperimentCommand;
const serializeAws_json1_1DescribeFeatureGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeFeatureGroup",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeFeatureGroupRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeFeatureGroupCommand = serializeAws_json1_1DescribeFeatureGroupCommand;
const serializeAws_json1_1DescribeFlowDefinitionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeFlowDefinition",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeFlowDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeFlowDefinitionCommand = serializeAws_json1_1DescribeFlowDefinitionCommand;
const serializeAws_json1_1DescribeHumanTaskUiCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeHumanTaskUi",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeHumanTaskUiRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeHumanTaskUiCommand = serializeAws_json1_1DescribeHumanTaskUiCommand;
const serializeAws_json1_1DescribeHyperParameterTuningJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeHyperParameterTuningJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeHyperParameterTuningJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeHyperParameterTuningJobCommand = serializeAws_json1_1DescribeHyperParameterTuningJobCommand;
const serializeAws_json1_1DescribeImageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeImage",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeImageRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeImageCommand = serializeAws_json1_1DescribeImageCommand;
const serializeAws_json1_1DescribeImageVersionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeImageVersion",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeImageVersionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeImageVersionCommand = serializeAws_json1_1DescribeImageVersionCommand;
const serializeAws_json1_1DescribeLabelingJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeLabelingJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeLabelingJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeLabelingJobCommand = serializeAws_json1_1DescribeLabelingJobCommand;
const serializeAws_json1_1DescribeModelCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeModel",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeModelInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeModelCommand = serializeAws_json1_1DescribeModelCommand;
const serializeAws_json1_1DescribeModelBiasJobDefinitionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeModelBiasJobDefinition",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeModelBiasJobDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeModelBiasJobDefinitionCommand = serializeAws_json1_1DescribeModelBiasJobDefinitionCommand;
const serializeAws_json1_1DescribeModelExplainabilityJobDefinitionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeModelExplainabilityJobDefinition",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeModelExplainabilityJobDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeModelExplainabilityJobDefinitionCommand = serializeAws_json1_1DescribeModelExplainabilityJobDefinitionCommand;
const serializeAws_json1_1DescribeModelPackageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeModelPackage",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeModelPackageInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeModelPackageCommand = serializeAws_json1_1DescribeModelPackageCommand;
const serializeAws_json1_1DescribeModelPackageGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeModelPackageGroup",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeModelPackageGroupInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeModelPackageGroupCommand = serializeAws_json1_1DescribeModelPackageGroupCommand;
const serializeAws_json1_1DescribeModelQualityJobDefinitionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeModelQualityJobDefinition",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeModelQualityJobDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeModelQualityJobDefinitionCommand = serializeAws_json1_1DescribeModelQualityJobDefinitionCommand;
const serializeAws_json1_1DescribeMonitoringScheduleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeMonitoringSchedule",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeMonitoringScheduleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeMonitoringScheduleCommand = serializeAws_json1_1DescribeMonitoringScheduleCommand;
const serializeAws_json1_1DescribeNotebookInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeNotebookInstance",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeNotebookInstanceInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeNotebookInstanceCommand = serializeAws_json1_1DescribeNotebookInstanceCommand;
const serializeAws_json1_1DescribeNotebookInstanceLifecycleConfigCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeNotebookInstanceLifecycleConfig",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeNotebookInstanceLifecycleConfigInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeNotebookInstanceLifecycleConfigCommand = serializeAws_json1_1DescribeNotebookInstanceLifecycleConfigCommand;
const serializeAws_json1_1DescribePipelineCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribePipeline",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribePipelineRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribePipelineCommand = serializeAws_json1_1DescribePipelineCommand;
const serializeAws_json1_1DescribePipelineDefinitionForExecutionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribePipelineDefinitionForExecution",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribePipelineDefinitionForExecutionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribePipelineDefinitionForExecutionCommand = serializeAws_json1_1DescribePipelineDefinitionForExecutionCommand;
const serializeAws_json1_1DescribePipelineExecutionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribePipelineExecution",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribePipelineExecutionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribePipelineExecutionCommand = serializeAws_json1_1DescribePipelineExecutionCommand;
const serializeAws_json1_1DescribeProcessingJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeProcessingJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeProcessingJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeProcessingJobCommand = serializeAws_json1_1DescribeProcessingJobCommand;
const serializeAws_json1_1DescribeProjectCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeProject",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeProjectInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeProjectCommand = serializeAws_json1_1DescribeProjectCommand;
const serializeAws_json1_1DescribeSubscribedWorkteamCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeSubscribedWorkteam",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeSubscribedWorkteamRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeSubscribedWorkteamCommand = serializeAws_json1_1DescribeSubscribedWorkteamCommand;
const serializeAws_json1_1DescribeTrainingJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeTrainingJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeTrainingJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeTrainingJobCommand = serializeAws_json1_1DescribeTrainingJobCommand;
const serializeAws_json1_1DescribeTransformJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeTransformJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeTransformJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeTransformJobCommand = serializeAws_json1_1DescribeTransformJobCommand;
const serializeAws_json1_1DescribeTrialCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeTrial",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeTrialRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeTrialCommand = serializeAws_json1_1DescribeTrialCommand;
const serializeAws_json1_1DescribeTrialComponentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeTrialComponent",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeTrialComponentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeTrialComponentCommand = serializeAws_json1_1DescribeTrialComponentCommand;
const serializeAws_json1_1DescribeUserProfileCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeUserProfile",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeUserProfileRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeUserProfileCommand = serializeAws_json1_1DescribeUserProfileCommand;
const serializeAws_json1_1DescribeWorkforceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeWorkforce",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeWorkforceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeWorkforceCommand = serializeAws_json1_1DescribeWorkforceCommand;
const serializeAws_json1_1DescribeWorkteamCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DescribeWorkteam",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeWorkteamRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeWorkteamCommand = serializeAws_json1_1DescribeWorkteamCommand;
const serializeAws_json1_1DisableSagemakerServicecatalogPortfolioCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DisableSagemakerServicecatalogPortfolio",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DisableSagemakerServicecatalogPortfolioInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DisableSagemakerServicecatalogPortfolioCommand = serializeAws_json1_1DisableSagemakerServicecatalogPortfolioCommand;
const serializeAws_json1_1DisassociateTrialComponentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.DisassociateTrialComponent",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DisassociateTrialComponentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DisassociateTrialComponentCommand = serializeAws_json1_1DisassociateTrialComponentCommand;
const serializeAws_json1_1EnableSagemakerServicecatalogPortfolioCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.EnableSagemakerServicecatalogPortfolio",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1EnableSagemakerServicecatalogPortfolioInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1EnableSagemakerServicecatalogPortfolioCommand = serializeAws_json1_1EnableSagemakerServicecatalogPortfolioCommand;
const serializeAws_json1_1GetDeviceFleetReportCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.GetDeviceFleetReport",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetDeviceFleetReportRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetDeviceFleetReportCommand = serializeAws_json1_1GetDeviceFleetReportCommand;
const serializeAws_json1_1GetModelPackageGroupPolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.GetModelPackageGroupPolicy",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetModelPackageGroupPolicyInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetModelPackageGroupPolicyCommand = serializeAws_json1_1GetModelPackageGroupPolicyCommand;
const serializeAws_json1_1GetSagemakerServicecatalogPortfolioStatusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.GetSagemakerServicecatalogPortfolioStatus",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetSagemakerServicecatalogPortfolioStatusInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetSagemakerServicecatalogPortfolioStatusCommand = serializeAws_json1_1GetSagemakerServicecatalogPortfolioStatusCommand;
const serializeAws_json1_1GetSearchSuggestionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.GetSearchSuggestions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetSearchSuggestionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1GetSearchSuggestionsCommand = serializeAws_json1_1GetSearchSuggestionsCommand;
const serializeAws_json1_1ListActionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListActions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListActionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListActionsCommand = serializeAws_json1_1ListActionsCommand;
const serializeAws_json1_1ListAlgorithmsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListAlgorithms",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListAlgorithmsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListAlgorithmsCommand = serializeAws_json1_1ListAlgorithmsCommand;
const serializeAws_json1_1ListAppImageConfigsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListAppImageConfigs",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListAppImageConfigsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListAppImageConfigsCommand = serializeAws_json1_1ListAppImageConfigsCommand;
const serializeAws_json1_1ListAppsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListApps",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListAppsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListAppsCommand = serializeAws_json1_1ListAppsCommand;
const serializeAws_json1_1ListArtifactsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListArtifacts",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListArtifactsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListArtifactsCommand = serializeAws_json1_1ListArtifactsCommand;
const serializeAws_json1_1ListAssociationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListAssociations",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListAssociationsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListAssociationsCommand = serializeAws_json1_1ListAssociationsCommand;
const serializeAws_json1_1ListAutoMLJobsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListAutoMLJobs",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListAutoMLJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListAutoMLJobsCommand = serializeAws_json1_1ListAutoMLJobsCommand;
const serializeAws_json1_1ListCandidatesForAutoMLJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListCandidatesForAutoMLJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListCandidatesForAutoMLJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListCandidatesForAutoMLJobCommand = serializeAws_json1_1ListCandidatesForAutoMLJobCommand;
const serializeAws_json1_1ListCodeRepositoriesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListCodeRepositories",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListCodeRepositoriesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListCodeRepositoriesCommand = serializeAws_json1_1ListCodeRepositoriesCommand;
const serializeAws_json1_1ListCompilationJobsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListCompilationJobs",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListCompilationJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListCompilationJobsCommand = serializeAws_json1_1ListCompilationJobsCommand;
const serializeAws_json1_1ListContextsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListContexts",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListContextsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListContextsCommand = serializeAws_json1_1ListContextsCommand;
const serializeAws_json1_1ListDataQualityJobDefinitionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListDataQualityJobDefinitions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListDataQualityJobDefinitionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListDataQualityJobDefinitionsCommand = serializeAws_json1_1ListDataQualityJobDefinitionsCommand;
const serializeAws_json1_1ListDeviceFleetsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListDeviceFleets",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListDeviceFleetsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListDeviceFleetsCommand = serializeAws_json1_1ListDeviceFleetsCommand;
const serializeAws_json1_1ListDevicesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListDevices",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListDevicesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListDevicesCommand = serializeAws_json1_1ListDevicesCommand;
const serializeAws_json1_1ListDomainsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListDomains",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListDomainsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListDomainsCommand = serializeAws_json1_1ListDomainsCommand;
const serializeAws_json1_1ListEdgePackagingJobsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListEdgePackagingJobs",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListEdgePackagingJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListEdgePackagingJobsCommand = serializeAws_json1_1ListEdgePackagingJobsCommand;
const serializeAws_json1_1ListEndpointConfigsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListEndpointConfigs",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListEndpointConfigsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListEndpointConfigsCommand = serializeAws_json1_1ListEndpointConfigsCommand;
const serializeAws_json1_1ListEndpointsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListEndpoints",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListEndpointsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListEndpointsCommand = serializeAws_json1_1ListEndpointsCommand;
const serializeAws_json1_1ListExperimentsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListExperiments",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListExperimentsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListExperimentsCommand = serializeAws_json1_1ListExperimentsCommand;
const serializeAws_json1_1ListFeatureGroupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListFeatureGroups",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListFeatureGroupsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListFeatureGroupsCommand = serializeAws_json1_1ListFeatureGroupsCommand;
const serializeAws_json1_1ListFlowDefinitionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListFlowDefinitions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListFlowDefinitionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListFlowDefinitionsCommand = serializeAws_json1_1ListFlowDefinitionsCommand;
const serializeAws_json1_1ListHumanTaskUisCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListHumanTaskUis",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListHumanTaskUisRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListHumanTaskUisCommand = serializeAws_json1_1ListHumanTaskUisCommand;
const serializeAws_json1_1ListHyperParameterTuningJobsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListHyperParameterTuningJobs",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListHyperParameterTuningJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListHyperParameterTuningJobsCommand = serializeAws_json1_1ListHyperParameterTuningJobsCommand;
const serializeAws_json1_1ListImagesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListImages",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListImagesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListImagesCommand = serializeAws_json1_1ListImagesCommand;
const serializeAws_json1_1ListImageVersionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListImageVersions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListImageVersionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListImageVersionsCommand = serializeAws_json1_1ListImageVersionsCommand;
const serializeAws_json1_1ListLabelingJobsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListLabelingJobs",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListLabelingJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListLabelingJobsCommand = serializeAws_json1_1ListLabelingJobsCommand;
const serializeAws_json1_1ListLabelingJobsForWorkteamCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListLabelingJobsForWorkteam",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListLabelingJobsForWorkteamRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListLabelingJobsForWorkteamCommand = serializeAws_json1_1ListLabelingJobsForWorkteamCommand;
const serializeAws_json1_1ListModelBiasJobDefinitionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListModelBiasJobDefinitions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListModelBiasJobDefinitionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListModelBiasJobDefinitionsCommand = serializeAws_json1_1ListModelBiasJobDefinitionsCommand;
const serializeAws_json1_1ListModelExplainabilityJobDefinitionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListModelExplainabilityJobDefinitions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListModelExplainabilityJobDefinitionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListModelExplainabilityJobDefinitionsCommand = serializeAws_json1_1ListModelExplainabilityJobDefinitionsCommand;
const serializeAws_json1_1ListModelPackageGroupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListModelPackageGroups",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListModelPackageGroupsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListModelPackageGroupsCommand = serializeAws_json1_1ListModelPackageGroupsCommand;
const serializeAws_json1_1ListModelPackagesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListModelPackages",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListModelPackagesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListModelPackagesCommand = serializeAws_json1_1ListModelPackagesCommand;
const serializeAws_json1_1ListModelQualityJobDefinitionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListModelQualityJobDefinitions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListModelQualityJobDefinitionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListModelQualityJobDefinitionsCommand = serializeAws_json1_1ListModelQualityJobDefinitionsCommand;
const serializeAws_json1_1ListModelsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListModels",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListModelsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListModelsCommand = serializeAws_json1_1ListModelsCommand;
const serializeAws_json1_1ListMonitoringExecutionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListMonitoringExecutions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListMonitoringExecutionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListMonitoringExecutionsCommand = serializeAws_json1_1ListMonitoringExecutionsCommand;
const serializeAws_json1_1ListMonitoringSchedulesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListMonitoringSchedules",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListMonitoringSchedulesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListMonitoringSchedulesCommand = serializeAws_json1_1ListMonitoringSchedulesCommand;
const serializeAws_json1_1ListNotebookInstanceLifecycleConfigsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListNotebookInstanceLifecycleConfigs",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListNotebookInstanceLifecycleConfigsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListNotebookInstanceLifecycleConfigsCommand = serializeAws_json1_1ListNotebookInstanceLifecycleConfigsCommand;
const serializeAws_json1_1ListNotebookInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListNotebookInstances",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListNotebookInstancesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListNotebookInstancesCommand = serializeAws_json1_1ListNotebookInstancesCommand;
const serializeAws_json1_1ListPipelineExecutionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListPipelineExecutions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListPipelineExecutionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListPipelineExecutionsCommand = serializeAws_json1_1ListPipelineExecutionsCommand;
const serializeAws_json1_1ListPipelineExecutionStepsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListPipelineExecutionSteps",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListPipelineExecutionStepsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListPipelineExecutionStepsCommand = serializeAws_json1_1ListPipelineExecutionStepsCommand;
const serializeAws_json1_1ListPipelineParametersForExecutionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListPipelineParametersForExecution",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListPipelineParametersForExecutionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListPipelineParametersForExecutionCommand = serializeAws_json1_1ListPipelineParametersForExecutionCommand;
const serializeAws_json1_1ListPipelinesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListPipelines",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListPipelinesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListPipelinesCommand = serializeAws_json1_1ListPipelinesCommand;
const serializeAws_json1_1ListProcessingJobsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListProcessingJobs",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListProcessingJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListProcessingJobsCommand = serializeAws_json1_1ListProcessingJobsCommand;
const serializeAws_json1_1ListProjectsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListProjects",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListProjectsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListProjectsCommand = serializeAws_json1_1ListProjectsCommand;
const serializeAws_json1_1ListSubscribedWorkteamsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListSubscribedWorkteams",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListSubscribedWorkteamsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListSubscribedWorkteamsCommand = serializeAws_json1_1ListSubscribedWorkteamsCommand;
const serializeAws_json1_1ListTagsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListTags",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListTagsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListTagsCommand = serializeAws_json1_1ListTagsCommand;
const serializeAws_json1_1ListTrainingJobsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListTrainingJobs",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListTrainingJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListTrainingJobsCommand = serializeAws_json1_1ListTrainingJobsCommand;
const serializeAws_json1_1ListTrainingJobsForHyperParameterTuningJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListTrainingJobsForHyperParameterTuningJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListTrainingJobsForHyperParameterTuningJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListTrainingJobsForHyperParameterTuningJobCommand = serializeAws_json1_1ListTrainingJobsForHyperParameterTuningJobCommand;
const serializeAws_json1_1ListTransformJobsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListTransformJobs",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListTransformJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListTransformJobsCommand = serializeAws_json1_1ListTransformJobsCommand;
const serializeAws_json1_1ListTrialComponentsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListTrialComponents",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListTrialComponentsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListTrialComponentsCommand = serializeAws_json1_1ListTrialComponentsCommand;
const serializeAws_json1_1ListTrialsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListTrials",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListTrialsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListTrialsCommand = serializeAws_json1_1ListTrialsCommand;
const serializeAws_json1_1ListUserProfilesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListUserProfiles",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListUserProfilesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListUserProfilesCommand = serializeAws_json1_1ListUserProfilesCommand;
const serializeAws_json1_1ListWorkforcesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListWorkforces",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListWorkforcesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListWorkforcesCommand = serializeAws_json1_1ListWorkforcesCommand;
const serializeAws_json1_1ListWorkteamsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.ListWorkteams",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListWorkteamsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListWorkteamsCommand = serializeAws_json1_1ListWorkteamsCommand;
const serializeAws_json1_1PutModelPackageGroupPolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.PutModelPackageGroupPolicy",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutModelPackageGroupPolicyInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1PutModelPackageGroupPolicyCommand = serializeAws_json1_1PutModelPackageGroupPolicyCommand;
const serializeAws_json1_1RegisterDevicesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.RegisterDevices",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1RegisterDevicesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1RegisterDevicesCommand = serializeAws_json1_1RegisterDevicesCommand;
const serializeAws_json1_1RenderUiTemplateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.RenderUiTemplate",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1RenderUiTemplateRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1RenderUiTemplateCommand = serializeAws_json1_1RenderUiTemplateCommand;
const serializeAws_json1_1SearchCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.Search",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1SearchRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1SearchCommand = serializeAws_json1_1SearchCommand;
const serializeAws_json1_1StartMonitoringScheduleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.StartMonitoringSchedule",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartMonitoringScheduleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StartMonitoringScheduleCommand = serializeAws_json1_1StartMonitoringScheduleCommand;
const serializeAws_json1_1StartNotebookInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.StartNotebookInstance",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartNotebookInstanceInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StartNotebookInstanceCommand = serializeAws_json1_1StartNotebookInstanceCommand;
const serializeAws_json1_1StartPipelineExecutionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.StartPipelineExecution",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartPipelineExecutionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StartPipelineExecutionCommand = serializeAws_json1_1StartPipelineExecutionCommand;
const serializeAws_json1_1StopAutoMLJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.StopAutoMLJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopAutoMLJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StopAutoMLJobCommand = serializeAws_json1_1StopAutoMLJobCommand;
const serializeAws_json1_1StopCompilationJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.StopCompilationJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopCompilationJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StopCompilationJobCommand = serializeAws_json1_1StopCompilationJobCommand;
const serializeAws_json1_1StopEdgePackagingJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.StopEdgePackagingJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopEdgePackagingJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StopEdgePackagingJobCommand = serializeAws_json1_1StopEdgePackagingJobCommand;
const serializeAws_json1_1StopHyperParameterTuningJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.StopHyperParameterTuningJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopHyperParameterTuningJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StopHyperParameterTuningJobCommand = serializeAws_json1_1StopHyperParameterTuningJobCommand;
const serializeAws_json1_1StopLabelingJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.StopLabelingJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopLabelingJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StopLabelingJobCommand = serializeAws_json1_1StopLabelingJobCommand;
const serializeAws_json1_1StopMonitoringScheduleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.StopMonitoringSchedule",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopMonitoringScheduleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StopMonitoringScheduleCommand = serializeAws_json1_1StopMonitoringScheduleCommand;
const serializeAws_json1_1StopNotebookInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.StopNotebookInstance",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopNotebookInstanceInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StopNotebookInstanceCommand = serializeAws_json1_1StopNotebookInstanceCommand;
const serializeAws_json1_1StopPipelineExecutionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.StopPipelineExecution",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopPipelineExecutionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StopPipelineExecutionCommand = serializeAws_json1_1StopPipelineExecutionCommand;
const serializeAws_json1_1StopProcessingJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.StopProcessingJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopProcessingJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StopProcessingJobCommand = serializeAws_json1_1StopProcessingJobCommand;
const serializeAws_json1_1StopTrainingJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.StopTrainingJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopTrainingJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StopTrainingJobCommand = serializeAws_json1_1StopTrainingJobCommand;
const serializeAws_json1_1StopTransformJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.StopTransformJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopTransformJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StopTransformJobCommand = serializeAws_json1_1StopTransformJobCommand;
const serializeAws_json1_1UpdateActionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.UpdateAction",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateActionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateActionCommand = serializeAws_json1_1UpdateActionCommand;
const serializeAws_json1_1UpdateAppImageConfigCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.UpdateAppImageConfig",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateAppImageConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateAppImageConfigCommand = serializeAws_json1_1UpdateAppImageConfigCommand;
const serializeAws_json1_1UpdateArtifactCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.UpdateArtifact",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateArtifactRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateArtifactCommand = serializeAws_json1_1UpdateArtifactCommand;
const serializeAws_json1_1UpdateCodeRepositoryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.UpdateCodeRepository",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateCodeRepositoryInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateCodeRepositoryCommand = serializeAws_json1_1UpdateCodeRepositoryCommand;
const serializeAws_json1_1UpdateContextCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.UpdateContext",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateContextRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateContextCommand = serializeAws_json1_1UpdateContextCommand;
const serializeAws_json1_1UpdateDeviceFleetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.UpdateDeviceFleet",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateDeviceFleetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateDeviceFleetCommand = serializeAws_json1_1UpdateDeviceFleetCommand;
const serializeAws_json1_1UpdateDevicesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.UpdateDevices",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateDevicesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateDevicesCommand = serializeAws_json1_1UpdateDevicesCommand;
const serializeAws_json1_1UpdateDomainCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.UpdateDomain",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateDomainRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateDomainCommand = serializeAws_json1_1UpdateDomainCommand;
const serializeAws_json1_1UpdateEndpointCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.UpdateEndpoint",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateEndpointInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateEndpointCommand = serializeAws_json1_1UpdateEndpointCommand;
const serializeAws_json1_1UpdateEndpointWeightsAndCapacitiesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.UpdateEndpointWeightsAndCapacities",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateEndpointWeightsAndCapacitiesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateEndpointWeightsAndCapacitiesCommand = serializeAws_json1_1UpdateEndpointWeightsAndCapacitiesCommand;
const serializeAws_json1_1UpdateExperimentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.UpdateExperiment",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateExperimentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateExperimentCommand = serializeAws_json1_1UpdateExperimentCommand;
const serializeAws_json1_1UpdateImageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.UpdateImage",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateImageRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateImageCommand = serializeAws_json1_1UpdateImageCommand;
const serializeAws_json1_1UpdateModelPackageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.UpdateModelPackage",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateModelPackageInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateModelPackageCommand = serializeAws_json1_1UpdateModelPackageCommand;
const serializeAws_json1_1UpdateMonitoringScheduleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.UpdateMonitoringSchedule",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateMonitoringScheduleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateMonitoringScheduleCommand = serializeAws_json1_1UpdateMonitoringScheduleCommand;
const serializeAws_json1_1UpdateNotebookInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.UpdateNotebookInstance",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateNotebookInstanceInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateNotebookInstanceCommand = serializeAws_json1_1UpdateNotebookInstanceCommand;
const serializeAws_json1_1UpdateNotebookInstanceLifecycleConfigCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.UpdateNotebookInstanceLifecycleConfig",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateNotebookInstanceLifecycleConfigInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateNotebookInstanceLifecycleConfigCommand = serializeAws_json1_1UpdateNotebookInstanceLifecycleConfigCommand;
const serializeAws_json1_1UpdatePipelineCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.UpdatePipeline",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdatePipelineRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdatePipelineCommand = serializeAws_json1_1UpdatePipelineCommand;
const serializeAws_json1_1UpdatePipelineExecutionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.UpdatePipelineExecution",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdatePipelineExecutionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdatePipelineExecutionCommand = serializeAws_json1_1UpdatePipelineExecutionCommand;
const serializeAws_json1_1UpdateTrainingJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.UpdateTrainingJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateTrainingJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateTrainingJobCommand = serializeAws_json1_1UpdateTrainingJobCommand;
const serializeAws_json1_1UpdateTrialCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.UpdateTrial",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateTrialRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateTrialCommand = serializeAws_json1_1UpdateTrialCommand;
const serializeAws_json1_1UpdateTrialComponentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.UpdateTrialComponent",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateTrialComponentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateTrialComponentCommand = serializeAws_json1_1UpdateTrialComponentCommand;
const serializeAws_json1_1UpdateUserProfileCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.UpdateUserProfile",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateUserProfileRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateUserProfileCommand = serializeAws_json1_1UpdateUserProfileCommand;
const serializeAws_json1_1UpdateWorkforceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.UpdateWorkforce",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateWorkforceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateWorkforceCommand = serializeAws_json1_1UpdateWorkforceCommand;
const serializeAws_json1_1UpdateWorkteamCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "SageMaker.UpdateWorkteam",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateWorkteamRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1UpdateWorkteamCommand = serializeAws_json1_1UpdateWorkteamCommand;
const deserializeAws_json1_1AddAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1AddAssociationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1AddAssociationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1AddAssociationCommand = deserializeAws_json1_1AddAssociationCommand;
const deserializeAws_json1_1AddAssociationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1AddTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1AddTagsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1AddTagsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1AddTagsCommand = deserializeAws_json1_1AddTagsCommand;
const deserializeAws_json1_1AddTagsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1AssociateTrialComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1AssociateTrialComponentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1AssociateTrialComponentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1AssociateTrialComponentCommand = deserializeAws_json1_1AssociateTrialComponentCommand;
const deserializeAws_json1_1AssociateTrialComponentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateActionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateActionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateActionCommand = deserializeAws_json1_1CreateActionCommand;
const deserializeAws_json1_1CreateActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateAlgorithmCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateAlgorithmCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateAlgorithmOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateAlgorithmCommand = deserializeAws_json1_1CreateAlgorithmCommand;
const deserializeAws_json1_1CreateAlgorithmCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateAppCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateAppCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateAppResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateAppCommand = deserializeAws_json1_1CreateAppCommand;
const deserializeAws_json1_1CreateAppCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateAppImageConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateAppImageConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateAppImageConfigResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateAppImageConfigCommand = deserializeAws_json1_1CreateAppImageConfigCommand;
const deserializeAws_json1_1CreateAppImageConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateArtifactCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateArtifactCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateArtifactResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateArtifactCommand = deserializeAws_json1_1CreateArtifactCommand;
const deserializeAws_json1_1CreateArtifactCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateAutoMLJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateAutoMLJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateAutoMLJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateAutoMLJobCommand = deserializeAws_json1_1CreateAutoMLJobCommand;
const deserializeAws_json1_1CreateAutoMLJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateCodeRepositoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateCodeRepositoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateCodeRepositoryOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateCodeRepositoryCommand = deserializeAws_json1_1CreateCodeRepositoryCommand;
const deserializeAws_json1_1CreateCodeRepositoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateCompilationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateCompilationJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateCompilationJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateCompilationJobCommand = deserializeAws_json1_1CreateCompilationJobCommand;
const deserializeAws_json1_1CreateCompilationJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateContextCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateContextCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateContextResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateContextCommand = deserializeAws_json1_1CreateContextCommand;
const deserializeAws_json1_1CreateContextCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateDataQualityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateDataQualityJobDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateDataQualityJobDefinitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateDataQualityJobDefinitionCommand = deserializeAws_json1_1CreateDataQualityJobDefinitionCommand;
const deserializeAws_json1_1CreateDataQualityJobDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateDeviceFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateDeviceFleetCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateDeviceFleetCommand = deserializeAws_json1_1CreateDeviceFleetCommand;
const deserializeAws_json1_1CreateDeviceFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateDomainCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateDomainResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateDomainCommand = deserializeAws_json1_1CreateDomainCommand;
const deserializeAws_json1_1CreateDomainCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateEdgePackagingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateEdgePackagingJobCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateEdgePackagingJobCommand = deserializeAws_json1_1CreateEdgePackagingJobCommand;
const deserializeAws_json1_1CreateEdgePackagingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateEndpointOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateEndpointCommand = deserializeAws_json1_1CreateEndpointCommand;
const deserializeAws_json1_1CreateEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateEndpointConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateEndpointConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateEndpointConfigOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateEndpointConfigCommand = deserializeAws_json1_1CreateEndpointConfigCommand;
const deserializeAws_json1_1CreateEndpointConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateExperimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateExperimentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateExperimentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateExperimentCommand = deserializeAws_json1_1CreateExperimentCommand;
const deserializeAws_json1_1CreateExperimentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateFeatureGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateFeatureGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateFeatureGroupResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateFeatureGroupCommand = deserializeAws_json1_1CreateFeatureGroupCommand;
const deserializeAws_json1_1CreateFeatureGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateFlowDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateFlowDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateFlowDefinitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateFlowDefinitionCommand = deserializeAws_json1_1CreateFlowDefinitionCommand;
const deserializeAws_json1_1CreateFlowDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateHumanTaskUiCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateHumanTaskUiCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateHumanTaskUiResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateHumanTaskUiCommand = deserializeAws_json1_1CreateHumanTaskUiCommand;
const deserializeAws_json1_1CreateHumanTaskUiCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateHyperParameterTuningJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateHyperParameterTuningJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateHyperParameterTuningJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateHyperParameterTuningJobCommand = deserializeAws_json1_1CreateHyperParameterTuningJobCommand;
const deserializeAws_json1_1CreateHyperParameterTuningJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateImageResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateImageCommand = deserializeAws_json1_1CreateImageCommand;
const deserializeAws_json1_1CreateImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateImageVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateImageVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateImageVersionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateImageVersionCommand = deserializeAws_json1_1CreateImageVersionCommand;
const deserializeAws_json1_1CreateImageVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateLabelingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateLabelingJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateLabelingJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateLabelingJobCommand = deserializeAws_json1_1CreateLabelingJobCommand;
const deserializeAws_json1_1CreateLabelingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateModelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateModelCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateModelOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateModelCommand = deserializeAws_json1_1CreateModelCommand;
const deserializeAws_json1_1CreateModelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateModelBiasJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateModelBiasJobDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateModelBiasJobDefinitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateModelBiasJobDefinitionCommand = deserializeAws_json1_1CreateModelBiasJobDefinitionCommand;
const deserializeAws_json1_1CreateModelBiasJobDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateModelExplainabilityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateModelExplainabilityJobDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateModelExplainabilityJobDefinitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateModelExplainabilityJobDefinitionCommand = deserializeAws_json1_1CreateModelExplainabilityJobDefinitionCommand;
const deserializeAws_json1_1CreateModelExplainabilityJobDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateModelPackageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateModelPackageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateModelPackageOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateModelPackageCommand = deserializeAws_json1_1CreateModelPackageCommand;
const deserializeAws_json1_1CreateModelPackageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            response = {
                ...(await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateModelPackageGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateModelPackageGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateModelPackageGroupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateModelPackageGroupCommand = deserializeAws_json1_1CreateModelPackageGroupCommand;
const deserializeAws_json1_1CreateModelPackageGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateModelQualityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateModelQualityJobDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateModelQualityJobDefinitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateModelQualityJobDefinitionCommand = deserializeAws_json1_1CreateModelQualityJobDefinitionCommand;
const deserializeAws_json1_1CreateModelQualityJobDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateMonitoringScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateMonitoringScheduleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateMonitoringScheduleResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateMonitoringScheduleCommand = deserializeAws_json1_1CreateMonitoringScheduleCommand;
const deserializeAws_json1_1CreateMonitoringScheduleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateNotebookInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateNotebookInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateNotebookInstanceOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateNotebookInstanceCommand = deserializeAws_json1_1CreateNotebookInstanceCommand;
const deserializeAws_json1_1CreateNotebookInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateNotebookInstanceLifecycleConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateNotebookInstanceLifecycleConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateNotebookInstanceLifecycleConfigOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateNotebookInstanceLifecycleConfigCommand = deserializeAws_json1_1CreateNotebookInstanceLifecycleConfigCommand;
const deserializeAws_json1_1CreateNotebookInstanceLifecycleConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreatePipelineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreatePipelineCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreatePipelineResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreatePipelineCommand = deserializeAws_json1_1CreatePipelineCommand;
const deserializeAws_json1_1CreatePipelineCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreatePresignedDomainUrlCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreatePresignedDomainUrlCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreatePresignedDomainUrlResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreatePresignedDomainUrlCommand = deserializeAws_json1_1CreatePresignedDomainUrlCommand;
const deserializeAws_json1_1CreatePresignedDomainUrlCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreatePresignedNotebookInstanceUrlCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreatePresignedNotebookInstanceUrlCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreatePresignedNotebookInstanceUrlOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreatePresignedNotebookInstanceUrlCommand = deserializeAws_json1_1CreatePresignedNotebookInstanceUrlCommand;
const deserializeAws_json1_1CreatePresignedNotebookInstanceUrlCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateProcessingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateProcessingJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateProcessingJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateProcessingJobCommand = deserializeAws_json1_1CreateProcessingJobCommand;
const deserializeAws_json1_1CreateProcessingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateProjectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateProjectOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateProjectCommand = deserializeAws_json1_1CreateProjectCommand;
const deserializeAws_json1_1CreateProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateTrainingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateTrainingJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateTrainingJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateTrainingJobCommand = deserializeAws_json1_1CreateTrainingJobCommand;
const deserializeAws_json1_1CreateTrainingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateTransformJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateTransformJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateTransformJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateTransformJobCommand = deserializeAws_json1_1CreateTransformJobCommand;
const deserializeAws_json1_1CreateTransformJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateTrialCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateTrialCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateTrialResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateTrialCommand = deserializeAws_json1_1CreateTrialCommand;
const deserializeAws_json1_1CreateTrialCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateTrialComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateTrialComponentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateTrialComponentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateTrialComponentCommand = deserializeAws_json1_1CreateTrialComponentCommand;
const deserializeAws_json1_1CreateTrialComponentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateUserProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateUserProfileCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateUserProfileResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateUserProfileCommand = deserializeAws_json1_1CreateUserProfileCommand;
const deserializeAws_json1_1CreateUserProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateWorkforceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateWorkforceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateWorkforceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateWorkforceCommand = deserializeAws_json1_1CreateWorkforceCommand;
const deserializeAws_json1_1CreateWorkforceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1CreateWorkteamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateWorkteamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateWorkteamResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1CreateWorkteamCommand = deserializeAws_json1_1CreateWorkteamCommand;
const deserializeAws_json1_1CreateWorkteamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteActionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteActionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteActionCommand = deserializeAws_json1_1DeleteActionCommand;
const deserializeAws_json1_1DeleteActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteAlgorithmCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteAlgorithmCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteAlgorithmCommand = deserializeAws_json1_1DeleteAlgorithmCommand;
const deserializeAws_json1_1DeleteAlgorithmCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteAppCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteAppCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteAppCommand = deserializeAws_json1_1DeleteAppCommand;
const deserializeAws_json1_1DeleteAppCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteAppImageConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteAppImageConfigCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteAppImageConfigCommand = deserializeAws_json1_1DeleteAppImageConfigCommand;
const deserializeAws_json1_1DeleteAppImageConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteArtifactCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteArtifactCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteArtifactResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteArtifactCommand = deserializeAws_json1_1DeleteArtifactCommand;
const deserializeAws_json1_1DeleteArtifactCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteAssociationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteAssociationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteAssociationCommand = deserializeAws_json1_1DeleteAssociationCommand;
const deserializeAws_json1_1DeleteAssociationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteCodeRepositoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteCodeRepositoryCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteCodeRepositoryCommand = deserializeAws_json1_1DeleteCodeRepositoryCommand;
const deserializeAws_json1_1DeleteCodeRepositoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteContextCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteContextCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteContextResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteContextCommand = deserializeAws_json1_1DeleteContextCommand;
const deserializeAws_json1_1DeleteContextCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteDataQualityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteDataQualityJobDefinitionCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteDataQualityJobDefinitionCommand = deserializeAws_json1_1DeleteDataQualityJobDefinitionCommand;
const deserializeAws_json1_1DeleteDataQualityJobDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteDeviceFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteDeviceFleetCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteDeviceFleetCommand = deserializeAws_json1_1DeleteDeviceFleetCommand;
const deserializeAws_json1_1DeleteDeviceFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteDomainCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteDomainCommand = deserializeAws_json1_1DeleteDomainCommand;
const deserializeAws_json1_1DeleteDomainCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteEndpointCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteEndpointCommand = deserializeAws_json1_1DeleteEndpointCommand;
const deserializeAws_json1_1DeleteEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteEndpointConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteEndpointConfigCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteEndpointConfigCommand = deserializeAws_json1_1DeleteEndpointConfigCommand;
const deserializeAws_json1_1DeleteEndpointConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteExperimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteExperimentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteExperimentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteExperimentCommand = deserializeAws_json1_1DeleteExperimentCommand;
const deserializeAws_json1_1DeleteExperimentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteFeatureGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteFeatureGroupCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteFeatureGroupCommand = deserializeAws_json1_1DeleteFeatureGroupCommand;
const deserializeAws_json1_1DeleteFeatureGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteFlowDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteFlowDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteFlowDefinitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteFlowDefinitionCommand = deserializeAws_json1_1DeleteFlowDefinitionCommand;
const deserializeAws_json1_1DeleteFlowDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteHumanTaskUiCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteHumanTaskUiCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteHumanTaskUiResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteHumanTaskUiCommand = deserializeAws_json1_1DeleteHumanTaskUiCommand;
const deserializeAws_json1_1DeleteHumanTaskUiCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteImageResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteImageCommand = deserializeAws_json1_1DeleteImageCommand;
const deserializeAws_json1_1DeleteImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteImageVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteImageVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteImageVersionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteImageVersionCommand = deserializeAws_json1_1DeleteImageVersionCommand;
const deserializeAws_json1_1DeleteImageVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteModelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteModelCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteModelCommand = deserializeAws_json1_1DeleteModelCommand;
const deserializeAws_json1_1DeleteModelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteModelBiasJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteModelBiasJobDefinitionCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteModelBiasJobDefinitionCommand = deserializeAws_json1_1DeleteModelBiasJobDefinitionCommand;
const deserializeAws_json1_1DeleteModelBiasJobDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteModelExplainabilityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteModelExplainabilityJobDefinitionCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteModelExplainabilityJobDefinitionCommand = deserializeAws_json1_1DeleteModelExplainabilityJobDefinitionCommand;
const deserializeAws_json1_1DeleteModelExplainabilityJobDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteModelPackageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteModelPackageCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteModelPackageCommand = deserializeAws_json1_1DeleteModelPackageCommand;
const deserializeAws_json1_1DeleteModelPackageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            response = {
                ...(await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteModelPackageGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteModelPackageGroupCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteModelPackageGroupCommand = deserializeAws_json1_1DeleteModelPackageGroupCommand;
const deserializeAws_json1_1DeleteModelPackageGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteModelPackageGroupPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteModelPackageGroupPolicyCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteModelPackageGroupPolicyCommand = deserializeAws_json1_1DeleteModelPackageGroupPolicyCommand;
const deserializeAws_json1_1DeleteModelPackageGroupPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteModelQualityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteModelQualityJobDefinitionCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteModelQualityJobDefinitionCommand = deserializeAws_json1_1DeleteModelQualityJobDefinitionCommand;
const deserializeAws_json1_1DeleteModelQualityJobDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteMonitoringScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteMonitoringScheduleCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteMonitoringScheduleCommand = deserializeAws_json1_1DeleteMonitoringScheduleCommand;
const deserializeAws_json1_1DeleteMonitoringScheduleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteNotebookInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteNotebookInstanceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteNotebookInstanceCommand = deserializeAws_json1_1DeleteNotebookInstanceCommand;
const deserializeAws_json1_1DeleteNotebookInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteNotebookInstanceLifecycleConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteNotebookInstanceLifecycleConfigCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteNotebookInstanceLifecycleConfigCommand = deserializeAws_json1_1DeleteNotebookInstanceLifecycleConfigCommand;
const deserializeAws_json1_1DeleteNotebookInstanceLifecycleConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeletePipelineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeletePipelineCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeletePipelineResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeletePipelineCommand = deserializeAws_json1_1DeletePipelineCommand;
const deserializeAws_json1_1DeletePipelineCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteProjectCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteProjectCommand = deserializeAws_json1_1DeleteProjectCommand;
const deserializeAws_json1_1DeleteProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteTagsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteTagsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteTagsCommand = deserializeAws_json1_1DeleteTagsCommand;
const deserializeAws_json1_1DeleteTagsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteTrialCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteTrialCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteTrialResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteTrialCommand = deserializeAws_json1_1DeleteTrialCommand;
const deserializeAws_json1_1DeleteTrialCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteTrialComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteTrialComponentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteTrialComponentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteTrialComponentCommand = deserializeAws_json1_1DeleteTrialComponentCommand;
const deserializeAws_json1_1DeleteTrialComponentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteUserProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteUserProfileCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteUserProfileCommand = deserializeAws_json1_1DeleteUserProfileCommand;
const deserializeAws_json1_1DeleteUserProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteWorkforceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteWorkforceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteWorkforceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteWorkforceCommand = deserializeAws_json1_1DeleteWorkforceCommand;
const deserializeAws_json1_1DeleteWorkforceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeleteWorkteamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteWorkteamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteWorkteamResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeleteWorkteamCommand = deserializeAws_json1_1DeleteWorkteamCommand;
const deserializeAws_json1_1DeleteWorkteamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DeregisterDevicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeregisterDevicesCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DeregisterDevicesCommand = deserializeAws_json1_1DeregisterDevicesCommand;
const deserializeAws_json1_1DeregisterDevicesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeActionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeActionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeActionCommand = deserializeAws_json1_1DescribeActionCommand;
const deserializeAws_json1_1DescribeActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeAlgorithmCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAlgorithmCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeAlgorithmOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeAlgorithmCommand = deserializeAws_json1_1DescribeAlgorithmCommand;
const deserializeAws_json1_1DescribeAlgorithmCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeAppCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAppCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeAppResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeAppCommand = deserializeAws_json1_1DescribeAppCommand;
const deserializeAws_json1_1DescribeAppCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeAppImageConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAppImageConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeAppImageConfigResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeAppImageConfigCommand = deserializeAws_json1_1DescribeAppImageConfigCommand;
const deserializeAws_json1_1DescribeAppImageConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeArtifactCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeArtifactCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeArtifactResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeArtifactCommand = deserializeAws_json1_1DescribeArtifactCommand;
const deserializeAws_json1_1DescribeArtifactCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeAutoMLJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAutoMLJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeAutoMLJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeAutoMLJobCommand = deserializeAws_json1_1DescribeAutoMLJobCommand;
const deserializeAws_json1_1DescribeAutoMLJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeCodeRepositoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeCodeRepositoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeCodeRepositoryOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeCodeRepositoryCommand = deserializeAws_json1_1DescribeCodeRepositoryCommand;
const deserializeAws_json1_1DescribeCodeRepositoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeCompilationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeCompilationJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeCompilationJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeCompilationJobCommand = deserializeAws_json1_1DescribeCompilationJobCommand;
const deserializeAws_json1_1DescribeCompilationJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeContextCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeContextCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeContextResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeContextCommand = deserializeAws_json1_1DescribeContextCommand;
const deserializeAws_json1_1DescribeContextCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeDataQualityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeDataQualityJobDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeDataQualityJobDefinitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeDataQualityJobDefinitionCommand = deserializeAws_json1_1DescribeDataQualityJobDefinitionCommand;
const deserializeAws_json1_1DescribeDataQualityJobDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeDeviceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeDeviceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeDeviceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeDeviceCommand = deserializeAws_json1_1DescribeDeviceCommand;
const deserializeAws_json1_1DescribeDeviceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeDeviceFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeDeviceFleetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeDeviceFleetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeDeviceFleetCommand = deserializeAws_json1_1DescribeDeviceFleetCommand;
const deserializeAws_json1_1DescribeDeviceFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeDomainCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeDomainResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeDomainCommand = deserializeAws_json1_1DescribeDomainCommand;
const deserializeAws_json1_1DescribeDomainCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeEdgePackagingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeEdgePackagingJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeEdgePackagingJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeEdgePackagingJobCommand = deserializeAws_json1_1DescribeEdgePackagingJobCommand;
const deserializeAws_json1_1DescribeEdgePackagingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeEndpointOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeEndpointCommand = deserializeAws_json1_1DescribeEndpointCommand;
const deserializeAws_json1_1DescribeEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeEndpointConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeEndpointConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeEndpointConfigOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeEndpointConfigCommand = deserializeAws_json1_1DescribeEndpointConfigCommand;
const deserializeAws_json1_1DescribeEndpointConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeExperimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeExperimentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeExperimentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeExperimentCommand = deserializeAws_json1_1DescribeExperimentCommand;
const deserializeAws_json1_1DescribeExperimentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeFeatureGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeFeatureGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeFeatureGroupResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeFeatureGroupCommand = deserializeAws_json1_1DescribeFeatureGroupCommand;
const deserializeAws_json1_1DescribeFeatureGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeFlowDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeFlowDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeFlowDefinitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeFlowDefinitionCommand = deserializeAws_json1_1DescribeFlowDefinitionCommand;
const deserializeAws_json1_1DescribeFlowDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeHumanTaskUiCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeHumanTaskUiCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeHumanTaskUiResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeHumanTaskUiCommand = deserializeAws_json1_1DescribeHumanTaskUiCommand;
const deserializeAws_json1_1DescribeHumanTaskUiCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeHyperParameterTuningJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeHyperParameterTuningJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeHyperParameterTuningJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeHyperParameterTuningJobCommand = deserializeAws_json1_1DescribeHyperParameterTuningJobCommand;
const deserializeAws_json1_1DescribeHyperParameterTuningJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeImageResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeImageCommand = deserializeAws_json1_1DescribeImageCommand;
const deserializeAws_json1_1DescribeImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeImageVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeImageVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeImageVersionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeImageVersionCommand = deserializeAws_json1_1DescribeImageVersionCommand;
const deserializeAws_json1_1DescribeImageVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeLabelingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeLabelingJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeLabelingJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeLabelingJobCommand = deserializeAws_json1_1DescribeLabelingJobCommand;
const deserializeAws_json1_1DescribeLabelingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeModelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeModelCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeModelOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeModelCommand = deserializeAws_json1_1DescribeModelCommand;
const deserializeAws_json1_1DescribeModelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeModelBiasJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeModelBiasJobDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeModelBiasJobDefinitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeModelBiasJobDefinitionCommand = deserializeAws_json1_1DescribeModelBiasJobDefinitionCommand;
const deserializeAws_json1_1DescribeModelBiasJobDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeModelExplainabilityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeModelExplainabilityJobDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeModelExplainabilityJobDefinitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeModelExplainabilityJobDefinitionCommand = deserializeAws_json1_1DescribeModelExplainabilityJobDefinitionCommand;
const deserializeAws_json1_1DescribeModelExplainabilityJobDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeModelPackageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeModelPackageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeModelPackageOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeModelPackageCommand = deserializeAws_json1_1DescribeModelPackageCommand;
const deserializeAws_json1_1DescribeModelPackageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeModelPackageGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeModelPackageGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeModelPackageGroupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeModelPackageGroupCommand = deserializeAws_json1_1DescribeModelPackageGroupCommand;
const deserializeAws_json1_1DescribeModelPackageGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeModelQualityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeModelQualityJobDefinitionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeModelQualityJobDefinitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeModelQualityJobDefinitionCommand = deserializeAws_json1_1DescribeModelQualityJobDefinitionCommand;
const deserializeAws_json1_1DescribeModelQualityJobDefinitionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeMonitoringScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeMonitoringScheduleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeMonitoringScheduleResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeMonitoringScheduleCommand = deserializeAws_json1_1DescribeMonitoringScheduleCommand;
const deserializeAws_json1_1DescribeMonitoringScheduleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeNotebookInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeNotebookInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeNotebookInstanceOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeNotebookInstanceCommand = deserializeAws_json1_1DescribeNotebookInstanceCommand;
const deserializeAws_json1_1DescribeNotebookInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeNotebookInstanceLifecycleConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeNotebookInstanceLifecycleConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeNotebookInstanceLifecycleConfigOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeNotebookInstanceLifecycleConfigCommand = deserializeAws_json1_1DescribeNotebookInstanceLifecycleConfigCommand;
const deserializeAws_json1_1DescribeNotebookInstanceLifecycleConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribePipelineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribePipelineCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribePipelineResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribePipelineCommand = deserializeAws_json1_1DescribePipelineCommand;
const deserializeAws_json1_1DescribePipelineCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribePipelineDefinitionForExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribePipelineDefinitionForExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribePipelineDefinitionForExecutionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribePipelineDefinitionForExecutionCommand = deserializeAws_json1_1DescribePipelineDefinitionForExecutionCommand;
const deserializeAws_json1_1DescribePipelineDefinitionForExecutionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribePipelineExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribePipelineExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribePipelineExecutionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribePipelineExecutionCommand = deserializeAws_json1_1DescribePipelineExecutionCommand;
const deserializeAws_json1_1DescribePipelineExecutionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeProcessingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeProcessingJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeProcessingJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeProcessingJobCommand = deserializeAws_json1_1DescribeProcessingJobCommand;
const deserializeAws_json1_1DescribeProcessingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeProjectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeProjectOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeProjectCommand = deserializeAws_json1_1DescribeProjectCommand;
const deserializeAws_json1_1DescribeProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeSubscribedWorkteamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeSubscribedWorkteamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeSubscribedWorkteamResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeSubscribedWorkteamCommand = deserializeAws_json1_1DescribeSubscribedWorkteamCommand;
const deserializeAws_json1_1DescribeSubscribedWorkteamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeTrainingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeTrainingJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeTrainingJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeTrainingJobCommand = deserializeAws_json1_1DescribeTrainingJobCommand;
const deserializeAws_json1_1DescribeTrainingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeTransformJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeTransformJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeTransformJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeTransformJobCommand = deserializeAws_json1_1DescribeTransformJobCommand;
const deserializeAws_json1_1DescribeTransformJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeTrialCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeTrialCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeTrialResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeTrialCommand = deserializeAws_json1_1DescribeTrialCommand;
const deserializeAws_json1_1DescribeTrialCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeTrialComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeTrialComponentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeTrialComponentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeTrialComponentCommand = deserializeAws_json1_1DescribeTrialComponentCommand;
const deserializeAws_json1_1DescribeTrialComponentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeUserProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeUserProfileCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeUserProfileResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeUserProfileCommand = deserializeAws_json1_1DescribeUserProfileCommand;
const deserializeAws_json1_1DescribeUserProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeWorkforceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeWorkforceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeWorkforceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeWorkforceCommand = deserializeAws_json1_1DescribeWorkforceCommand;
const deserializeAws_json1_1DescribeWorkforceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DescribeWorkteamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeWorkteamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeWorkteamResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeWorkteamCommand = deserializeAws_json1_1DescribeWorkteamCommand;
const deserializeAws_json1_1DescribeWorkteamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DisableSagemakerServicecatalogPortfolioCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DisableSagemakerServicecatalogPortfolioCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DisableSagemakerServicecatalogPortfolioOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DisableSagemakerServicecatalogPortfolioCommand = deserializeAws_json1_1DisableSagemakerServicecatalogPortfolioCommand;
const deserializeAws_json1_1DisableSagemakerServicecatalogPortfolioCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1DisassociateTrialComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DisassociateTrialComponentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DisassociateTrialComponentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DisassociateTrialComponentCommand = deserializeAws_json1_1DisassociateTrialComponentCommand;
const deserializeAws_json1_1DisassociateTrialComponentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1EnableSagemakerServicecatalogPortfolioCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1EnableSagemakerServicecatalogPortfolioCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1EnableSagemakerServicecatalogPortfolioOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1EnableSagemakerServicecatalogPortfolioCommand = deserializeAws_json1_1EnableSagemakerServicecatalogPortfolioCommand;
const deserializeAws_json1_1EnableSagemakerServicecatalogPortfolioCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1GetDeviceFleetReportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetDeviceFleetReportCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetDeviceFleetReportResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetDeviceFleetReportCommand = deserializeAws_json1_1GetDeviceFleetReportCommand;
const deserializeAws_json1_1GetDeviceFleetReportCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1GetModelPackageGroupPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetModelPackageGroupPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetModelPackageGroupPolicyOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetModelPackageGroupPolicyCommand = deserializeAws_json1_1GetModelPackageGroupPolicyCommand;
const deserializeAws_json1_1GetModelPackageGroupPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1GetSagemakerServicecatalogPortfolioStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetSagemakerServicecatalogPortfolioStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetSagemakerServicecatalogPortfolioStatusOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetSagemakerServicecatalogPortfolioStatusCommand = deserializeAws_json1_1GetSagemakerServicecatalogPortfolioStatusCommand;
const deserializeAws_json1_1GetSagemakerServicecatalogPortfolioStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1GetSearchSuggestionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetSearchSuggestionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetSearchSuggestionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1GetSearchSuggestionsCommand = deserializeAws_json1_1GetSearchSuggestionsCommand;
const deserializeAws_json1_1GetSearchSuggestionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListActionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListActionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListActionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListActionsCommand = deserializeAws_json1_1ListActionsCommand;
const deserializeAws_json1_1ListActionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListAlgorithmsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListAlgorithmsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListAlgorithmsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListAlgorithmsCommand = deserializeAws_json1_1ListAlgorithmsCommand;
const deserializeAws_json1_1ListAlgorithmsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListAppImageConfigsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListAppImageConfigsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListAppImageConfigsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListAppImageConfigsCommand = deserializeAws_json1_1ListAppImageConfigsCommand;
const deserializeAws_json1_1ListAppImageConfigsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListAppsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListAppsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListAppsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListAppsCommand = deserializeAws_json1_1ListAppsCommand;
const deserializeAws_json1_1ListAppsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListArtifactsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListArtifactsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListArtifactsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListArtifactsCommand = deserializeAws_json1_1ListArtifactsCommand;
const deserializeAws_json1_1ListArtifactsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListAssociationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListAssociationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListAssociationsCommand = deserializeAws_json1_1ListAssociationsCommand;
const deserializeAws_json1_1ListAssociationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListAutoMLJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListAutoMLJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListAutoMLJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListAutoMLJobsCommand = deserializeAws_json1_1ListAutoMLJobsCommand;
const deserializeAws_json1_1ListAutoMLJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListCandidatesForAutoMLJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListCandidatesForAutoMLJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListCandidatesForAutoMLJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListCandidatesForAutoMLJobCommand = deserializeAws_json1_1ListCandidatesForAutoMLJobCommand;
const deserializeAws_json1_1ListCandidatesForAutoMLJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListCodeRepositoriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListCodeRepositoriesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListCodeRepositoriesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListCodeRepositoriesCommand = deserializeAws_json1_1ListCodeRepositoriesCommand;
const deserializeAws_json1_1ListCodeRepositoriesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListCompilationJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListCompilationJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListCompilationJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListCompilationJobsCommand = deserializeAws_json1_1ListCompilationJobsCommand;
const deserializeAws_json1_1ListCompilationJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListContextsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListContextsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListContextsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListContextsCommand = deserializeAws_json1_1ListContextsCommand;
const deserializeAws_json1_1ListContextsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListDataQualityJobDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDataQualityJobDefinitionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListDataQualityJobDefinitionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListDataQualityJobDefinitionsCommand = deserializeAws_json1_1ListDataQualityJobDefinitionsCommand;
const deserializeAws_json1_1ListDataQualityJobDefinitionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListDeviceFleetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDeviceFleetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListDeviceFleetsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListDeviceFleetsCommand = deserializeAws_json1_1ListDeviceFleetsCommand;
const deserializeAws_json1_1ListDeviceFleetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListDevicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDevicesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListDevicesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListDevicesCommand = deserializeAws_json1_1ListDevicesCommand;
const deserializeAws_json1_1ListDevicesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListDomainsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDomainsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListDomainsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListDomainsCommand = deserializeAws_json1_1ListDomainsCommand;
const deserializeAws_json1_1ListDomainsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListEdgePackagingJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListEdgePackagingJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListEdgePackagingJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListEdgePackagingJobsCommand = deserializeAws_json1_1ListEdgePackagingJobsCommand;
const deserializeAws_json1_1ListEdgePackagingJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListEndpointConfigsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListEndpointConfigsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListEndpointConfigsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListEndpointConfigsCommand = deserializeAws_json1_1ListEndpointConfigsCommand;
const deserializeAws_json1_1ListEndpointConfigsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListEndpointsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListEndpointsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListEndpointsCommand = deserializeAws_json1_1ListEndpointsCommand;
const deserializeAws_json1_1ListEndpointsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListExperimentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListExperimentsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListExperimentsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListExperimentsCommand = deserializeAws_json1_1ListExperimentsCommand;
const deserializeAws_json1_1ListExperimentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListFeatureGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListFeatureGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListFeatureGroupsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListFeatureGroupsCommand = deserializeAws_json1_1ListFeatureGroupsCommand;
const deserializeAws_json1_1ListFeatureGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListFlowDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListFlowDefinitionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListFlowDefinitionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListFlowDefinitionsCommand = deserializeAws_json1_1ListFlowDefinitionsCommand;
const deserializeAws_json1_1ListFlowDefinitionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListHumanTaskUisCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListHumanTaskUisCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListHumanTaskUisResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListHumanTaskUisCommand = deserializeAws_json1_1ListHumanTaskUisCommand;
const deserializeAws_json1_1ListHumanTaskUisCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListHyperParameterTuningJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListHyperParameterTuningJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListHyperParameterTuningJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListHyperParameterTuningJobsCommand = deserializeAws_json1_1ListHyperParameterTuningJobsCommand;
const deserializeAws_json1_1ListHyperParameterTuningJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListImagesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListImagesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListImagesCommand = deserializeAws_json1_1ListImagesCommand;
const deserializeAws_json1_1ListImagesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListImageVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListImageVersionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListImageVersionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListImageVersionsCommand = deserializeAws_json1_1ListImageVersionsCommand;
const deserializeAws_json1_1ListImageVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListLabelingJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListLabelingJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListLabelingJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListLabelingJobsCommand = deserializeAws_json1_1ListLabelingJobsCommand;
const deserializeAws_json1_1ListLabelingJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListLabelingJobsForWorkteamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListLabelingJobsForWorkteamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListLabelingJobsForWorkteamResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListLabelingJobsForWorkteamCommand = deserializeAws_json1_1ListLabelingJobsForWorkteamCommand;
const deserializeAws_json1_1ListLabelingJobsForWorkteamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListModelBiasJobDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListModelBiasJobDefinitionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListModelBiasJobDefinitionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListModelBiasJobDefinitionsCommand = deserializeAws_json1_1ListModelBiasJobDefinitionsCommand;
const deserializeAws_json1_1ListModelBiasJobDefinitionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListModelExplainabilityJobDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListModelExplainabilityJobDefinitionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListModelExplainabilityJobDefinitionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListModelExplainabilityJobDefinitionsCommand = deserializeAws_json1_1ListModelExplainabilityJobDefinitionsCommand;
const deserializeAws_json1_1ListModelExplainabilityJobDefinitionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListModelPackageGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListModelPackageGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListModelPackageGroupsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListModelPackageGroupsCommand = deserializeAws_json1_1ListModelPackageGroupsCommand;
const deserializeAws_json1_1ListModelPackageGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListModelPackagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListModelPackagesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListModelPackagesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListModelPackagesCommand = deserializeAws_json1_1ListModelPackagesCommand;
const deserializeAws_json1_1ListModelPackagesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListModelQualityJobDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListModelQualityJobDefinitionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListModelQualityJobDefinitionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListModelQualityJobDefinitionsCommand = deserializeAws_json1_1ListModelQualityJobDefinitionsCommand;
const deserializeAws_json1_1ListModelQualityJobDefinitionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListModelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListModelsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListModelsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListModelsCommand = deserializeAws_json1_1ListModelsCommand;
const deserializeAws_json1_1ListModelsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListMonitoringExecutionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListMonitoringExecutionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListMonitoringExecutionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListMonitoringExecutionsCommand = deserializeAws_json1_1ListMonitoringExecutionsCommand;
const deserializeAws_json1_1ListMonitoringExecutionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListMonitoringSchedulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListMonitoringSchedulesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListMonitoringSchedulesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListMonitoringSchedulesCommand = deserializeAws_json1_1ListMonitoringSchedulesCommand;
const deserializeAws_json1_1ListMonitoringSchedulesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListNotebookInstanceLifecycleConfigsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListNotebookInstanceLifecycleConfigsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListNotebookInstanceLifecycleConfigsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListNotebookInstanceLifecycleConfigsCommand = deserializeAws_json1_1ListNotebookInstanceLifecycleConfigsCommand;
const deserializeAws_json1_1ListNotebookInstanceLifecycleConfigsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListNotebookInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListNotebookInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListNotebookInstancesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListNotebookInstancesCommand = deserializeAws_json1_1ListNotebookInstancesCommand;
const deserializeAws_json1_1ListNotebookInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListPipelineExecutionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListPipelineExecutionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListPipelineExecutionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListPipelineExecutionsCommand = deserializeAws_json1_1ListPipelineExecutionsCommand;
const deserializeAws_json1_1ListPipelineExecutionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListPipelineExecutionStepsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListPipelineExecutionStepsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListPipelineExecutionStepsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListPipelineExecutionStepsCommand = deserializeAws_json1_1ListPipelineExecutionStepsCommand;
const deserializeAws_json1_1ListPipelineExecutionStepsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListPipelineParametersForExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListPipelineParametersForExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListPipelineParametersForExecutionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListPipelineParametersForExecutionCommand = deserializeAws_json1_1ListPipelineParametersForExecutionCommand;
const deserializeAws_json1_1ListPipelineParametersForExecutionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListPipelinesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListPipelinesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListPipelinesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListPipelinesCommand = deserializeAws_json1_1ListPipelinesCommand;
const deserializeAws_json1_1ListPipelinesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListProcessingJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListProcessingJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListProcessingJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListProcessingJobsCommand = deserializeAws_json1_1ListProcessingJobsCommand;
const deserializeAws_json1_1ListProcessingJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListProjectsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListProjectsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListProjectsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListProjectsCommand = deserializeAws_json1_1ListProjectsCommand;
const deserializeAws_json1_1ListProjectsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListSubscribedWorkteamsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListSubscribedWorkteamsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListSubscribedWorkteamsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListSubscribedWorkteamsCommand = deserializeAws_json1_1ListSubscribedWorkteamsCommand;
const deserializeAws_json1_1ListSubscribedWorkteamsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTagsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListTagsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListTagsCommand = deserializeAws_json1_1ListTagsCommand;
const deserializeAws_json1_1ListTagsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListTrainingJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTrainingJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListTrainingJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListTrainingJobsCommand = deserializeAws_json1_1ListTrainingJobsCommand;
const deserializeAws_json1_1ListTrainingJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListTrainingJobsForHyperParameterTuningJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTrainingJobsForHyperParameterTuningJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListTrainingJobsForHyperParameterTuningJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListTrainingJobsForHyperParameterTuningJobCommand = deserializeAws_json1_1ListTrainingJobsForHyperParameterTuningJobCommand;
const deserializeAws_json1_1ListTrainingJobsForHyperParameterTuningJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListTransformJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTransformJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListTransformJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListTransformJobsCommand = deserializeAws_json1_1ListTransformJobsCommand;
const deserializeAws_json1_1ListTransformJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListTrialComponentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTrialComponentsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListTrialComponentsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListTrialComponentsCommand = deserializeAws_json1_1ListTrialComponentsCommand;
const deserializeAws_json1_1ListTrialComponentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListTrialsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTrialsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListTrialsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListTrialsCommand = deserializeAws_json1_1ListTrialsCommand;
const deserializeAws_json1_1ListTrialsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListUserProfilesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListUserProfilesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListUserProfilesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListUserProfilesCommand = deserializeAws_json1_1ListUserProfilesCommand;
const deserializeAws_json1_1ListUserProfilesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListWorkforcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListWorkforcesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListWorkforcesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListWorkforcesCommand = deserializeAws_json1_1ListWorkforcesCommand;
const deserializeAws_json1_1ListWorkforcesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ListWorkteamsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListWorkteamsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListWorkteamsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListWorkteamsCommand = deserializeAws_json1_1ListWorkteamsCommand;
const deserializeAws_json1_1ListWorkteamsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1PutModelPackageGroupPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutModelPackageGroupPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1PutModelPackageGroupPolicyOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1PutModelPackageGroupPolicyCommand = deserializeAws_json1_1PutModelPackageGroupPolicyCommand;
const deserializeAws_json1_1PutModelPackageGroupPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1RegisterDevicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1RegisterDevicesCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1RegisterDevicesCommand = deserializeAws_json1_1RegisterDevicesCommand;
const deserializeAws_json1_1RegisterDevicesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1RenderUiTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1RenderUiTemplateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1RenderUiTemplateResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1RenderUiTemplateCommand = deserializeAws_json1_1RenderUiTemplateCommand;
const deserializeAws_json1_1RenderUiTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1SearchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1SearchCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1SearchResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1SearchCommand = deserializeAws_json1_1SearchCommand;
const deserializeAws_json1_1SearchCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1StartMonitoringScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartMonitoringScheduleCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StartMonitoringScheduleCommand = deserializeAws_json1_1StartMonitoringScheduleCommand;
const deserializeAws_json1_1StartMonitoringScheduleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1StartNotebookInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartNotebookInstanceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StartNotebookInstanceCommand = deserializeAws_json1_1StartNotebookInstanceCommand;
const deserializeAws_json1_1StartNotebookInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1StartPipelineExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartPipelineExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartPipelineExecutionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StartPipelineExecutionCommand = deserializeAws_json1_1StartPipelineExecutionCommand;
const deserializeAws_json1_1StartPipelineExecutionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1StopAutoMLJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopAutoMLJobCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StopAutoMLJobCommand = deserializeAws_json1_1StopAutoMLJobCommand;
const deserializeAws_json1_1StopAutoMLJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1StopCompilationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopCompilationJobCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StopCompilationJobCommand = deserializeAws_json1_1StopCompilationJobCommand;
const deserializeAws_json1_1StopCompilationJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1StopEdgePackagingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopEdgePackagingJobCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StopEdgePackagingJobCommand = deserializeAws_json1_1StopEdgePackagingJobCommand;
const deserializeAws_json1_1StopEdgePackagingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1StopHyperParameterTuningJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopHyperParameterTuningJobCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StopHyperParameterTuningJobCommand = deserializeAws_json1_1StopHyperParameterTuningJobCommand;
const deserializeAws_json1_1StopHyperParameterTuningJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1StopLabelingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopLabelingJobCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StopLabelingJobCommand = deserializeAws_json1_1StopLabelingJobCommand;
const deserializeAws_json1_1StopLabelingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1StopMonitoringScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopMonitoringScheduleCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StopMonitoringScheduleCommand = deserializeAws_json1_1StopMonitoringScheduleCommand;
const deserializeAws_json1_1StopMonitoringScheduleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1StopNotebookInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopNotebookInstanceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StopNotebookInstanceCommand = deserializeAws_json1_1StopNotebookInstanceCommand;
const deserializeAws_json1_1StopNotebookInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1StopPipelineExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopPipelineExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StopPipelineExecutionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StopPipelineExecutionCommand = deserializeAws_json1_1StopPipelineExecutionCommand;
const deserializeAws_json1_1StopPipelineExecutionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1StopProcessingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopProcessingJobCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StopProcessingJobCommand = deserializeAws_json1_1StopProcessingJobCommand;
const deserializeAws_json1_1StopProcessingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1StopTrainingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopTrainingJobCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StopTrainingJobCommand = deserializeAws_json1_1StopTrainingJobCommand;
const deserializeAws_json1_1StopTrainingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1StopTransformJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopTransformJobCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StopTransformJobCommand = deserializeAws_json1_1StopTransformJobCommand;
const deserializeAws_json1_1StopTransformJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateActionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateActionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateActionCommand = deserializeAws_json1_1UpdateActionCommand;
const deserializeAws_json1_1UpdateActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            response = {
                ...(await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateAppImageConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateAppImageConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateAppImageConfigResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateAppImageConfigCommand = deserializeAws_json1_1UpdateAppImageConfigCommand;
const deserializeAws_json1_1UpdateAppImageConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateArtifactCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateArtifactCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateArtifactResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateArtifactCommand = deserializeAws_json1_1UpdateArtifactCommand;
const deserializeAws_json1_1UpdateArtifactCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            response = {
                ...(await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateCodeRepositoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateCodeRepositoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateCodeRepositoryOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateCodeRepositoryCommand = deserializeAws_json1_1UpdateCodeRepositoryCommand;
const deserializeAws_json1_1UpdateCodeRepositoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateContextCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateContextCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateContextResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateContextCommand = deserializeAws_json1_1UpdateContextCommand;
const deserializeAws_json1_1UpdateContextCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            response = {
                ...(await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateDeviceFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateDeviceFleetCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateDeviceFleetCommand = deserializeAws_json1_1UpdateDeviceFleetCommand;
const deserializeAws_json1_1UpdateDeviceFleetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateDevicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateDevicesCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateDevicesCommand = deserializeAws_json1_1UpdateDevicesCommand;
const deserializeAws_json1_1UpdateDevicesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateDomainCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateDomainResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateDomainCommand = deserializeAws_json1_1UpdateDomainCommand;
const deserializeAws_json1_1UpdateDomainCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateEndpointOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateEndpointCommand = deserializeAws_json1_1UpdateEndpointCommand;
const deserializeAws_json1_1UpdateEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateEndpointWeightsAndCapacitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateEndpointWeightsAndCapacitiesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateEndpointWeightsAndCapacitiesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateEndpointWeightsAndCapacitiesCommand = deserializeAws_json1_1UpdateEndpointWeightsAndCapacitiesCommand;
const deserializeAws_json1_1UpdateEndpointWeightsAndCapacitiesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateExperimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateExperimentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateExperimentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateExperimentCommand = deserializeAws_json1_1UpdateExperimentCommand;
const deserializeAws_json1_1UpdateExperimentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            response = {
                ...(await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateImageResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateImageCommand = deserializeAws_json1_1UpdateImageCommand;
const deserializeAws_json1_1UpdateImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateModelPackageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateModelPackageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateModelPackageOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateModelPackageCommand = deserializeAws_json1_1UpdateModelPackageCommand;
const deserializeAws_json1_1UpdateModelPackageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateMonitoringScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateMonitoringScheduleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateMonitoringScheduleResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateMonitoringScheduleCommand = deserializeAws_json1_1UpdateMonitoringScheduleCommand;
const deserializeAws_json1_1UpdateMonitoringScheduleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateNotebookInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateNotebookInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateNotebookInstanceOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateNotebookInstanceCommand = deserializeAws_json1_1UpdateNotebookInstanceCommand;
const deserializeAws_json1_1UpdateNotebookInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateNotebookInstanceLifecycleConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateNotebookInstanceLifecycleConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateNotebookInstanceLifecycleConfigOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateNotebookInstanceLifecycleConfigCommand = deserializeAws_json1_1UpdateNotebookInstanceLifecycleConfigCommand;
const deserializeAws_json1_1UpdateNotebookInstanceLifecycleConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdatePipelineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdatePipelineCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdatePipelineResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdatePipelineCommand = deserializeAws_json1_1UpdatePipelineCommand;
const deserializeAws_json1_1UpdatePipelineCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdatePipelineExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdatePipelineExecutionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdatePipelineExecutionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdatePipelineExecutionCommand = deserializeAws_json1_1UpdatePipelineExecutionCommand;
const deserializeAws_json1_1UpdatePipelineExecutionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateTrainingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateTrainingJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateTrainingJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateTrainingJobCommand = deserializeAws_json1_1UpdateTrainingJobCommand;
const deserializeAws_json1_1UpdateTrainingJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateTrialCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateTrialCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateTrialResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateTrialCommand = deserializeAws_json1_1UpdateTrialCommand;
const deserializeAws_json1_1UpdateTrialCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            response = {
                ...(await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateTrialComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateTrialComponentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateTrialComponentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateTrialComponentCommand = deserializeAws_json1_1UpdateTrialComponentCommand;
const deserializeAws_json1_1UpdateTrialComponentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            response = {
                ...(await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateUserProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateUserProfileCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateUserProfileResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateUserProfileCommand = deserializeAws_json1_1UpdateUserProfileCommand;
const deserializeAws_json1_1UpdateUserProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            response = {
                ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            response = {
                ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateWorkforceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateWorkforceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateWorkforceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateWorkforceCommand = deserializeAws_json1_1UpdateWorkforceCommand;
const deserializeAws_json1_1UpdateWorkforceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1UpdateWorkteamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateWorkteamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateWorkteamResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1UpdateWorkteamCommand = deserializeAws_json1_1UpdateWorkteamCommand;
const deserializeAws_json1_1UpdateWorkteamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            response = {
                ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_json1_1ConflictExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ConflictException(body, context);
    const contents = {
        name: "ConflictException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    };
    return contents;
};
const deserializeAws_json1_1ResourceInUseResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceInUse(body, context);
    const contents = {
        name: "ResourceInUse",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    };
    return contents;
};
const deserializeAws_json1_1ResourceLimitExceededResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceLimitExceeded(body, context);
    const contents = {
        name: "ResourceLimitExceeded",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    };
    return contents;
};
const deserializeAws_json1_1ResourceNotFoundResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceNotFound(body, context);
    const contents = {
        name: "ResourceNotFound",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    };
    return contents;
};
const serializeAws_json1_1ActionSource = (input, context) => {
    return {
        ...(input.SourceId !== undefined && input.SourceId !== null && { SourceId: input.SourceId }),
        ...(input.SourceType !== undefined && input.SourceType !== null && { SourceType: input.SourceType }),
        ...(input.SourceUri !== undefined && input.SourceUri !== null && { SourceUri: input.SourceUri }),
    };
};
const serializeAws_json1_1AddAssociationRequest = (input, context) => {
    return {
        ...(input.AssociationType !== undefined &&
            input.AssociationType !== null && { AssociationType: input.AssociationType }),
        ...(input.DestinationArn !== undefined &&
            input.DestinationArn !== null && { DestinationArn: input.DestinationArn }),
        ...(input.SourceArn !== undefined && input.SourceArn !== null && { SourceArn: input.SourceArn }),
    };
};
const serializeAws_json1_1AdditionalCodeRepositoryNamesOrUrls = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1AddTagsInput = (input, context) => {
    return {
        ...(input.ResourceArn !== undefined && input.ResourceArn !== null && { ResourceArn: input.ResourceArn }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1Alarm = (input, context) => {
    return {
        ...(input.AlarmName !== undefined && input.AlarmName !== null && { AlarmName: input.AlarmName }),
    };
};
const serializeAws_json1_1AlarmList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1Alarm(entry, context);
    });
};
const serializeAws_json1_1AlgorithmSpecification = (input, context) => {
    return {
        ...(input.AlgorithmName !== undefined && input.AlgorithmName !== null && { AlgorithmName: input.AlgorithmName }),
        ...(input.EnableSageMakerMetricsTimeSeries !== undefined &&
            input.EnableSageMakerMetricsTimeSeries !== null && {
            EnableSageMakerMetricsTimeSeries: input.EnableSageMakerMetricsTimeSeries,
        }),
        ...(input.MetricDefinitions !== undefined &&
            input.MetricDefinitions !== null && {
            MetricDefinitions: serializeAws_json1_1MetricDefinitionList(input.MetricDefinitions, context),
        }),
        ...(input.TrainingImage !== undefined && input.TrainingImage !== null && { TrainingImage: input.TrainingImage }),
        ...(input.TrainingInputMode !== undefined &&
            input.TrainingInputMode !== null && { TrainingInputMode: input.TrainingInputMode }),
    };
};
const serializeAws_json1_1AlgorithmValidationProfile = (input, context) => {
    return {
        ...(input.ProfileName !== undefined && input.ProfileName !== null && { ProfileName: input.ProfileName }),
        ...(input.TrainingJobDefinition !== undefined &&
            input.TrainingJobDefinition !== null && {
            TrainingJobDefinition: serializeAws_json1_1TrainingJobDefinition(input.TrainingJobDefinition, context),
        }),
        ...(input.TransformJobDefinition !== undefined &&
            input.TransformJobDefinition !== null && {
            TransformJobDefinition: serializeAws_json1_1TransformJobDefinition(input.TransformJobDefinition, context),
        }),
    };
};
const serializeAws_json1_1AlgorithmValidationProfiles = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1AlgorithmValidationProfile(entry, context);
    });
};
const serializeAws_json1_1AlgorithmValidationSpecification = (input, context) => {
    return {
        ...(input.ValidationProfiles !== undefined &&
            input.ValidationProfiles !== null && {
            ValidationProfiles: serializeAws_json1_1AlgorithmValidationProfiles(input.ValidationProfiles, context),
        }),
        ...(input.ValidationRole !== undefined &&
            input.ValidationRole !== null && { ValidationRole: input.ValidationRole }),
    };
};
const serializeAws_json1_1AnnotationConsolidationConfig = (input, context) => {
    return {
        ...(input.AnnotationConsolidationLambdaArn !== undefined &&
            input.AnnotationConsolidationLambdaArn !== null && {
            AnnotationConsolidationLambdaArn: input.AnnotationConsolidationLambdaArn,
        }),
    };
};
const serializeAws_json1_1AppSpecification = (input, context) => {
    return {
        ...(input.ContainerArguments !== undefined &&
            input.ContainerArguments !== null && {
            ContainerArguments: serializeAws_json1_1ContainerArguments(input.ContainerArguments, context),
        }),
        ...(input.ContainerEntrypoint !== undefined &&
            input.ContainerEntrypoint !== null && {
            ContainerEntrypoint: serializeAws_json1_1ContainerEntrypoint(input.ContainerEntrypoint, context),
        }),
        ...(input.ImageUri !== undefined && input.ImageUri !== null && { ImageUri: input.ImageUri }),
    };
};
const serializeAws_json1_1ArtifactSource = (input, context) => {
    return {
        ...(input.SourceTypes !== undefined &&
            input.SourceTypes !== null && {
            SourceTypes: serializeAws_json1_1ArtifactSourceTypes(input.SourceTypes, context),
        }),
        ...(input.SourceUri !== undefined && input.SourceUri !== null && { SourceUri: input.SourceUri }),
    };
};
const serializeAws_json1_1ArtifactSourceType = (input, context) => {
    return {
        ...(input.SourceIdType !== undefined && input.SourceIdType !== null && { SourceIdType: input.SourceIdType }),
        ...(input.Value !== undefined && input.Value !== null && { Value: input.Value }),
    };
};
const serializeAws_json1_1ArtifactSourceTypes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1ArtifactSourceType(entry, context);
    });
};
const serializeAws_json1_1AssociateTrialComponentRequest = (input, context) => {
    return {
        ...(input.TrialComponentName !== undefined &&
            input.TrialComponentName !== null && { TrialComponentName: input.TrialComponentName }),
        ...(input.TrialName !== undefined && input.TrialName !== null && { TrialName: input.TrialName }),
    };
};
const serializeAws_json1_1AthenaDatasetDefinition = (input, context) => {
    return {
        ...(input.Catalog !== undefined && input.Catalog !== null && { Catalog: input.Catalog }),
        ...(input.Database !== undefined && input.Database !== null && { Database: input.Database }),
        ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
        ...(input.OutputCompression !== undefined &&
            input.OutputCompression !== null && { OutputCompression: input.OutputCompression }),
        ...(input.OutputFormat !== undefined && input.OutputFormat !== null && { OutputFormat: input.OutputFormat }),
        ...(input.OutputS3Uri !== undefined && input.OutputS3Uri !== null && { OutputS3Uri: input.OutputS3Uri }),
        ...(input.QueryString !== undefined && input.QueryString !== null && { QueryString: input.QueryString }),
        ...(input.WorkGroup !== undefined && input.WorkGroup !== null && { WorkGroup: input.WorkGroup }),
    };
};
const serializeAws_json1_1AttributeNames = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1AutoMLChannel = (input, context) => {
    return {
        ...(input.CompressionType !== undefined &&
            input.CompressionType !== null && { CompressionType: input.CompressionType }),
        ...(input.DataSource !== undefined &&
            input.DataSource !== null && { DataSource: serializeAws_json1_1AutoMLDataSource(input.DataSource, context) }),
        ...(input.TargetAttributeName !== undefined &&
            input.TargetAttributeName !== null && { TargetAttributeName: input.TargetAttributeName }),
    };
};
const serializeAws_json1_1AutoMLDataSource = (input, context) => {
    return {
        ...(input.S3DataSource !== undefined &&
            input.S3DataSource !== null && {
            S3DataSource: serializeAws_json1_1AutoMLS3DataSource(input.S3DataSource, context),
        }),
    };
};
const serializeAws_json1_1AutoMLInputDataConfig = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1AutoMLChannel(entry, context);
    });
};
const serializeAws_json1_1AutoMLJobCompletionCriteria = (input, context) => {
    return {
        ...(input.MaxAutoMLJobRuntimeInSeconds !== undefined &&
            input.MaxAutoMLJobRuntimeInSeconds !== null && {
            MaxAutoMLJobRuntimeInSeconds: input.MaxAutoMLJobRuntimeInSeconds,
        }),
        ...(input.MaxCandidates !== undefined && input.MaxCandidates !== null && { MaxCandidates: input.MaxCandidates }),
        ...(input.MaxRuntimePerTrainingJobInSeconds !== undefined &&
            input.MaxRuntimePerTrainingJobInSeconds !== null && {
            MaxRuntimePerTrainingJobInSeconds: input.MaxRuntimePerTrainingJobInSeconds,
        }),
    };
};
const serializeAws_json1_1AutoMLJobConfig = (input, context) => {
    return {
        ...(input.CompletionCriteria !== undefined &&
            input.CompletionCriteria !== null && {
            CompletionCriteria: serializeAws_json1_1AutoMLJobCompletionCriteria(input.CompletionCriteria, context),
        }),
        ...(input.SecurityConfig !== undefined &&
            input.SecurityConfig !== null && {
            SecurityConfig: serializeAws_json1_1AutoMLSecurityConfig(input.SecurityConfig, context),
        }),
    };
};
const serializeAws_json1_1AutoMLJobObjective = (input, context) => {
    return {
        ...(input.MetricName !== undefined && input.MetricName !== null && { MetricName: input.MetricName }),
    };
};
const serializeAws_json1_1AutoMLOutputDataConfig = (input, context) => {
    return {
        ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
        ...(input.S3OutputPath !== undefined && input.S3OutputPath !== null && { S3OutputPath: input.S3OutputPath }),
    };
};
const serializeAws_json1_1AutoMLS3DataSource = (input, context) => {
    return {
        ...(input.S3DataType !== undefined && input.S3DataType !== null && { S3DataType: input.S3DataType }),
        ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
    };
};
const serializeAws_json1_1AutoMLSecurityConfig = (input, context) => {
    return {
        ...(input.EnableInterContainerTrafficEncryption !== undefined &&
            input.EnableInterContainerTrafficEncryption !== null && {
            EnableInterContainerTrafficEncryption: input.EnableInterContainerTrafficEncryption,
        }),
        ...(input.VolumeKmsKeyId !== undefined &&
            input.VolumeKmsKeyId !== null && { VolumeKmsKeyId: input.VolumeKmsKeyId }),
        ...(input.VpcConfig !== undefined &&
            input.VpcConfig !== null && { VpcConfig: serializeAws_json1_1VpcConfig(input.VpcConfig, context) }),
    };
};
const serializeAws_json1_1AutoRollbackConfig = (input, context) => {
    return {
        ...(input.Alarms !== undefined &&
            input.Alarms !== null && { Alarms: serializeAws_json1_1AlarmList(input.Alarms, context) }),
    };
};
const serializeAws_json1_1Bias = (input, context) => {
    return {
        ...(input.Report !== undefined &&
            input.Report !== null && { Report: serializeAws_json1_1MetricsSource(input.Report, context) }),
    };
};
const serializeAws_json1_1BlueGreenUpdatePolicy = (input, context) => {
    return {
        ...(input.MaximumExecutionTimeoutInSeconds !== undefined &&
            input.MaximumExecutionTimeoutInSeconds !== null && {
            MaximumExecutionTimeoutInSeconds: input.MaximumExecutionTimeoutInSeconds,
        }),
        ...(input.TerminationWaitInSeconds !== undefined &&
            input.TerminationWaitInSeconds !== null && { TerminationWaitInSeconds: input.TerminationWaitInSeconds }),
        ...(input.TrafficRoutingConfiguration !== undefined &&
            input.TrafficRoutingConfiguration !== null && {
            TrafficRoutingConfiguration: serializeAws_json1_1TrafficRoutingConfig(input.TrafficRoutingConfiguration, context),
        }),
    };
};
const serializeAws_json1_1CapacitySize = (input, context) => {
    return {
        ...(input.Type !== undefined && input.Type !== null && { Type: input.Type }),
        ...(input.Value !== undefined && input.Value !== null && { Value: input.Value }),
    };
};
const serializeAws_json1_1CaptureContentTypeHeader = (input, context) => {
    return {
        ...(input.CsvContentTypes !== undefined &&
            input.CsvContentTypes !== null && {
            CsvContentTypes: serializeAws_json1_1CsvContentTypes(input.CsvContentTypes, context),
        }),
        ...(input.JsonContentTypes !== undefined &&
            input.JsonContentTypes !== null && {
            JsonContentTypes: serializeAws_json1_1JsonContentTypes(input.JsonContentTypes, context),
        }),
    };
};
const serializeAws_json1_1CaptureOption = (input, context) => {
    return {
        ...(input.CaptureMode !== undefined && input.CaptureMode !== null && { CaptureMode: input.CaptureMode }),
    };
};
const serializeAws_json1_1CaptureOptionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1CaptureOption(entry, context);
    });
};
const serializeAws_json1_1CategoricalParameterRange = (input, context) => {
    return {
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
        ...(input.Values !== undefined &&
            input.Values !== null && { Values: serializeAws_json1_1ParameterValues(input.Values, context) }),
    };
};
const serializeAws_json1_1CategoricalParameterRanges = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1CategoricalParameterRange(entry, context);
    });
};
const serializeAws_json1_1CategoricalParameterRangeSpecification = (input, context) => {
    return {
        ...(input.Values !== undefined &&
            input.Values !== null && { Values: serializeAws_json1_1ParameterValues(input.Values, context) }),
    };
};
const serializeAws_json1_1Channel = (input, context) => {
    return {
        ...(input.ChannelName !== undefined && input.ChannelName !== null && { ChannelName: input.ChannelName }),
        ...(input.CompressionType !== undefined &&
            input.CompressionType !== null && { CompressionType: input.CompressionType }),
        ...(input.ContentType !== undefined && input.ContentType !== null && { ContentType: input.ContentType }),
        ...(input.DataSource !== undefined &&
            input.DataSource !== null && { DataSource: serializeAws_json1_1DataSource(input.DataSource, context) }),
        ...(input.InputMode !== undefined && input.InputMode !== null && { InputMode: input.InputMode }),
        ...(input.RecordWrapperType !== undefined &&
            input.RecordWrapperType !== null && { RecordWrapperType: input.RecordWrapperType }),
        ...(input.ShuffleConfig !== undefined &&
            input.ShuffleConfig !== null && {
            ShuffleConfig: serializeAws_json1_1ShuffleConfig(input.ShuffleConfig, context),
        }),
    };
};
const serializeAws_json1_1ChannelSpecification = (input, context) => {
    return {
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.IsRequired !== undefined && input.IsRequired !== null && { IsRequired: input.IsRequired }),
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
        ...(input.SupportedCompressionTypes !== undefined &&
            input.SupportedCompressionTypes !== null && {
            SupportedCompressionTypes: serializeAws_json1_1CompressionTypes(input.SupportedCompressionTypes, context),
        }),
        ...(input.SupportedContentTypes !== undefined &&
            input.SupportedContentTypes !== null && {
            SupportedContentTypes: serializeAws_json1_1ContentTypes(input.SupportedContentTypes, context),
        }),
        ...(input.SupportedInputModes !== undefined &&
            input.SupportedInputModes !== null && {
            SupportedInputModes: serializeAws_json1_1InputModes(input.SupportedInputModes, context),
        }),
    };
};
const serializeAws_json1_1ChannelSpecifications = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1ChannelSpecification(entry, context);
    });
};
const serializeAws_json1_1CheckpointConfig = (input, context) => {
    return {
        ...(input.LocalPath !== undefined && input.LocalPath !== null && { LocalPath: input.LocalPath }),
        ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
    };
};
const serializeAws_json1_1Cidrs = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1CognitoConfig = (input, context) => {
    return {
        ...(input.ClientId !== undefined && input.ClientId !== null && { ClientId: input.ClientId }),
        ...(input.UserPool !== undefined && input.UserPool !== null && { UserPool: input.UserPool }),
    };
};
const serializeAws_json1_1CognitoMemberDefinition = (input, context) => {
    return {
        ...(input.ClientId !== undefined && input.ClientId !== null && { ClientId: input.ClientId }),
        ...(input.UserGroup !== undefined && input.UserGroup !== null && { UserGroup: input.UserGroup }),
        ...(input.UserPool !== undefined && input.UserPool !== null && { UserPool: input.UserPool }),
    };
};
const serializeAws_json1_1CollectionConfiguration = (input, context) => {
    return {
        ...(input.CollectionName !== undefined &&
            input.CollectionName !== null && { CollectionName: input.CollectionName }),
        ...(input.CollectionParameters !== undefined &&
            input.CollectionParameters !== null && {
            CollectionParameters: serializeAws_json1_1CollectionParameters(input.CollectionParameters, context),
        }),
    };
};
const serializeAws_json1_1CollectionConfigurations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1CollectionConfiguration(entry, context);
    });
};
const serializeAws_json1_1CollectionParameters = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const serializeAws_json1_1CompressionTypes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1ContainerArguments = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1ContainerDefinition = (input, context) => {
    return {
        ...(input.ContainerHostname !== undefined &&
            input.ContainerHostname !== null && { ContainerHostname: input.ContainerHostname }),
        ...(input.Environment !== undefined &&
            input.Environment !== null && { Environment: serializeAws_json1_1EnvironmentMap(input.Environment, context) }),
        ...(input.Image !== undefined && input.Image !== null && { Image: input.Image }),
        ...(input.ImageConfig !== undefined &&
            input.ImageConfig !== null && { ImageConfig: serializeAws_json1_1ImageConfig(input.ImageConfig, context) }),
        ...(input.Mode !== undefined && input.Mode !== null && { Mode: input.Mode }),
        ...(input.ModelDataUrl !== undefined && input.ModelDataUrl !== null && { ModelDataUrl: input.ModelDataUrl }),
        ...(input.ModelPackageName !== undefined &&
            input.ModelPackageName !== null && { ModelPackageName: input.ModelPackageName }),
        ...(input.MultiModelConfig !== undefined &&
            input.MultiModelConfig !== null && {
            MultiModelConfig: serializeAws_json1_1MultiModelConfig(input.MultiModelConfig, context),
        }),
    };
};
const serializeAws_json1_1ContainerDefinitionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1ContainerDefinition(entry, context);
    });
};
const serializeAws_json1_1ContainerEntrypoint = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1ContentClassifiers = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1ContentTypes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1ContextSource = (input, context) => {
    return {
        ...(input.SourceId !== undefined && input.SourceId !== null && { SourceId: input.SourceId }),
        ...(input.SourceType !== undefined && input.SourceType !== null && { SourceType: input.SourceType }),
        ...(input.SourceUri !== undefined && input.SourceUri !== null && { SourceUri: input.SourceUri }),
    };
};
const serializeAws_json1_1ContinuousParameterRange = (input, context) => {
    return {
        ...(input.MaxValue !== undefined && input.MaxValue !== null && { MaxValue: input.MaxValue }),
        ...(input.MinValue !== undefined && input.MinValue !== null && { MinValue: input.MinValue }),
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
        ...(input.ScalingType !== undefined && input.ScalingType !== null && { ScalingType: input.ScalingType }),
    };
};
const serializeAws_json1_1ContinuousParameterRanges = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1ContinuousParameterRange(entry, context);
    });
};
const serializeAws_json1_1ContinuousParameterRangeSpecification = (input, context) => {
    return {
        ...(input.MaxValue !== undefined && input.MaxValue !== null && { MaxValue: input.MaxValue }),
        ...(input.MinValue !== undefined && input.MinValue !== null && { MinValue: input.MinValue }),
    };
};
const serializeAws_json1_1CreateActionRequest = (input, context) => {
    return {
        ...(input.ActionName !== undefined && input.ActionName !== null && { ActionName: input.ActionName }),
        ...(input.ActionType !== undefined && input.ActionType !== null && { ActionType: input.ActionType }),
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.MetadataProperties !== undefined &&
            input.MetadataProperties !== null && {
            MetadataProperties: serializeAws_json1_1MetadataProperties(input.MetadataProperties, context),
        }),
        ...(input.Properties !== undefined &&
            input.Properties !== null && {
            Properties: serializeAws_json1_1LineageEntityParameters(input.Properties, context),
        }),
        ...(input.Source !== undefined &&
            input.Source !== null && { Source: serializeAws_json1_1ActionSource(input.Source, context) }),
        ...(input.Status !== undefined && input.Status !== null && { Status: input.Status }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateAlgorithmInput = (input, context) => {
    return {
        ...(input.AlgorithmDescription !== undefined &&
            input.AlgorithmDescription !== null && { AlgorithmDescription: input.AlgorithmDescription }),
        ...(input.AlgorithmName !== undefined && input.AlgorithmName !== null && { AlgorithmName: input.AlgorithmName }),
        ...(input.CertifyForMarketplace !== undefined &&
            input.CertifyForMarketplace !== null && { CertifyForMarketplace: input.CertifyForMarketplace }),
        ...(input.InferenceSpecification !== undefined &&
            input.InferenceSpecification !== null && {
            InferenceSpecification: serializeAws_json1_1InferenceSpecification(input.InferenceSpecification, context),
        }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
        ...(input.TrainingSpecification !== undefined &&
            input.TrainingSpecification !== null && {
            TrainingSpecification: serializeAws_json1_1TrainingSpecification(input.TrainingSpecification, context),
        }),
        ...(input.ValidationSpecification !== undefined &&
            input.ValidationSpecification !== null && {
            ValidationSpecification: serializeAws_json1_1AlgorithmValidationSpecification(input.ValidationSpecification, context),
        }),
    };
};
const serializeAws_json1_1CreateAppImageConfigRequest = (input, context) => {
    return {
        ...(input.AppImageConfigName !== undefined &&
            input.AppImageConfigName !== null && { AppImageConfigName: input.AppImageConfigName }),
        ...(input.KernelGatewayImageConfig !== undefined &&
            input.KernelGatewayImageConfig !== null && {
            KernelGatewayImageConfig: serializeAws_json1_1KernelGatewayImageConfig(input.KernelGatewayImageConfig, context),
        }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateAppRequest = (input, context) => {
    return {
        ...(input.AppName !== undefined && input.AppName !== null && { AppName: input.AppName }),
        ...(input.AppType !== undefined && input.AppType !== null && { AppType: input.AppType }),
        ...(input.DomainId !== undefined && input.DomainId !== null && { DomainId: input.DomainId }),
        ...(input.ResourceSpec !== undefined &&
            input.ResourceSpec !== null && { ResourceSpec: serializeAws_json1_1ResourceSpec(input.ResourceSpec, context) }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
        ...(input.UserProfileName !== undefined &&
            input.UserProfileName !== null && { UserProfileName: input.UserProfileName }),
    };
};
const serializeAws_json1_1CreateArtifactRequest = (input, context) => {
    return {
        ...(input.ArtifactName !== undefined && input.ArtifactName !== null && { ArtifactName: input.ArtifactName }),
        ...(input.ArtifactType !== undefined && input.ArtifactType !== null && { ArtifactType: input.ArtifactType }),
        ...(input.MetadataProperties !== undefined &&
            input.MetadataProperties !== null && {
            MetadataProperties: serializeAws_json1_1MetadataProperties(input.MetadataProperties, context),
        }),
        ...(input.Properties !== undefined &&
            input.Properties !== null && {
            Properties: serializeAws_json1_1LineageEntityParameters(input.Properties, context),
        }),
        ...(input.Source !== undefined &&
            input.Source !== null && { Source: serializeAws_json1_1ArtifactSource(input.Source, context) }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateAutoMLJobRequest = (input, context) => {
    return {
        ...(input.AutoMLJobConfig !== undefined &&
            input.AutoMLJobConfig !== null && {
            AutoMLJobConfig: serializeAws_json1_1AutoMLJobConfig(input.AutoMLJobConfig, context),
        }),
        ...(input.AutoMLJobName !== undefined && input.AutoMLJobName !== null && { AutoMLJobName: input.AutoMLJobName }),
        ...(input.AutoMLJobObjective !== undefined &&
            input.AutoMLJobObjective !== null && {
            AutoMLJobObjective: serializeAws_json1_1AutoMLJobObjective(input.AutoMLJobObjective, context),
        }),
        ...(input.GenerateCandidateDefinitionsOnly !== undefined &&
            input.GenerateCandidateDefinitionsOnly !== null && {
            GenerateCandidateDefinitionsOnly: input.GenerateCandidateDefinitionsOnly,
        }),
        ...(input.InputDataConfig !== undefined &&
            input.InputDataConfig !== null && {
            InputDataConfig: serializeAws_json1_1AutoMLInputDataConfig(input.InputDataConfig, context),
        }),
        ...(input.ModelDeployConfig !== undefined &&
            input.ModelDeployConfig !== null && {
            ModelDeployConfig: serializeAws_json1_1ModelDeployConfig(input.ModelDeployConfig, context),
        }),
        ...(input.OutputDataConfig !== undefined &&
            input.OutputDataConfig !== null && {
            OutputDataConfig: serializeAws_json1_1AutoMLOutputDataConfig(input.OutputDataConfig, context),
        }),
        ...(input.ProblemType !== undefined && input.ProblemType !== null && { ProblemType: input.ProblemType }),
        ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateCodeRepositoryInput = (input, context) => {
    return {
        ...(input.CodeRepositoryName !== undefined &&
            input.CodeRepositoryName !== null && { CodeRepositoryName: input.CodeRepositoryName }),
        ...(input.GitConfig !== undefined &&
            input.GitConfig !== null && { GitConfig: serializeAws_json1_1GitConfig(input.GitConfig, context) }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateCompilationJobRequest = (input, context) => {
    return {
        ...(input.CompilationJobName !== undefined &&
            input.CompilationJobName !== null && { CompilationJobName: input.CompilationJobName }),
        ...(input.InputConfig !== undefined &&
            input.InputConfig !== null && { InputConfig: serializeAws_json1_1InputConfig(input.InputConfig, context) }),
        ...(input.OutputConfig !== undefined &&
            input.OutputConfig !== null && { OutputConfig: serializeAws_json1_1OutputConfig(input.OutputConfig, context) }),
        ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
        ...(input.StoppingCondition !== undefined &&
            input.StoppingCondition !== null && {
            StoppingCondition: serializeAws_json1_1StoppingCondition(input.StoppingCondition, context),
        }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateContextRequest = (input, context) => {
    return {
        ...(input.ContextName !== undefined && input.ContextName !== null && { ContextName: input.ContextName }),
        ...(input.ContextType !== undefined && input.ContextType !== null && { ContextType: input.ContextType }),
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.Properties !== undefined &&
            input.Properties !== null && {
            Properties: serializeAws_json1_1LineageEntityParameters(input.Properties, context),
        }),
        ...(input.Source !== undefined &&
            input.Source !== null && { Source: serializeAws_json1_1ContextSource(input.Source, context) }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateDataQualityJobDefinitionRequest = (input, context) => {
    return {
        ...(input.DataQualityAppSpecification !== undefined &&
            input.DataQualityAppSpecification !== null && {
            DataQualityAppSpecification: serializeAws_json1_1DataQualityAppSpecification(input.DataQualityAppSpecification, context),
        }),
        ...(input.DataQualityBaselineConfig !== undefined &&
            input.DataQualityBaselineConfig !== null && {
            DataQualityBaselineConfig: serializeAws_json1_1DataQualityBaselineConfig(input.DataQualityBaselineConfig, context),
        }),
        ...(input.DataQualityJobInput !== undefined &&
            input.DataQualityJobInput !== null && {
            DataQualityJobInput: serializeAws_json1_1DataQualityJobInput(input.DataQualityJobInput, context),
        }),
        ...(input.DataQualityJobOutputConfig !== undefined &&
            input.DataQualityJobOutputConfig !== null && {
            DataQualityJobOutputConfig: serializeAws_json1_1MonitoringOutputConfig(input.DataQualityJobOutputConfig, context),
        }),
        ...(input.JobDefinitionName !== undefined &&
            input.JobDefinitionName !== null && { JobDefinitionName: input.JobDefinitionName }),
        ...(input.JobResources !== undefined &&
            input.JobResources !== null && {
            JobResources: serializeAws_json1_1MonitoringResources(input.JobResources, context),
        }),
        ...(input.NetworkConfig !== undefined &&
            input.NetworkConfig !== null && {
            NetworkConfig: serializeAws_json1_1MonitoringNetworkConfig(input.NetworkConfig, context),
        }),
        ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
        ...(input.StoppingCondition !== undefined &&
            input.StoppingCondition !== null && {
            StoppingCondition: serializeAws_json1_1MonitoringStoppingCondition(input.StoppingCondition, context),
        }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateDeviceFleetRequest = (input, context) => {
    return {
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.DeviceFleetName !== undefined &&
            input.DeviceFleetName !== null && { DeviceFleetName: input.DeviceFleetName }),
        ...(input.OutputConfig !== undefined &&
            input.OutputConfig !== null && {
            OutputConfig: serializeAws_json1_1EdgeOutputConfig(input.OutputConfig, context),
        }),
        ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateDomainRequest = (input, context) => {
    return {
        ...(input.AppNetworkAccessType !== undefined &&
            input.AppNetworkAccessType !== null && { AppNetworkAccessType: input.AppNetworkAccessType }),
        ...(input.AuthMode !== undefined && input.AuthMode !== null && { AuthMode: input.AuthMode }),
        ...(input.DefaultUserSettings !== undefined &&
            input.DefaultUserSettings !== null && {
            DefaultUserSettings: serializeAws_json1_1UserSettings(input.DefaultUserSettings, context),
        }),
        ...(input.DomainName !== undefined && input.DomainName !== null && { DomainName: input.DomainName }),
        ...(input.HomeEfsFileSystemKmsKeyId !== undefined &&
            input.HomeEfsFileSystemKmsKeyId !== null && { HomeEfsFileSystemKmsKeyId: input.HomeEfsFileSystemKmsKeyId }),
        ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
        ...(input.SubnetIds !== undefined &&
            input.SubnetIds !== null && { SubnetIds: serializeAws_json1_1Subnets(input.SubnetIds, context) }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
        ...(input.VpcId !== undefined && input.VpcId !== null && { VpcId: input.VpcId }),
    };
};
const serializeAws_json1_1CreateEdgePackagingJobRequest = (input, context) => {
    return {
        ...(input.CompilationJobName !== undefined &&
            input.CompilationJobName !== null && { CompilationJobName: input.CompilationJobName }),
        ...(input.EdgePackagingJobName !== undefined &&
            input.EdgePackagingJobName !== null && { EdgePackagingJobName: input.EdgePackagingJobName }),
        ...(input.ModelName !== undefined && input.ModelName !== null && { ModelName: input.ModelName }),
        ...(input.ModelVersion !== undefined && input.ModelVersion !== null && { ModelVersion: input.ModelVersion }),
        ...(input.OutputConfig !== undefined &&
            input.OutputConfig !== null && {
            OutputConfig: serializeAws_json1_1EdgeOutputConfig(input.OutputConfig, context),
        }),
        ...(input.ResourceKey !== undefined && input.ResourceKey !== null && { ResourceKey: input.ResourceKey }),
        ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateEndpointConfigInput = (input, context) => {
    return {
        ...(input.DataCaptureConfig !== undefined &&
            input.DataCaptureConfig !== null && {
            DataCaptureConfig: serializeAws_json1_1DataCaptureConfig(input.DataCaptureConfig, context),
        }),
        ...(input.EndpointConfigName !== undefined &&
            input.EndpointConfigName !== null && { EndpointConfigName: input.EndpointConfigName }),
        ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
        ...(input.ProductionVariants !== undefined &&
            input.ProductionVariants !== null && {
            ProductionVariants: serializeAws_json1_1ProductionVariantList(input.ProductionVariants, context),
        }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateEndpointInput = (input, context) => {
    return {
        ...(input.EndpointConfigName !== undefined &&
            input.EndpointConfigName !== null && { EndpointConfigName: input.EndpointConfigName }),
        ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateExperimentRequest = (input, context) => {
    return {
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
        ...(input.ExperimentName !== undefined &&
            input.ExperimentName !== null && { ExperimentName: input.ExperimentName }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateFeatureGroupRequest = (input, context) => {
    return {
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.EventTimeFeatureName !== undefined &&
            input.EventTimeFeatureName !== null && { EventTimeFeatureName: input.EventTimeFeatureName }),
        ...(input.FeatureDefinitions !== undefined &&
            input.FeatureDefinitions !== null && {
            FeatureDefinitions: serializeAws_json1_1FeatureDefinitions(input.FeatureDefinitions, context),
        }),
        ...(input.FeatureGroupName !== undefined &&
            input.FeatureGroupName !== null && { FeatureGroupName: input.FeatureGroupName }),
        ...(input.OfflineStoreConfig !== undefined &&
            input.OfflineStoreConfig !== null && {
            OfflineStoreConfig: serializeAws_json1_1OfflineStoreConfig(input.OfflineStoreConfig, context),
        }),
        ...(input.OnlineStoreConfig !== undefined &&
            input.OnlineStoreConfig !== null && {
            OnlineStoreConfig: serializeAws_json1_1OnlineStoreConfig(input.OnlineStoreConfig, context),
        }),
        ...(input.RecordIdentifierFeatureName !== undefined &&
            input.RecordIdentifierFeatureName !== null && { RecordIdentifierFeatureName: input.RecordIdentifierFeatureName }),
        ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateFlowDefinitionRequest = (input, context) => {
    return {
        ...(input.FlowDefinitionName !== undefined &&
            input.FlowDefinitionName !== null && { FlowDefinitionName: input.FlowDefinitionName }),
        ...(input.HumanLoopActivationConfig !== undefined &&
            input.HumanLoopActivationConfig !== null && {
            HumanLoopActivationConfig: serializeAws_json1_1HumanLoopActivationConfig(input.HumanLoopActivationConfig, context),
        }),
        ...(input.HumanLoopConfig !== undefined &&
            input.HumanLoopConfig !== null && {
            HumanLoopConfig: serializeAws_json1_1HumanLoopConfig(input.HumanLoopConfig, context),
        }),
        ...(input.HumanLoopRequestSource !== undefined &&
            input.HumanLoopRequestSource !== null && {
            HumanLoopRequestSource: serializeAws_json1_1HumanLoopRequestSource(input.HumanLoopRequestSource, context),
        }),
        ...(input.OutputConfig !== undefined &&
            input.OutputConfig !== null && {
            OutputConfig: serializeAws_json1_1FlowDefinitionOutputConfig(input.OutputConfig, context),
        }),
        ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateHumanTaskUiRequest = (input, context) => {
    return {
        ...(input.HumanTaskUiName !== undefined &&
            input.HumanTaskUiName !== null && { HumanTaskUiName: input.HumanTaskUiName }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
        ...(input.UiTemplate !== undefined &&
            input.UiTemplate !== null && { UiTemplate: serializeAws_json1_1UiTemplate(input.UiTemplate, context) }),
    };
};
const serializeAws_json1_1CreateHyperParameterTuningJobRequest = (input, context) => {
    return {
        ...(input.HyperParameterTuningJobConfig !== undefined &&
            input.HyperParameterTuningJobConfig !== null && {
            HyperParameterTuningJobConfig: serializeAws_json1_1HyperParameterTuningJobConfig(input.HyperParameterTuningJobConfig, context),
        }),
        ...(input.HyperParameterTuningJobName !== undefined &&
            input.HyperParameterTuningJobName !== null && { HyperParameterTuningJobName: input.HyperParameterTuningJobName }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
        ...(input.TrainingJobDefinition !== undefined &&
            input.TrainingJobDefinition !== null && {
            TrainingJobDefinition: serializeAws_json1_1HyperParameterTrainingJobDefinition(input.TrainingJobDefinition, context),
        }),
        ...(input.TrainingJobDefinitions !== undefined &&
            input.TrainingJobDefinitions !== null && {
            TrainingJobDefinitions: serializeAws_json1_1HyperParameterTrainingJobDefinitions(input.TrainingJobDefinitions, context),
        }),
        ...(input.WarmStartConfig !== undefined &&
            input.WarmStartConfig !== null && {
            WarmStartConfig: serializeAws_json1_1HyperParameterTuningJobWarmStartConfig(input.WarmStartConfig, context),
        }),
    };
};
const serializeAws_json1_1CreateImageRequest = (input, context) => {
    return {
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
        ...(input.ImageName !== undefined && input.ImageName !== null && { ImageName: input.ImageName }),
        ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateImageVersionRequest = (input, context) => {
    var _a;
    return {
        ...(input.BaseImage !== undefined && input.BaseImage !== null && { BaseImage: input.BaseImage }),
        ClientToken: (_a = input.ClientToken) !== null && _a !== void 0 ? _a : uuid_1.v4(),
        ...(input.ImageName !== undefined && input.ImageName !== null && { ImageName: input.ImageName }),
    };
};
const serializeAws_json1_1CreateLabelingJobRequest = (input, context) => {
    return {
        ...(input.HumanTaskConfig !== undefined &&
            input.HumanTaskConfig !== null && {
            HumanTaskConfig: serializeAws_json1_1HumanTaskConfig(input.HumanTaskConfig, context),
        }),
        ...(input.InputConfig !== undefined &&
            input.InputConfig !== null && {
            InputConfig: serializeAws_json1_1LabelingJobInputConfig(input.InputConfig, context),
        }),
        ...(input.LabelAttributeName !== undefined &&
            input.LabelAttributeName !== null && { LabelAttributeName: input.LabelAttributeName }),
        ...(input.LabelCategoryConfigS3Uri !== undefined &&
            input.LabelCategoryConfigS3Uri !== null && { LabelCategoryConfigS3Uri: input.LabelCategoryConfigS3Uri }),
        ...(input.LabelingJobAlgorithmsConfig !== undefined &&
            input.LabelingJobAlgorithmsConfig !== null && {
            LabelingJobAlgorithmsConfig: serializeAws_json1_1LabelingJobAlgorithmsConfig(input.LabelingJobAlgorithmsConfig, context),
        }),
        ...(input.LabelingJobName !== undefined &&
            input.LabelingJobName !== null && { LabelingJobName: input.LabelingJobName }),
        ...(input.OutputConfig !== undefined &&
            input.OutputConfig !== null && {
            OutputConfig: serializeAws_json1_1LabelingJobOutputConfig(input.OutputConfig, context),
        }),
        ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
        ...(input.StoppingConditions !== undefined &&
            input.StoppingConditions !== null && {
            StoppingConditions: serializeAws_json1_1LabelingJobStoppingConditions(input.StoppingConditions, context),
        }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateModelBiasJobDefinitionRequest = (input, context) => {
    return {
        ...(input.JobDefinitionName !== undefined &&
            input.JobDefinitionName !== null && { JobDefinitionName: input.JobDefinitionName }),
        ...(input.JobResources !== undefined &&
            input.JobResources !== null && {
            JobResources: serializeAws_json1_1MonitoringResources(input.JobResources, context),
        }),
        ...(input.ModelBiasAppSpecification !== undefined &&
            input.ModelBiasAppSpecification !== null && {
            ModelBiasAppSpecification: serializeAws_json1_1ModelBiasAppSpecification(input.ModelBiasAppSpecification, context),
        }),
        ...(input.ModelBiasBaselineConfig !== undefined &&
            input.ModelBiasBaselineConfig !== null && {
            ModelBiasBaselineConfig: serializeAws_json1_1ModelBiasBaselineConfig(input.ModelBiasBaselineConfig, context),
        }),
        ...(input.ModelBiasJobInput !== undefined &&
            input.ModelBiasJobInput !== null && {
            ModelBiasJobInput: serializeAws_json1_1ModelBiasJobInput(input.ModelBiasJobInput, context),
        }),
        ...(input.ModelBiasJobOutputConfig !== undefined &&
            input.ModelBiasJobOutputConfig !== null && {
            ModelBiasJobOutputConfig: serializeAws_json1_1MonitoringOutputConfig(input.ModelBiasJobOutputConfig, context),
        }),
        ...(input.NetworkConfig !== undefined &&
            input.NetworkConfig !== null && {
            NetworkConfig: serializeAws_json1_1MonitoringNetworkConfig(input.NetworkConfig, context),
        }),
        ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
        ...(input.StoppingCondition !== undefined &&
            input.StoppingCondition !== null && {
            StoppingCondition: serializeAws_json1_1MonitoringStoppingCondition(input.StoppingCondition, context),
        }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateModelExplainabilityJobDefinitionRequest = (input, context) => {
    return {
        ...(input.JobDefinitionName !== undefined &&
            input.JobDefinitionName !== null && { JobDefinitionName: input.JobDefinitionName }),
        ...(input.JobResources !== undefined &&
            input.JobResources !== null && {
            JobResources: serializeAws_json1_1MonitoringResources(input.JobResources, context),
        }),
        ...(input.ModelExplainabilityAppSpecification !== undefined &&
            input.ModelExplainabilityAppSpecification !== null && {
            ModelExplainabilityAppSpecification: serializeAws_json1_1ModelExplainabilityAppSpecification(input.ModelExplainabilityAppSpecification, context),
        }),
        ...(input.ModelExplainabilityBaselineConfig !== undefined &&
            input.ModelExplainabilityBaselineConfig !== null && {
            ModelExplainabilityBaselineConfig: serializeAws_json1_1ModelExplainabilityBaselineConfig(input.ModelExplainabilityBaselineConfig, context),
        }),
        ...(input.ModelExplainabilityJobInput !== undefined &&
            input.ModelExplainabilityJobInput !== null && {
            ModelExplainabilityJobInput: serializeAws_json1_1ModelExplainabilityJobInput(input.ModelExplainabilityJobInput, context),
        }),
        ...(input.ModelExplainabilityJobOutputConfig !== undefined &&
            input.ModelExplainabilityJobOutputConfig !== null && {
            ModelExplainabilityJobOutputConfig: serializeAws_json1_1MonitoringOutputConfig(input.ModelExplainabilityJobOutputConfig, context),
        }),
        ...(input.NetworkConfig !== undefined &&
            input.NetworkConfig !== null && {
            NetworkConfig: serializeAws_json1_1MonitoringNetworkConfig(input.NetworkConfig, context),
        }),
        ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
        ...(input.StoppingCondition !== undefined &&
            input.StoppingCondition !== null && {
            StoppingCondition: serializeAws_json1_1MonitoringStoppingCondition(input.StoppingCondition, context),
        }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateModelInput = (input, context) => {
    return {
        ...(input.Containers !== undefined &&
            input.Containers !== null && {
            Containers: serializeAws_json1_1ContainerDefinitionList(input.Containers, context),
        }),
        ...(input.EnableNetworkIsolation !== undefined &&
            input.EnableNetworkIsolation !== null && { EnableNetworkIsolation: input.EnableNetworkIsolation }),
        ...(input.ExecutionRoleArn !== undefined &&
            input.ExecutionRoleArn !== null && { ExecutionRoleArn: input.ExecutionRoleArn }),
        ...(input.InferenceExecutionConfig !== undefined &&
            input.InferenceExecutionConfig !== null && {
            InferenceExecutionConfig: serializeAws_json1_1InferenceExecutionConfig(input.InferenceExecutionConfig, context),
        }),
        ...(input.ModelName !== undefined && input.ModelName !== null && { ModelName: input.ModelName }),
        ...(input.PrimaryContainer !== undefined &&
            input.PrimaryContainer !== null && {
            PrimaryContainer: serializeAws_json1_1ContainerDefinition(input.PrimaryContainer, context),
        }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
        ...(input.VpcConfig !== undefined &&
            input.VpcConfig !== null && { VpcConfig: serializeAws_json1_1VpcConfig(input.VpcConfig, context) }),
    };
};
const serializeAws_json1_1CreateModelPackageGroupInput = (input, context) => {
    return {
        ...(input.ModelPackageGroupDescription !== undefined &&
            input.ModelPackageGroupDescription !== null && {
            ModelPackageGroupDescription: input.ModelPackageGroupDescription,
        }),
        ...(input.ModelPackageGroupName !== undefined &&
            input.ModelPackageGroupName !== null && { ModelPackageGroupName: input.ModelPackageGroupName }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateModelPackageInput = (input, context) => {
    var _a;
    return {
        ...(input.CertifyForMarketplace !== undefined &&
            input.CertifyForMarketplace !== null && { CertifyForMarketplace: input.CertifyForMarketplace }),
        ClientToken: (_a = input.ClientToken) !== null && _a !== void 0 ? _a : uuid_1.v4(),
        ...(input.InferenceSpecification !== undefined &&
            input.InferenceSpecification !== null && {
            InferenceSpecification: serializeAws_json1_1InferenceSpecification(input.InferenceSpecification, context),
        }),
        ...(input.MetadataProperties !== undefined &&
            input.MetadataProperties !== null && {
            MetadataProperties: serializeAws_json1_1MetadataProperties(input.MetadataProperties, context),
        }),
        ...(input.ModelApprovalStatus !== undefined &&
            input.ModelApprovalStatus !== null && { ModelApprovalStatus: input.ModelApprovalStatus }),
        ...(input.ModelMetrics !== undefined &&
            input.ModelMetrics !== null && { ModelMetrics: serializeAws_json1_1ModelMetrics(input.ModelMetrics, context) }),
        ...(input.ModelPackageDescription !== undefined &&
            input.ModelPackageDescription !== null && { ModelPackageDescription: input.ModelPackageDescription }),
        ...(input.ModelPackageGroupName !== undefined &&
            input.ModelPackageGroupName !== null && { ModelPackageGroupName: input.ModelPackageGroupName }),
        ...(input.ModelPackageName !== undefined &&
            input.ModelPackageName !== null && { ModelPackageName: input.ModelPackageName }),
        ...(input.SourceAlgorithmSpecification !== undefined &&
            input.SourceAlgorithmSpecification !== null && {
            SourceAlgorithmSpecification: serializeAws_json1_1SourceAlgorithmSpecification(input.SourceAlgorithmSpecification, context),
        }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
        ...(input.ValidationSpecification !== undefined &&
            input.ValidationSpecification !== null && {
            ValidationSpecification: serializeAws_json1_1ModelPackageValidationSpecification(input.ValidationSpecification, context),
        }),
    };
};
const serializeAws_json1_1CreateModelQualityJobDefinitionRequest = (input, context) => {
    return {
        ...(input.JobDefinitionName !== undefined &&
            input.JobDefinitionName !== null && { JobDefinitionName: input.JobDefinitionName }),
        ...(input.JobResources !== undefined &&
            input.JobResources !== null && {
            JobResources: serializeAws_json1_1MonitoringResources(input.JobResources, context),
        }),
        ...(input.ModelQualityAppSpecification !== undefined &&
            input.ModelQualityAppSpecification !== null && {
            ModelQualityAppSpecification: serializeAws_json1_1ModelQualityAppSpecification(input.ModelQualityAppSpecification, context),
        }),
        ...(input.ModelQualityBaselineConfig !== undefined &&
            input.ModelQualityBaselineConfig !== null && {
            ModelQualityBaselineConfig: serializeAws_json1_1ModelQualityBaselineConfig(input.ModelQualityBaselineConfig, context),
        }),
        ...(input.ModelQualityJobInput !== undefined &&
            input.ModelQualityJobInput !== null && {
            ModelQualityJobInput: serializeAws_json1_1ModelQualityJobInput(input.ModelQualityJobInput, context),
        }),
        ...(input.ModelQualityJobOutputConfig !== undefined &&
            input.ModelQualityJobOutputConfig !== null && {
            ModelQualityJobOutputConfig: serializeAws_json1_1MonitoringOutputConfig(input.ModelQualityJobOutputConfig, context),
        }),
        ...(input.NetworkConfig !== undefined &&
            input.NetworkConfig !== null && {
            NetworkConfig: serializeAws_json1_1MonitoringNetworkConfig(input.NetworkConfig, context),
        }),
        ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
        ...(input.StoppingCondition !== undefined &&
            input.StoppingCondition !== null && {
            StoppingCondition: serializeAws_json1_1MonitoringStoppingCondition(input.StoppingCondition, context),
        }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateMonitoringScheduleRequest = (input, context) => {
    return {
        ...(input.MonitoringScheduleConfig !== undefined &&
            input.MonitoringScheduleConfig !== null && {
            MonitoringScheduleConfig: serializeAws_json1_1MonitoringScheduleConfig(input.MonitoringScheduleConfig, context),
        }),
        ...(input.MonitoringScheduleName !== undefined &&
            input.MonitoringScheduleName !== null && { MonitoringScheduleName: input.MonitoringScheduleName }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateNotebookInstanceInput = (input, context) => {
    return {
        ...(input.AcceleratorTypes !== undefined &&
            input.AcceleratorTypes !== null && {
            AcceleratorTypes: serializeAws_json1_1NotebookInstanceAcceleratorTypes(input.AcceleratorTypes, context),
        }),
        ...(input.AdditionalCodeRepositories !== undefined &&
            input.AdditionalCodeRepositories !== null && {
            AdditionalCodeRepositories: serializeAws_json1_1AdditionalCodeRepositoryNamesOrUrls(input.AdditionalCodeRepositories, context),
        }),
        ...(input.DefaultCodeRepository !== undefined &&
            input.DefaultCodeRepository !== null && { DefaultCodeRepository: input.DefaultCodeRepository }),
        ...(input.DirectInternetAccess !== undefined &&
            input.DirectInternetAccess !== null && { DirectInternetAccess: input.DirectInternetAccess }),
        ...(input.InstanceType !== undefined && input.InstanceType !== null && { InstanceType: input.InstanceType }),
        ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
        ...(input.LifecycleConfigName !== undefined &&
            input.LifecycleConfigName !== null && { LifecycleConfigName: input.LifecycleConfigName }),
        ...(input.NotebookInstanceName !== undefined &&
            input.NotebookInstanceName !== null && { NotebookInstanceName: input.NotebookInstanceName }),
        ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
        ...(input.RootAccess !== undefined && input.RootAccess !== null && { RootAccess: input.RootAccess }),
        ...(input.SecurityGroupIds !== undefined &&
            input.SecurityGroupIds !== null && {
            SecurityGroupIds: serializeAws_json1_1SecurityGroupIds(input.SecurityGroupIds, context),
        }),
        ...(input.SubnetId !== undefined && input.SubnetId !== null && { SubnetId: input.SubnetId }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
        ...(input.VolumeSizeInGB !== undefined &&
            input.VolumeSizeInGB !== null && { VolumeSizeInGB: input.VolumeSizeInGB }),
    };
};
const serializeAws_json1_1CreateNotebookInstanceLifecycleConfigInput = (input, context) => {
    return {
        ...(input.NotebookInstanceLifecycleConfigName !== undefined &&
            input.NotebookInstanceLifecycleConfigName !== null && {
            NotebookInstanceLifecycleConfigName: input.NotebookInstanceLifecycleConfigName,
        }),
        ...(input.OnCreate !== undefined &&
            input.OnCreate !== null && {
            OnCreate: serializeAws_json1_1NotebookInstanceLifecycleConfigList(input.OnCreate, context),
        }),
        ...(input.OnStart !== undefined &&
            input.OnStart !== null && {
            OnStart: serializeAws_json1_1NotebookInstanceLifecycleConfigList(input.OnStart, context),
        }),
    };
};
const serializeAws_json1_1CreatePipelineRequest = (input, context) => {
    var _a;
    return {
        ClientRequestToken: (_a = input.ClientRequestToken) !== null && _a !== void 0 ? _a : uuid_1.v4(),
        ...(input.PipelineDefinition !== undefined &&
            input.PipelineDefinition !== null && { PipelineDefinition: input.PipelineDefinition }),
        ...(input.PipelineDescription !== undefined &&
            input.PipelineDescription !== null && { PipelineDescription: input.PipelineDescription }),
        ...(input.PipelineDisplayName !== undefined &&
            input.PipelineDisplayName !== null && { PipelineDisplayName: input.PipelineDisplayName }),
        ...(input.PipelineName !== undefined && input.PipelineName !== null && { PipelineName: input.PipelineName }),
        ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreatePresignedDomainUrlRequest = (input, context) => {
    return {
        ...(input.DomainId !== undefined && input.DomainId !== null && { DomainId: input.DomainId }),
        ...(input.ExpiresInSeconds !== undefined &&
            input.ExpiresInSeconds !== null && { ExpiresInSeconds: input.ExpiresInSeconds }),
        ...(input.SessionExpirationDurationInSeconds !== undefined &&
            input.SessionExpirationDurationInSeconds !== null && {
            SessionExpirationDurationInSeconds: input.SessionExpirationDurationInSeconds,
        }),
        ...(input.UserProfileName !== undefined &&
            input.UserProfileName !== null && { UserProfileName: input.UserProfileName }),
    };
};
const serializeAws_json1_1CreatePresignedNotebookInstanceUrlInput = (input, context) => {
    return {
        ...(input.NotebookInstanceName !== undefined &&
            input.NotebookInstanceName !== null && { NotebookInstanceName: input.NotebookInstanceName }),
        ...(input.SessionExpirationDurationInSeconds !== undefined &&
            input.SessionExpirationDurationInSeconds !== null && {
            SessionExpirationDurationInSeconds: input.SessionExpirationDurationInSeconds,
        }),
    };
};
const serializeAws_json1_1CreateProcessingJobRequest = (input, context) => {
    return {
        ...(input.AppSpecification !== undefined &&
            input.AppSpecification !== null && {
            AppSpecification: serializeAws_json1_1AppSpecification(input.AppSpecification, context),
        }),
        ...(input.Environment !== undefined &&
            input.Environment !== null && {
            Environment: serializeAws_json1_1ProcessingEnvironmentMap(input.Environment, context),
        }),
        ...(input.ExperimentConfig !== undefined &&
            input.ExperimentConfig !== null && {
            ExperimentConfig: serializeAws_json1_1ExperimentConfig(input.ExperimentConfig, context),
        }),
        ...(input.NetworkConfig !== undefined &&
            input.NetworkConfig !== null && {
            NetworkConfig: serializeAws_json1_1NetworkConfig(input.NetworkConfig, context),
        }),
        ...(input.ProcessingInputs !== undefined &&
            input.ProcessingInputs !== null && {
            ProcessingInputs: serializeAws_json1_1ProcessingInputs(input.ProcessingInputs, context),
        }),
        ...(input.ProcessingJobName !== undefined &&
            input.ProcessingJobName !== null && { ProcessingJobName: input.ProcessingJobName }),
        ...(input.ProcessingOutputConfig !== undefined &&
            input.ProcessingOutputConfig !== null && {
            ProcessingOutputConfig: serializeAws_json1_1ProcessingOutputConfig(input.ProcessingOutputConfig, context),
        }),
        ...(input.ProcessingResources !== undefined &&
            input.ProcessingResources !== null && {
            ProcessingResources: serializeAws_json1_1ProcessingResources(input.ProcessingResources, context),
        }),
        ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
        ...(input.StoppingCondition !== undefined &&
            input.StoppingCondition !== null && {
            StoppingCondition: serializeAws_json1_1ProcessingStoppingCondition(input.StoppingCondition, context),
        }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateProjectInput = (input, context) => {
    return {
        ...(input.ProjectDescription !== undefined &&
            input.ProjectDescription !== null && { ProjectDescription: input.ProjectDescription }),
        ...(input.ProjectName !== undefined && input.ProjectName !== null && { ProjectName: input.ProjectName }),
        ...(input.ServiceCatalogProvisioningDetails !== undefined &&
            input.ServiceCatalogProvisioningDetails !== null && {
            ServiceCatalogProvisioningDetails: serializeAws_json1_1ServiceCatalogProvisioningDetails(input.ServiceCatalogProvisioningDetails, context),
        }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateTrainingJobRequest = (input, context) => {
    return {
        ...(input.AlgorithmSpecification !== undefined &&
            input.AlgorithmSpecification !== null && {
            AlgorithmSpecification: serializeAws_json1_1AlgorithmSpecification(input.AlgorithmSpecification, context),
        }),
        ...(input.CheckpointConfig !== undefined &&
            input.CheckpointConfig !== null && {
            CheckpointConfig: serializeAws_json1_1CheckpointConfig(input.CheckpointConfig, context),
        }),
        ...(input.DebugHookConfig !== undefined &&
            input.DebugHookConfig !== null && {
            DebugHookConfig: serializeAws_json1_1DebugHookConfig(input.DebugHookConfig, context),
        }),
        ...(input.DebugRuleConfigurations !== undefined &&
            input.DebugRuleConfigurations !== null && {
            DebugRuleConfigurations: serializeAws_json1_1DebugRuleConfigurations(input.DebugRuleConfigurations, context),
        }),
        ...(input.EnableInterContainerTrafficEncryption !== undefined &&
            input.EnableInterContainerTrafficEncryption !== null && {
            EnableInterContainerTrafficEncryption: input.EnableInterContainerTrafficEncryption,
        }),
        ...(input.EnableManagedSpotTraining !== undefined &&
            input.EnableManagedSpotTraining !== null && { EnableManagedSpotTraining: input.EnableManagedSpotTraining }),
        ...(input.EnableNetworkIsolation !== undefined &&
            input.EnableNetworkIsolation !== null && { EnableNetworkIsolation: input.EnableNetworkIsolation }),
        ...(input.Environment !== undefined &&
            input.Environment !== null && {
            Environment: serializeAws_json1_1TrainingEnvironmentMap(input.Environment, context),
        }),
        ...(input.ExperimentConfig !== undefined &&
            input.ExperimentConfig !== null && {
            ExperimentConfig: serializeAws_json1_1ExperimentConfig(input.ExperimentConfig, context),
        }),
        ...(input.HyperParameters !== undefined &&
            input.HyperParameters !== null && {
            HyperParameters: serializeAws_json1_1HyperParameters(input.HyperParameters, context),
        }),
        ...(input.InputDataConfig !== undefined &&
            input.InputDataConfig !== null && {
            InputDataConfig: serializeAws_json1_1InputDataConfig(input.InputDataConfig, context),
        }),
        ...(input.OutputDataConfig !== undefined &&
            input.OutputDataConfig !== null && {
            OutputDataConfig: serializeAws_json1_1OutputDataConfig(input.OutputDataConfig, context),
        }),
        ...(input.ProfilerConfig !== undefined &&
            input.ProfilerConfig !== null && {
            ProfilerConfig: serializeAws_json1_1ProfilerConfig(input.ProfilerConfig, context),
        }),
        ...(input.ProfilerRuleConfigurations !== undefined &&
            input.ProfilerRuleConfigurations !== null && {
            ProfilerRuleConfigurations: serializeAws_json1_1ProfilerRuleConfigurations(input.ProfilerRuleConfigurations, context),
        }),
        ...(input.ResourceConfig !== undefined &&
            input.ResourceConfig !== null && {
            ResourceConfig: serializeAws_json1_1ResourceConfig(input.ResourceConfig, context),
        }),
        ...(input.RetryStrategy !== undefined &&
            input.RetryStrategy !== null && {
            RetryStrategy: serializeAws_json1_1RetryStrategy(input.RetryStrategy, context),
        }),
        ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
        ...(input.StoppingCondition !== undefined &&
            input.StoppingCondition !== null && {
            StoppingCondition: serializeAws_json1_1StoppingCondition(input.StoppingCondition, context),
        }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
        ...(input.TensorBoardOutputConfig !== undefined &&
            input.TensorBoardOutputConfig !== null && {
            TensorBoardOutputConfig: serializeAws_json1_1TensorBoardOutputConfig(input.TensorBoardOutputConfig, context),
        }),
        ...(input.TrainingJobName !== undefined &&
            input.TrainingJobName !== null && { TrainingJobName: input.TrainingJobName }),
        ...(input.VpcConfig !== undefined &&
            input.VpcConfig !== null && { VpcConfig: serializeAws_json1_1VpcConfig(input.VpcConfig, context) }),
    };
};
const serializeAws_json1_1CreateTransformJobRequest = (input, context) => {
    return {
        ...(input.BatchStrategy !== undefined && input.BatchStrategy !== null && { BatchStrategy: input.BatchStrategy }),
        ...(input.DataProcessing !== undefined &&
            input.DataProcessing !== null && {
            DataProcessing: serializeAws_json1_1DataProcessing(input.DataProcessing, context),
        }),
        ...(input.Environment !== undefined &&
            input.Environment !== null && {
            Environment: serializeAws_json1_1TransformEnvironmentMap(input.Environment, context),
        }),
        ...(input.ExperimentConfig !== undefined &&
            input.ExperimentConfig !== null && {
            ExperimentConfig: serializeAws_json1_1ExperimentConfig(input.ExperimentConfig, context),
        }),
        ...(input.MaxConcurrentTransforms !== undefined &&
            input.MaxConcurrentTransforms !== null && { MaxConcurrentTransforms: input.MaxConcurrentTransforms }),
        ...(input.MaxPayloadInMB !== undefined &&
            input.MaxPayloadInMB !== null && { MaxPayloadInMB: input.MaxPayloadInMB }),
        ...(input.ModelClientConfig !== undefined &&
            input.ModelClientConfig !== null && {
            ModelClientConfig: serializeAws_json1_1ModelClientConfig(input.ModelClientConfig, context),
        }),
        ...(input.ModelName !== undefined && input.ModelName !== null && { ModelName: input.ModelName }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
        ...(input.TransformInput !== undefined &&
            input.TransformInput !== null && {
            TransformInput: serializeAws_json1_1TransformInput(input.TransformInput, context),
        }),
        ...(input.TransformJobName !== undefined &&
            input.TransformJobName !== null && { TransformJobName: input.TransformJobName }),
        ...(input.TransformOutput !== undefined &&
            input.TransformOutput !== null && {
            TransformOutput: serializeAws_json1_1TransformOutput(input.TransformOutput, context),
        }),
        ...(input.TransformResources !== undefined &&
            input.TransformResources !== null && {
            TransformResources: serializeAws_json1_1TransformResources(input.TransformResources, context),
        }),
    };
};
const serializeAws_json1_1CreateTrialComponentRequest = (input, context) => {
    return {
        ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
        ...(input.EndTime !== undefined &&
            input.EndTime !== null && { EndTime: Math.round(input.EndTime.getTime() / 1000) }),
        ...(input.InputArtifacts !== undefined &&
            input.InputArtifacts !== null && {
            InputArtifacts: serializeAws_json1_1TrialComponentArtifacts(input.InputArtifacts, context),
        }),
        ...(input.MetadataProperties !== undefined &&
            input.MetadataProperties !== null && {
            MetadataProperties: serializeAws_json1_1MetadataProperties(input.MetadataProperties, context),
        }),
        ...(input.OutputArtifacts !== undefined &&
            input.OutputArtifacts !== null && {
            OutputArtifacts: serializeAws_json1_1TrialComponentArtifacts(input.OutputArtifacts, context),
        }),
        ...(input.Parameters !== undefined &&
            input.Parameters !== null && {
            Parameters: serializeAws_json1_1TrialComponentParameters(input.Parameters, context),
        }),
        ...(input.StartTime !== undefined &&
            input.StartTime !== null && { StartTime: Math.round(input.StartTime.getTime() / 1000) }),
        ...(input.Status !== undefined &&
            input.Status !== null && { Status: serializeAws_json1_1TrialComponentStatus(input.Status, context) }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
        ...(input.TrialComponentName !== undefined &&
            input.TrialComponentName !== null && { TrialComponentName: input.TrialComponentName }),
    };
};
const serializeAws_json1_1CreateTrialRequest = (input, context) => {
    return {
        ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
        ...(input.ExperimentName !== undefined &&
            input.ExperimentName !== null && { ExperimentName: input.ExperimentName }),
        ...(input.MetadataProperties !== undefined &&
            input.MetadataProperties !== null && {
            MetadataProperties: serializeAws_json1_1MetadataProperties(input.MetadataProperties, context),
        }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
        ...(input.TrialName !== undefined && input.TrialName !== null && { TrialName: input.TrialName }),
    };
};
const serializeAws_json1_1CreateUserProfileRequest = (input, context) => {
    return {
        ...(input.DomainId !== undefined && input.DomainId !== null && { DomainId: input.DomainId }),
        ...(input.SingleSignOnUserIdentifier !== undefined &&
            input.SingleSignOnUserIdentifier !== null && { SingleSignOnUserIdentifier: input.SingleSignOnUserIdentifier }),
        ...(input.SingleSignOnUserValue !== undefined &&
            input.SingleSignOnUserValue !== null && { SingleSignOnUserValue: input.SingleSignOnUserValue }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
        ...(input.UserProfileName !== undefined &&
            input.UserProfileName !== null && { UserProfileName: input.UserProfileName }),
        ...(input.UserSettings !== undefined &&
            input.UserSettings !== null && { UserSettings: serializeAws_json1_1UserSettings(input.UserSettings, context) }),
    };
};
const serializeAws_json1_1CreateWorkforceRequest = (input, context) => {
    return {
        ...(input.CognitoConfig !== undefined &&
            input.CognitoConfig !== null && {
            CognitoConfig: serializeAws_json1_1CognitoConfig(input.CognitoConfig, context),
        }),
        ...(input.OidcConfig !== undefined &&
            input.OidcConfig !== null && { OidcConfig: serializeAws_json1_1OidcConfig(input.OidcConfig, context) }),
        ...(input.SourceIpConfig !== undefined &&
            input.SourceIpConfig !== null && {
            SourceIpConfig: serializeAws_json1_1SourceIpConfig(input.SourceIpConfig, context),
        }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
        ...(input.WorkforceName !== undefined && input.WorkforceName !== null && { WorkforceName: input.WorkforceName }),
    };
};
const serializeAws_json1_1CreateWorkteamRequest = (input, context) => {
    return {
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.MemberDefinitions !== undefined &&
            input.MemberDefinitions !== null && {
            MemberDefinitions: serializeAws_json1_1MemberDefinitions(input.MemberDefinitions, context),
        }),
        ...(input.NotificationConfiguration !== undefined &&
            input.NotificationConfiguration !== null && {
            NotificationConfiguration: serializeAws_json1_1NotificationConfiguration(input.NotificationConfiguration, context),
        }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
        ...(input.WorkforceName !== undefined && input.WorkforceName !== null && { WorkforceName: input.WorkforceName }),
        ...(input.WorkteamName !== undefined && input.WorkteamName !== null && { WorkteamName: input.WorkteamName }),
    };
};
const serializeAws_json1_1CsvContentTypes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1CustomImage = (input, context) => {
    return {
        ...(input.AppImageConfigName !== undefined &&
            input.AppImageConfigName !== null && { AppImageConfigName: input.AppImageConfigName }),
        ...(input.ImageName !== undefined && input.ImageName !== null && { ImageName: input.ImageName }),
        ...(input.ImageVersionNumber !== undefined &&
            input.ImageVersionNumber !== null && { ImageVersionNumber: input.ImageVersionNumber }),
    };
};
const serializeAws_json1_1CustomImages = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1CustomImage(entry, context);
    });
};
const serializeAws_json1_1DataCaptureConfig = (input, context) => {
    return {
        ...(input.CaptureContentTypeHeader !== undefined &&
            input.CaptureContentTypeHeader !== null && {
            CaptureContentTypeHeader: serializeAws_json1_1CaptureContentTypeHeader(input.CaptureContentTypeHeader, context),
        }),
        ...(input.CaptureOptions !== undefined &&
            input.CaptureOptions !== null && {
            CaptureOptions: serializeAws_json1_1CaptureOptionList(input.CaptureOptions, context),
        }),
        ...(input.DestinationS3Uri !== undefined &&
            input.DestinationS3Uri !== null && { DestinationS3Uri: input.DestinationS3Uri }),
        ...(input.EnableCapture !== undefined && input.EnableCapture !== null && { EnableCapture: input.EnableCapture }),
        ...(input.InitialSamplingPercentage !== undefined &&
            input.InitialSamplingPercentage !== null && { InitialSamplingPercentage: input.InitialSamplingPercentage }),
        ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
    };
};
const serializeAws_json1_1DataCatalogConfig = (input, context) => {
    return {
        ...(input.Catalog !== undefined && input.Catalog !== null && { Catalog: input.Catalog }),
        ...(input.Database !== undefined && input.Database !== null && { Database: input.Database }),
        ...(input.TableName !== undefined && input.TableName !== null && { TableName: input.TableName }),
    };
};
const serializeAws_json1_1DataProcessing = (input, context) => {
    return {
        ...(input.InputFilter !== undefined && input.InputFilter !== null && { InputFilter: input.InputFilter }),
        ...(input.JoinSource !== undefined && input.JoinSource !== null && { JoinSource: input.JoinSource }),
        ...(input.OutputFilter !== undefined && input.OutputFilter !== null && { OutputFilter: input.OutputFilter }),
    };
};
const serializeAws_json1_1DataQualityAppSpecification = (input, context) => {
    return {
        ...(input.ContainerArguments !== undefined &&
            input.ContainerArguments !== null && {
            ContainerArguments: serializeAws_json1_1MonitoringContainerArguments(input.ContainerArguments, context),
        }),
        ...(input.ContainerEntrypoint !== undefined &&
            input.ContainerEntrypoint !== null && {
            ContainerEntrypoint: serializeAws_json1_1ContainerEntrypoint(input.ContainerEntrypoint, context),
        }),
        ...(input.Environment !== undefined &&
            input.Environment !== null && {
            Environment: serializeAws_json1_1MonitoringEnvironmentMap(input.Environment, context),
        }),
        ...(input.ImageUri !== undefined && input.ImageUri !== null && { ImageUri: input.ImageUri }),
        ...(input.PostAnalyticsProcessorSourceUri !== undefined &&
            input.PostAnalyticsProcessorSourceUri !== null && {
            PostAnalyticsProcessorSourceUri: input.PostAnalyticsProcessorSourceUri,
        }),
        ...(input.RecordPreprocessorSourceUri !== undefined &&
            input.RecordPreprocessorSourceUri !== null && { RecordPreprocessorSourceUri: input.RecordPreprocessorSourceUri }),
    };
};
const serializeAws_json1_1DataQualityBaselineConfig = (input, context) => {
    return {
        ...(input.BaseliningJobName !== undefined &&
            input.BaseliningJobName !== null && { BaseliningJobName: input.BaseliningJobName }),
        ...(input.ConstraintsResource !== undefined &&
            input.ConstraintsResource !== null && {
            ConstraintsResource: serializeAws_json1_1MonitoringConstraintsResource(input.ConstraintsResource, context),
        }),
        ...(input.StatisticsResource !== undefined &&
            input.StatisticsResource !== null && {
            StatisticsResource: serializeAws_json1_1MonitoringStatisticsResource(input.StatisticsResource, context),
        }),
    };
};
const serializeAws_json1_1DataQualityJobInput = (input, context) => {
    return {
        ...(input.EndpointInput !== undefined &&
            input.EndpointInput !== null && {
            EndpointInput: serializeAws_json1_1EndpointInput(input.EndpointInput, context),
        }),
    };
};
const serializeAws_json1_1DatasetDefinition = (input, context) => {
    return {
        ...(input.AthenaDatasetDefinition !== undefined &&
            input.AthenaDatasetDefinition !== null && {
            AthenaDatasetDefinition: serializeAws_json1_1AthenaDatasetDefinition(input.AthenaDatasetDefinition, context),
        }),
        ...(input.DataDistributionType !== undefined &&
            input.DataDistributionType !== null && { DataDistributionType: input.DataDistributionType }),
        ...(input.InputMode !== undefined && input.InputMode !== null && { InputMode: input.InputMode }),
        ...(input.LocalPath !== undefined && input.LocalPath !== null && { LocalPath: input.LocalPath }),
        ...(input.RedshiftDatasetDefinition !== undefined &&
            input.RedshiftDatasetDefinition !== null && {
            RedshiftDatasetDefinition: serializeAws_json1_1RedshiftDatasetDefinition(input.RedshiftDatasetDefinition, context),
        }),
    };
};
const serializeAws_json1_1DataSource = (input, context) => {
    return {
        ...(input.FileSystemDataSource !== undefined &&
            input.FileSystemDataSource !== null && {
            FileSystemDataSource: serializeAws_json1_1FileSystemDataSource(input.FileSystemDataSource, context),
        }),
        ...(input.S3DataSource !== undefined &&
            input.S3DataSource !== null && { S3DataSource: serializeAws_json1_1S3DataSource(input.S3DataSource, context) }),
    };
};
const serializeAws_json1_1DebugHookConfig = (input, context) => {
    return {
        ...(input.CollectionConfigurations !== undefined &&
            input.CollectionConfigurations !== null && {
            CollectionConfigurations: serializeAws_json1_1CollectionConfigurations(input.CollectionConfigurations, context),
        }),
        ...(input.HookParameters !== undefined &&
            input.HookParameters !== null && {
            HookParameters: serializeAws_json1_1HookParameters(input.HookParameters, context),
        }),
        ...(input.LocalPath !== undefined && input.LocalPath !== null && { LocalPath: input.LocalPath }),
        ...(input.S3OutputPath !== undefined && input.S3OutputPath !== null && { S3OutputPath: input.S3OutputPath }),
    };
};
const serializeAws_json1_1DebugRuleConfiguration = (input, context) => {
    return {
        ...(input.InstanceType !== undefined && input.InstanceType !== null && { InstanceType: input.InstanceType }),
        ...(input.LocalPath !== undefined && input.LocalPath !== null && { LocalPath: input.LocalPath }),
        ...(input.RuleConfigurationName !== undefined &&
            input.RuleConfigurationName !== null && { RuleConfigurationName: input.RuleConfigurationName }),
        ...(input.RuleEvaluatorImage !== undefined &&
            input.RuleEvaluatorImage !== null && { RuleEvaluatorImage: input.RuleEvaluatorImage }),
        ...(input.RuleParameters !== undefined &&
            input.RuleParameters !== null && {
            RuleParameters: serializeAws_json1_1RuleParameters(input.RuleParameters, context),
        }),
        ...(input.S3OutputPath !== undefined && input.S3OutputPath !== null && { S3OutputPath: input.S3OutputPath }),
        ...(input.VolumeSizeInGB !== undefined &&
            input.VolumeSizeInGB !== null && { VolumeSizeInGB: input.VolumeSizeInGB }),
    };
};
const serializeAws_json1_1DebugRuleConfigurations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1DebugRuleConfiguration(entry, context);
    });
};
const serializeAws_json1_1DeleteActionRequest = (input, context) => {
    return {
        ...(input.ActionName !== undefined && input.ActionName !== null && { ActionName: input.ActionName }),
    };
};
const serializeAws_json1_1DeleteAlgorithmInput = (input, context) => {
    return {
        ...(input.AlgorithmName !== undefined && input.AlgorithmName !== null && { AlgorithmName: input.AlgorithmName }),
    };
};
const serializeAws_json1_1DeleteAppImageConfigRequest = (input, context) => {
    return {
        ...(input.AppImageConfigName !== undefined &&
            input.AppImageConfigName !== null && { AppImageConfigName: input.AppImageConfigName }),
    };
};
const serializeAws_json1_1DeleteAppRequest = (input, context) => {
    return {
        ...(input.AppName !== undefined && input.AppName !== null && { AppName: input.AppName }),
        ...(input.AppType !== undefined && input.AppType !== null && { AppType: input.AppType }),
        ...(input.DomainId !== undefined && input.DomainId !== null && { DomainId: input.DomainId }),
        ...(input.UserProfileName !== undefined &&
            input.UserProfileName !== null && { UserProfileName: input.UserProfileName }),
    };
};
const serializeAws_json1_1DeleteArtifactRequest = (input, context) => {
    return {
        ...(input.ArtifactArn !== undefined && input.ArtifactArn !== null && { ArtifactArn: input.ArtifactArn }),
        ...(input.Source !== undefined &&
            input.Source !== null && { Source: serializeAws_json1_1ArtifactSource(input.Source, context) }),
    };
};
const serializeAws_json1_1DeleteAssociationRequest = (input, context) => {
    return {
        ...(input.DestinationArn !== undefined &&
            input.DestinationArn !== null && { DestinationArn: input.DestinationArn }),
        ...(input.SourceArn !== undefined && input.SourceArn !== null && { SourceArn: input.SourceArn }),
    };
};
const serializeAws_json1_1DeleteCodeRepositoryInput = (input, context) => {
    return {
        ...(input.CodeRepositoryName !== undefined &&
            input.CodeRepositoryName !== null && { CodeRepositoryName: input.CodeRepositoryName }),
    };
};
const serializeAws_json1_1DeleteContextRequest = (input, context) => {
    return {
        ...(input.ContextName !== undefined && input.ContextName !== null && { ContextName: input.ContextName }),
    };
};
const serializeAws_json1_1DeleteDataQualityJobDefinitionRequest = (input, context) => {
    return {
        ...(input.JobDefinitionName !== undefined &&
            input.JobDefinitionName !== null && { JobDefinitionName: input.JobDefinitionName }),
    };
};
const serializeAws_json1_1DeleteDeviceFleetRequest = (input, context) => {
    return {
        ...(input.DeviceFleetName !== undefined &&
            input.DeviceFleetName !== null && { DeviceFleetName: input.DeviceFleetName }),
    };
};
const serializeAws_json1_1DeleteDomainRequest = (input, context) => {
    return {
        ...(input.DomainId !== undefined && input.DomainId !== null && { DomainId: input.DomainId }),
        ...(input.RetentionPolicy !== undefined &&
            input.RetentionPolicy !== null && {
            RetentionPolicy: serializeAws_json1_1RetentionPolicy(input.RetentionPolicy, context),
        }),
    };
};
const serializeAws_json1_1DeleteEndpointConfigInput = (input, context) => {
    return {
        ...(input.EndpointConfigName !== undefined &&
            input.EndpointConfigName !== null && { EndpointConfigName: input.EndpointConfigName }),
    };
};
const serializeAws_json1_1DeleteEndpointInput = (input, context) => {
    return {
        ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
    };
};
const serializeAws_json1_1DeleteExperimentRequest = (input, context) => {
    return {
        ...(input.ExperimentName !== undefined &&
            input.ExperimentName !== null && { ExperimentName: input.ExperimentName }),
    };
};
const serializeAws_json1_1DeleteFeatureGroupRequest = (input, context) => {
    return {
        ...(input.FeatureGroupName !== undefined &&
            input.FeatureGroupName !== null && { FeatureGroupName: input.FeatureGroupName }),
    };
};
const serializeAws_json1_1DeleteFlowDefinitionRequest = (input, context) => {
    return {
        ...(input.FlowDefinitionName !== undefined &&
            input.FlowDefinitionName !== null && { FlowDefinitionName: input.FlowDefinitionName }),
    };
};
const serializeAws_json1_1DeleteHumanTaskUiRequest = (input, context) => {
    return {
        ...(input.HumanTaskUiName !== undefined &&
            input.HumanTaskUiName !== null && { HumanTaskUiName: input.HumanTaskUiName }),
    };
};
const serializeAws_json1_1DeleteImageRequest = (input, context) => {
    return {
        ...(input.ImageName !== undefined && input.ImageName !== null && { ImageName: input.ImageName }),
    };
};
const serializeAws_json1_1DeleteImageVersionRequest = (input, context) => {
    return {
        ...(input.ImageName !== undefined && input.ImageName !== null && { ImageName: input.ImageName }),
        ...(input.Version !== undefined && input.Version !== null && { Version: input.Version }),
    };
};
const serializeAws_json1_1DeleteModelBiasJobDefinitionRequest = (input, context) => {
    return {
        ...(input.JobDefinitionName !== undefined &&
            input.JobDefinitionName !== null && { JobDefinitionName: input.JobDefinitionName }),
    };
};
const serializeAws_json1_1DeleteModelExplainabilityJobDefinitionRequest = (input, context) => {
    return {
        ...(input.JobDefinitionName !== undefined &&
            input.JobDefinitionName !== null && { JobDefinitionName: input.JobDefinitionName }),
    };
};
const serializeAws_json1_1DeleteModelInput = (input, context) => {
    return {
        ...(input.ModelName !== undefined && input.ModelName !== null && { ModelName: input.ModelName }),
    };
};
const serializeAws_json1_1DeleteModelPackageGroupInput = (input, context) => {
    return {
        ...(input.ModelPackageGroupName !== undefined &&
            input.ModelPackageGroupName !== null && { ModelPackageGroupName: input.ModelPackageGroupName }),
    };
};
const serializeAws_json1_1DeleteModelPackageGroupPolicyInput = (input, context) => {
    return {
        ...(input.ModelPackageGroupName !== undefined &&
            input.ModelPackageGroupName !== null && { ModelPackageGroupName: input.ModelPackageGroupName }),
    };
};
const serializeAws_json1_1DeleteModelPackageInput = (input, context) => {
    return {
        ...(input.ModelPackageName !== undefined &&
            input.ModelPackageName !== null && { ModelPackageName: input.ModelPackageName }),
    };
};
const serializeAws_json1_1DeleteModelQualityJobDefinitionRequest = (input, context) => {
    return {
        ...(input.JobDefinitionName !== undefined &&
            input.JobDefinitionName !== null && { JobDefinitionName: input.JobDefinitionName }),
    };
};
const serializeAws_json1_1DeleteMonitoringScheduleRequest = (input, context) => {
    return {
        ...(input.MonitoringScheduleName !== undefined &&
            input.MonitoringScheduleName !== null && { MonitoringScheduleName: input.MonitoringScheduleName }),
    };
};
const serializeAws_json1_1DeleteNotebookInstanceInput = (input, context) => {
    return {
        ...(input.NotebookInstanceName !== undefined &&
            input.NotebookInstanceName !== null && { NotebookInstanceName: input.NotebookInstanceName }),
    };
};
const serializeAws_json1_1DeleteNotebookInstanceLifecycleConfigInput = (input, context) => {
    return {
        ...(input.NotebookInstanceLifecycleConfigName !== undefined &&
            input.NotebookInstanceLifecycleConfigName !== null && {
            NotebookInstanceLifecycleConfigName: input.NotebookInstanceLifecycleConfigName,
        }),
    };
};
const serializeAws_json1_1DeletePipelineRequest = (input, context) => {
    var _a;
    return {
        ClientRequestToken: (_a = input.ClientRequestToken) !== null && _a !== void 0 ? _a : uuid_1.v4(),
        ...(input.PipelineName !== undefined && input.PipelineName !== null && { PipelineName: input.PipelineName }),
    };
};
const serializeAws_json1_1DeleteProjectInput = (input, context) => {
    return {
        ...(input.ProjectName !== undefined && input.ProjectName !== null && { ProjectName: input.ProjectName }),
    };
};
const serializeAws_json1_1DeleteTagsInput = (input, context) => {
    return {
        ...(input.ResourceArn !== undefined && input.ResourceArn !== null && { ResourceArn: input.ResourceArn }),
        ...(input.TagKeys !== undefined &&
            input.TagKeys !== null && { TagKeys: serializeAws_json1_1TagKeyList(input.TagKeys, context) }),
    };
};
const serializeAws_json1_1DeleteTrialComponentRequest = (input, context) => {
    return {
        ...(input.TrialComponentName !== undefined &&
            input.TrialComponentName !== null && { TrialComponentName: input.TrialComponentName }),
    };
};
const serializeAws_json1_1DeleteTrialRequest = (input, context) => {
    return {
        ...(input.TrialName !== undefined && input.TrialName !== null && { TrialName: input.TrialName }),
    };
};
const serializeAws_json1_1DeleteUserProfileRequest = (input, context) => {
    return {
        ...(input.DomainId !== undefined && input.DomainId !== null && { DomainId: input.DomainId }),
        ...(input.UserProfileName !== undefined &&
            input.UserProfileName !== null && { UserProfileName: input.UserProfileName }),
    };
};
const serializeAws_json1_1DeleteWorkforceRequest = (input, context) => {
    return {
        ...(input.WorkforceName !== undefined && input.WorkforceName !== null && { WorkforceName: input.WorkforceName }),
    };
};
const serializeAws_json1_1DeleteWorkteamRequest = (input, context) => {
    return {
        ...(input.WorkteamName !== undefined && input.WorkteamName !== null && { WorkteamName: input.WorkteamName }),
    };
};
const serializeAws_json1_1DeploymentConfig = (input, context) => {
    return {
        ...(input.AutoRollbackConfiguration !== undefined &&
            input.AutoRollbackConfiguration !== null && {
            AutoRollbackConfiguration: serializeAws_json1_1AutoRollbackConfig(input.AutoRollbackConfiguration, context),
        }),
        ...(input.BlueGreenUpdatePolicy !== undefined &&
            input.BlueGreenUpdatePolicy !== null && {
            BlueGreenUpdatePolicy: serializeAws_json1_1BlueGreenUpdatePolicy(input.BlueGreenUpdatePolicy, context),
        }),
    };
};
const serializeAws_json1_1DeregisterDevicesRequest = (input, context) => {
    return {
        ...(input.DeviceFleetName !== undefined &&
            input.DeviceFleetName !== null && { DeviceFleetName: input.DeviceFleetName }),
        ...(input.DeviceNames !== undefined &&
            input.DeviceNames !== null && { DeviceNames: serializeAws_json1_1DeviceNames(input.DeviceNames, context) }),
    };
};
const serializeAws_json1_1DescribeActionRequest = (input, context) => {
    return {
        ...(input.ActionName !== undefined && input.ActionName !== null && { ActionName: input.ActionName }),
    };
};
const serializeAws_json1_1DescribeAlgorithmInput = (input, context) => {
    return {
        ...(input.AlgorithmName !== undefined && input.AlgorithmName !== null && { AlgorithmName: input.AlgorithmName }),
    };
};
const serializeAws_json1_1DescribeAppImageConfigRequest = (input, context) => {
    return {
        ...(input.AppImageConfigName !== undefined &&
            input.AppImageConfigName !== null && { AppImageConfigName: input.AppImageConfigName }),
    };
};
const serializeAws_json1_1DescribeAppRequest = (input, context) => {
    return {
        ...(input.AppName !== undefined && input.AppName !== null && { AppName: input.AppName }),
        ...(input.AppType !== undefined && input.AppType !== null && { AppType: input.AppType }),
        ...(input.DomainId !== undefined && input.DomainId !== null && { DomainId: input.DomainId }),
        ...(input.UserProfileName !== undefined &&
            input.UserProfileName !== null && { UserProfileName: input.UserProfileName }),
    };
};
const serializeAws_json1_1DescribeArtifactRequest = (input, context) => {
    return {
        ...(input.ArtifactArn !== undefined && input.ArtifactArn !== null && { ArtifactArn: input.ArtifactArn }),
    };
};
const serializeAws_json1_1DescribeAutoMLJobRequest = (input, context) => {
    return {
        ...(input.AutoMLJobName !== undefined && input.AutoMLJobName !== null && { AutoMLJobName: input.AutoMLJobName }),
    };
};
const serializeAws_json1_1DescribeCodeRepositoryInput = (input, context) => {
    return {
        ...(input.CodeRepositoryName !== undefined &&
            input.CodeRepositoryName !== null && { CodeRepositoryName: input.CodeRepositoryName }),
    };
};
const serializeAws_json1_1DescribeCompilationJobRequest = (input, context) => {
    return {
        ...(input.CompilationJobName !== undefined &&
            input.CompilationJobName !== null && { CompilationJobName: input.CompilationJobName }),
    };
};
const serializeAws_json1_1DescribeContextRequest = (input, context) => {
    return {
        ...(input.ContextName !== undefined && input.ContextName !== null && { ContextName: input.ContextName }),
    };
};
const serializeAws_json1_1DescribeDataQualityJobDefinitionRequest = (input, context) => {
    return {
        ...(input.JobDefinitionName !== undefined &&
            input.JobDefinitionName !== null && { JobDefinitionName: input.JobDefinitionName }),
    };
};
const serializeAws_json1_1DescribeDeviceFleetRequest = (input, context) => {
    return {
        ...(input.DeviceFleetName !== undefined &&
            input.DeviceFleetName !== null && { DeviceFleetName: input.DeviceFleetName }),
    };
};
const serializeAws_json1_1DescribeDeviceRequest = (input, context) => {
    return {
        ...(input.DeviceFleetName !== undefined &&
            input.DeviceFleetName !== null && { DeviceFleetName: input.DeviceFleetName }),
        ...(input.DeviceName !== undefined && input.DeviceName !== null && { DeviceName: input.DeviceName }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeDomainRequest = (input, context) => {
    return {
        ...(input.DomainId !== undefined && input.DomainId !== null && { DomainId: input.DomainId }),
    };
};
const serializeAws_json1_1DescribeEdgePackagingJobRequest = (input, context) => {
    return {
        ...(input.EdgePackagingJobName !== undefined &&
            input.EdgePackagingJobName !== null && { EdgePackagingJobName: input.EdgePackagingJobName }),
    };
};
const serializeAws_json1_1DescribeEndpointConfigInput = (input, context) => {
    return {
        ...(input.EndpointConfigName !== undefined &&
            input.EndpointConfigName !== null && { EndpointConfigName: input.EndpointConfigName }),
    };
};
const serializeAws_json1_1DescribeEndpointInput = (input, context) => {
    return {
        ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
    };
};
const serializeAws_json1_1DescribeExperimentRequest = (input, context) => {
    return {
        ...(input.ExperimentName !== undefined &&
            input.ExperimentName !== null && { ExperimentName: input.ExperimentName }),
    };
};
const serializeAws_json1_1DescribeFeatureGroupRequest = (input, context) => {
    return {
        ...(input.FeatureGroupName !== undefined &&
            input.FeatureGroupName !== null && { FeatureGroupName: input.FeatureGroupName }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1DescribeFlowDefinitionRequest = (input, context) => {
    return {
        ...(input.FlowDefinitionName !== undefined &&
            input.FlowDefinitionName !== null && { FlowDefinitionName: input.FlowDefinitionName }),
    };
};
const serializeAws_json1_1DescribeHumanTaskUiRequest = (input, context) => {
    return {
        ...(input.HumanTaskUiName !== undefined &&
            input.HumanTaskUiName !== null && { HumanTaskUiName: input.HumanTaskUiName }),
    };
};
const serializeAws_json1_1DescribeHyperParameterTuningJobRequest = (input, context) => {
    return {
        ...(input.HyperParameterTuningJobName !== undefined &&
            input.HyperParameterTuningJobName !== null && { HyperParameterTuningJobName: input.HyperParameterTuningJobName }),
    };
};
const serializeAws_json1_1DescribeImageRequest = (input, context) => {
    return {
        ...(input.ImageName !== undefined && input.ImageName !== null && { ImageName: input.ImageName }),
    };
};
const serializeAws_json1_1DescribeImageVersionRequest = (input, context) => {
    return {
        ...(input.ImageName !== undefined && input.ImageName !== null && { ImageName: input.ImageName }),
        ...(input.Version !== undefined && input.Version !== null && { Version: input.Version }),
    };
};
const serializeAws_json1_1DescribeLabelingJobRequest = (input, context) => {
    return {
        ...(input.LabelingJobName !== undefined &&
            input.LabelingJobName !== null && { LabelingJobName: input.LabelingJobName }),
    };
};
const serializeAws_json1_1DescribeModelBiasJobDefinitionRequest = (input, context) => {
    return {
        ...(input.JobDefinitionName !== undefined &&
            input.JobDefinitionName !== null && { JobDefinitionName: input.JobDefinitionName }),
    };
};
const serializeAws_json1_1DescribeModelExplainabilityJobDefinitionRequest = (input, context) => {
    return {
        ...(input.JobDefinitionName !== undefined &&
            input.JobDefinitionName !== null && { JobDefinitionName: input.JobDefinitionName }),
    };
};
const serializeAws_json1_1DescribeModelInput = (input, context) => {
    return {
        ...(input.ModelName !== undefined && input.ModelName !== null && { ModelName: input.ModelName }),
    };
};
const serializeAws_json1_1DescribeModelPackageGroupInput = (input, context) => {
    return {
        ...(input.ModelPackageGroupName !== undefined &&
            input.ModelPackageGroupName !== null && { ModelPackageGroupName: input.ModelPackageGroupName }),
    };
};
const serializeAws_json1_1DescribeModelPackageInput = (input, context) => {
    return {
        ...(input.ModelPackageName !== undefined &&
            input.ModelPackageName !== null && { ModelPackageName: input.ModelPackageName }),
    };
};
const serializeAws_json1_1DescribeModelQualityJobDefinitionRequest = (input, context) => {
    return {
        ...(input.JobDefinitionName !== undefined &&
            input.JobDefinitionName !== null && { JobDefinitionName: input.JobDefinitionName }),
    };
};
const serializeAws_json1_1DescribeMonitoringScheduleRequest = (input, context) => {
    return {
        ...(input.MonitoringScheduleName !== undefined &&
            input.MonitoringScheduleName !== null && { MonitoringScheduleName: input.MonitoringScheduleName }),
    };
};
const serializeAws_json1_1DescribeNotebookInstanceInput = (input, context) => {
    return {
        ...(input.NotebookInstanceName !== undefined &&
            input.NotebookInstanceName !== null && { NotebookInstanceName: input.NotebookInstanceName }),
    };
};
const serializeAws_json1_1DescribeNotebookInstanceLifecycleConfigInput = (input, context) => {
    return {
        ...(input.NotebookInstanceLifecycleConfigName !== undefined &&
            input.NotebookInstanceLifecycleConfigName !== null && {
            NotebookInstanceLifecycleConfigName: input.NotebookInstanceLifecycleConfigName,
        }),
    };
};
const serializeAws_json1_1DescribePipelineDefinitionForExecutionRequest = (input, context) => {
    return {
        ...(input.PipelineExecutionArn !== undefined &&
            input.PipelineExecutionArn !== null && { PipelineExecutionArn: input.PipelineExecutionArn }),
    };
};
const serializeAws_json1_1DescribePipelineExecutionRequest = (input, context) => {
    return {
        ...(input.PipelineExecutionArn !== undefined &&
            input.PipelineExecutionArn !== null && { PipelineExecutionArn: input.PipelineExecutionArn }),
    };
};
const serializeAws_json1_1DescribePipelineRequest = (input, context) => {
    return {
        ...(input.PipelineName !== undefined && input.PipelineName !== null && { PipelineName: input.PipelineName }),
    };
};
const serializeAws_json1_1DescribeProcessingJobRequest = (input, context) => {
    return {
        ...(input.ProcessingJobName !== undefined &&
            input.ProcessingJobName !== null && { ProcessingJobName: input.ProcessingJobName }),
    };
};
const serializeAws_json1_1DescribeProjectInput = (input, context) => {
    return {
        ...(input.ProjectName !== undefined && input.ProjectName !== null && { ProjectName: input.ProjectName }),
    };
};
const serializeAws_json1_1DescribeSubscribedWorkteamRequest = (input, context) => {
    return {
        ...(input.WorkteamArn !== undefined && input.WorkteamArn !== null && { WorkteamArn: input.WorkteamArn }),
    };
};
const serializeAws_json1_1DescribeTrainingJobRequest = (input, context) => {
    return {
        ...(input.TrainingJobName !== undefined &&
            input.TrainingJobName !== null && { TrainingJobName: input.TrainingJobName }),
    };
};
const serializeAws_json1_1DescribeTransformJobRequest = (input, context) => {
    return {
        ...(input.TransformJobName !== undefined &&
            input.TransformJobName !== null && { TransformJobName: input.TransformJobName }),
    };
};
const serializeAws_json1_1DescribeTrialComponentRequest = (input, context) => {
    return {
        ...(input.TrialComponentName !== undefined &&
            input.TrialComponentName !== null && { TrialComponentName: input.TrialComponentName }),
    };
};
const serializeAws_json1_1DescribeTrialRequest = (input, context) => {
    return {
        ...(input.TrialName !== undefined && input.TrialName !== null && { TrialName: input.TrialName }),
    };
};
const serializeAws_json1_1DescribeUserProfileRequest = (input, context) => {
    return {
        ...(input.DomainId !== undefined && input.DomainId !== null && { DomainId: input.DomainId }),
        ...(input.UserProfileName !== undefined &&
            input.UserProfileName !== null && { UserProfileName: input.UserProfileName }),
    };
};
const serializeAws_json1_1DescribeWorkforceRequest = (input, context) => {
    return {
        ...(input.WorkforceName !== undefined && input.WorkforceName !== null && { WorkforceName: input.WorkforceName }),
    };
};
const serializeAws_json1_1DescribeWorkteamRequest = (input, context) => {
    return {
        ...(input.WorkteamName !== undefined && input.WorkteamName !== null && { WorkteamName: input.WorkteamName }),
    };
};
const serializeAws_json1_1DesiredWeightAndCapacity = (input, context) => {
    return {
        ...(input.DesiredInstanceCount !== undefined &&
            input.DesiredInstanceCount !== null && { DesiredInstanceCount: input.DesiredInstanceCount }),
        ...(input.DesiredWeight !== undefined && input.DesiredWeight !== null && { DesiredWeight: input.DesiredWeight }),
        ...(input.VariantName !== undefined && input.VariantName !== null && { VariantName: input.VariantName }),
    };
};
const serializeAws_json1_1DesiredWeightAndCapacityList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1DesiredWeightAndCapacity(entry, context);
    });
};
const serializeAws_json1_1Device = (input, context) => {
    return {
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.DeviceName !== undefined && input.DeviceName !== null && { DeviceName: input.DeviceName }),
        ...(input.IotThingName !== undefined && input.IotThingName !== null && { IotThingName: input.IotThingName }),
    };
};
const serializeAws_json1_1DeviceNames = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1Devices = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1Device(entry, context);
    });
};
const serializeAws_json1_1DisableSagemakerServicecatalogPortfolioInput = (input, context) => {
    return {};
};
const serializeAws_json1_1DisassociateTrialComponentRequest = (input, context) => {
    return {
        ...(input.TrialComponentName !== undefined &&
            input.TrialComponentName !== null && { TrialComponentName: input.TrialComponentName }),
        ...(input.TrialName !== undefined && input.TrialName !== null && { TrialName: input.TrialName }),
    };
};
const serializeAws_json1_1EdgeOutputConfig = (input, context) => {
    return {
        ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
        ...(input.S3OutputLocation !== undefined &&
            input.S3OutputLocation !== null && { S3OutputLocation: input.S3OutputLocation }),
    };
};
const serializeAws_json1_1EnableSagemakerServicecatalogPortfolioInput = (input, context) => {
    return {};
};
const serializeAws_json1_1EndpointInput = (input, context) => {
    return {
        ...(input.EndTimeOffset !== undefined && input.EndTimeOffset !== null && { EndTimeOffset: input.EndTimeOffset }),
        ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
        ...(input.FeaturesAttribute !== undefined &&
            input.FeaturesAttribute !== null && { FeaturesAttribute: input.FeaturesAttribute }),
        ...(input.InferenceAttribute !== undefined &&
            input.InferenceAttribute !== null && { InferenceAttribute: input.InferenceAttribute }),
        ...(input.LocalPath !== undefined && input.LocalPath !== null && { LocalPath: input.LocalPath }),
        ...(input.ProbabilityAttribute !== undefined &&
            input.ProbabilityAttribute !== null && { ProbabilityAttribute: input.ProbabilityAttribute }),
        ...(input.ProbabilityThresholdAttribute !== undefined &&
            input.ProbabilityThresholdAttribute !== null && {
            ProbabilityThresholdAttribute: input.ProbabilityThresholdAttribute,
        }),
        ...(input.S3DataDistributionType !== undefined &&
            input.S3DataDistributionType !== null && { S3DataDistributionType: input.S3DataDistributionType }),
        ...(input.S3InputMode !== undefined && input.S3InputMode !== null && { S3InputMode: input.S3InputMode }),
        ...(input.StartTimeOffset !== undefined &&
            input.StartTimeOffset !== null && { StartTimeOffset: input.StartTimeOffset }),
    };
};
const serializeAws_json1_1EnvironmentMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const serializeAws_json1_1ExperimentConfig = (input, context) => {
    return {
        ...(input.ExperimentName !== undefined &&
            input.ExperimentName !== null && { ExperimentName: input.ExperimentName }),
        ...(input.TrialComponentDisplayName !== undefined &&
            input.TrialComponentDisplayName !== null && { TrialComponentDisplayName: input.TrialComponentDisplayName }),
        ...(input.TrialName !== undefined && input.TrialName !== null && { TrialName: input.TrialName }),
    };
};
const serializeAws_json1_1Explainability = (input, context) => {
    return {
        ...(input.Report !== undefined &&
            input.Report !== null && { Report: serializeAws_json1_1MetricsSource(input.Report, context) }),
    };
};
const serializeAws_json1_1FeatureDefinition = (input, context) => {
    return {
        ...(input.FeatureName !== undefined && input.FeatureName !== null && { FeatureName: input.FeatureName }),
        ...(input.FeatureType !== undefined && input.FeatureType !== null && { FeatureType: input.FeatureType }),
    };
};
const serializeAws_json1_1FeatureDefinitions = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1FeatureDefinition(entry, context);
    });
};
const serializeAws_json1_1FileSystemConfig = (input, context) => {
    return {
        ...(input.DefaultGid !== undefined && input.DefaultGid !== null && { DefaultGid: input.DefaultGid }),
        ...(input.DefaultUid !== undefined && input.DefaultUid !== null && { DefaultUid: input.DefaultUid }),
        ...(input.MountPath !== undefined && input.MountPath !== null && { MountPath: input.MountPath }),
    };
};
const serializeAws_json1_1FileSystemDataSource = (input, context) => {
    return {
        ...(input.DirectoryPath !== undefined && input.DirectoryPath !== null && { DirectoryPath: input.DirectoryPath }),
        ...(input.FileSystemAccessMode !== undefined &&
            input.FileSystemAccessMode !== null && { FileSystemAccessMode: input.FileSystemAccessMode }),
        ...(input.FileSystemId !== undefined && input.FileSystemId !== null && { FileSystemId: input.FileSystemId }),
        ...(input.FileSystemType !== undefined &&
            input.FileSystemType !== null && { FileSystemType: input.FileSystemType }),
    };
};
const serializeAws_json1_1Filter = (input, context) => {
    return {
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
        ...(input.Operator !== undefined && input.Operator !== null && { Operator: input.Operator }),
        ...(input.Value !== undefined && input.Value !== null && { Value: input.Value }),
    };
};
const serializeAws_json1_1FilterList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1Filter(entry, context);
    });
};
const serializeAws_json1_1FlowDefinitionOutputConfig = (input, context) => {
    return {
        ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
        ...(input.S3OutputPath !== undefined && input.S3OutputPath !== null && { S3OutputPath: input.S3OutputPath }),
    };
};
const serializeAws_json1_1FlowDefinitionTaskKeywords = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1GetDeviceFleetReportRequest = (input, context) => {
    return {
        ...(input.DeviceFleetName !== undefined &&
            input.DeviceFleetName !== null && { DeviceFleetName: input.DeviceFleetName }),
    };
};
const serializeAws_json1_1GetModelPackageGroupPolicyInput = (input, context) => {
    return {
        ...(input.ModelPackageGroupName !== undefined &&
            input.ModelPackageGroupName !== null && { ModelPackageGroupName: input.ModelPackageGroupName }),
    };
};
const serializeAws_json1_1GetSagemakerServicecatalogPortfolioStatusInput = (input, context) => {
    return {};
};
const serializeAws_json1_1GetSearchSuggestionsRequest = (input, context) => {
    return {
        ...(input.Resource !== undefined && input.Resource !== null && { Resource: input.Resource }),
        ...(input.SuggestionQuery !== undefined &&
            input.SuggestionQuery !== null && {
            SuggestionQuery: serializeAws_json1_1SuggestionQuery(input.SuggestionQuery, context),
        }),
    };
};
const serializeAws_json1_1GitConfig = (input, context) => {
    return {
        ...(input.Branch !== undefined && input.Branch !== null && { Branch: input.Branch }),
        ...(input.RepositoryUrl !== undefined && input.RepositoryUrl !== null && { RepositoryUrl: input.RepositoryUrl }),
        ...(input.SecretArn !== undefined && input.SecretArn !== null && { SecretArn: input.SecretArn }),
    };
};
const serializeAws_json1_1GitConfigForUpdate = (input, context) => {
    return {
        ...(input.SecretArn !== undefined && input.SecretArn !== null && { SecretArn: input.SecretArn }),
    };
};
const serializeAws_json1_1Groups = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1HookParameters = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const serializeAws_json1_1HumanLoopActivationConditionsConfig = (input, context) => {
    return {
        ...(input.HumanLoopActivationConditions !== undefined &&
            input.HumanLoopActivationConditions !== null && {
            HumanLoopActivationConditions: smithy_client_1.LazyJsonString.fromObject(input.HumanLoopActivationConditions),
        }),
    };
};
const serializeAws_json1_1HumanLoopActivationConfig = (input, context) => {
    return {
        ...(input.HumanLoopActivationConditionsConfig !== undefined &&
            input.HumanLoopActivationConditionsConfig !== null && {
            HumanLoopActivationConditionsConfig: serializeAws_json1_1HumanLoopActivationConditionsConfig(input.HumanLoopActivationConditionsConfig, context),
        }),
    };
};
const serializeAws_json1_1HumanLoopConfig = (input, context) => {
    return {
        ...(input.HumanTaskUiArn !== undefined &&
            input.HumanTaskUiArn !== null && { HumanTaskUiArn: input.HumanTaskUiArn }),
        ...(input.PublicWorkforceTaskPrice !== undefined &&
            input.PublicWorkforceTaskPrice !== null && {
            PublicWorkforceTaskPrice: serializeAws_json1_1PublicWorkforceTaskPrice(input.PublicWorkforceTaskPrice, context),
        }),
        ...(input.TaskAvailabilityLifetimeInSeconds !== undefined &&
            input.TaskAvailabilityLifetimeInSeconds !== null && {
            TaskAvailabilityLifetimeInSeconds: input.TaskAvailabilityLifetimeInSeconds,
        }),
        ...(input.TaskCount !== undefined && input.TaskCount !== null && { TaskCount: input.TaskCount }),
        ...(input.TaskDescription !== undefined &&
            input.TaskDescription !== null && { TaskDescription: input.TaskDescription }),
        ...(input.TaskKeywords !== undefined &&
            input.TaskKeywords !== null && {
            TaskKeywords: serializeAws_json1_1FlowDefinitionTaskKeywords(input.TaskKeywords, context),
        }),
        ...(input.TaskTimeLimitInSeconds !== undefined &&
            input.TaskTimeLimitInSeconds !== null && { TaskTimeLimitInSeconds: input.TaskTimeLimitInSeconds }),
        ...(input.TaskTitle !== undefined && input.TaskTitle !== null && { TaskTitle: input.TaskTitle }),
        ...(input.WorkteamArn !== undefined && input.WorkteamArn !== null && { WorkteamArn: input.WorkteamArn }),
    };
};
const serializeAws_json1_1HumanLoopRequestSource = (input, context) => {
    return {
        ...(input.AwsManagedHumanLoopRequestSource !== undefined &&
            input.AwsManagedHumanLoopRequestSource !== null && {
            AwsManagedHumanLoopRequestSource: input.AwsManagedHumanLoopRequestSource,
        }),
    };
};
const serializeAws_json1_1HumanTaskConfig = (input, context) => {
    return {
        ...(input.AnnotationConsolidationConfig !== undefined &&
            input.AnnotationConsolidationConfig !== null && {
            AnnotationConsolidationConfig: serializeAws_json1_1AnnotationConsolidationConfig(input.AnnotationConsolidationConfig, context),
        }),
        ...(input.MaxConcurrentTaskCount !== undefined &&
            input.MaxConcurrentTaskCount !== null && { MaxConcurrentTaskCount: input.MaxConcurrentTaskCount }),
        ...(input.NumberOfHumanWorkersPerDataObject !== undefined &&
            input.NumberOfHumanWorkersPerDataObject !== null && {
            NumberOfHumanWorkersPerDataObject: input.NumberOfHumanWorkersPerDataObject,
        }),
        ...(input.PreHumanTaskLambdaArn !== undefined &&
            input.PreHumanTaskLambdaArn !== null && { PreHumanTaskLambdaArn: input.PreHumanTaskLambdaArn }),
        ...(input.PublicWorkforceTaskPrice !== undefined &&
            input.PublicWorkforceTaskPrice !== null && {
            PublicWorkforceTaskPrice: serializeAws_json1_1PublicWorkforceTaskPrice(input.PublicWorkforceTaskPrice, context),
        }),
        ...(input.TaskAvailabilityLifetimeInSeconds !== undefined &&
            input.TaskAvailabilityLifetimeInSeconds !== null && {
            TaskAvailabilityLifetimeInSeconds: input.TaskAvailabilityLifetimeInSeconds,
        }),
        ...(input.TaskDescription !== undefined &&
            input.TaskDescription !== null && { TaskDescription: input.TaskDescription }),
        ...(input.TaskKeywords !== undefined &&
            input.TaskKeywords !== null && { TaskKeywords: serializeAws_json1_1TaskKeywords(input.TaskKeywords, context) }),
        ...(input.TaskTimeLimitInSeconds !== undefined &&
            input.TaskTimeLimitInSeconds !== null && { TaskTimeLimitInSeconds: input.TaskTimeLimitInSeconds }),
        ...(input.TaskTitle !== undefined && input.TaskTitle !== null && { TaskTitle: input.TaskTitle }),
        ...(input.UiConfig !== undefined &&
            input.UiConfig !== null && { UiConfig: serializeAws_json1_1UiConfig(input.UiConfig, context) }),
        ...(input.WorkteamArn !== undefined && input.WorkteamArn !== null && { WorkteamArn: input.WorkteamArn }),
    };
};
const serializeAws_json1_1HyperParameterAlgorithmSpecification = (input, context) => {
    return {
        ...(input.AlgorithmName !== undefined && input.AlgorithmName !== null && { AlgorithmName: input.AlgorithmName }),
        ...(input.MetricDefinitions !== undefined &&
            input.MetricDefinitions !== null && {
            MetricDefinitions: serializeAws_json1_1MetricDefinitionList(input.MetricDefinitions, context),
        }),
        ...(input.TrainingImage !== undefined && input.TrainingImage !== null && { TrainingImage: input.TrainingImage }),
        ...(input.TrainingInputMode !== undefined &&
            input.TrainingInputMode !== null && { TrainingInputMode: input.TrainingInputMode }),
    };
};
const serializeAws_json1_1HyperParameters = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const serializeAws_json1_1HyperParameterSpecification = (input, context) => {
    return {
        ...(input.DefaultValue !== undefined && input.DefaultValue !== null && { DefaultValue: input.DefaultValue }),
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.IsRequired !== undefined && input.IsRequired !== null && { IsRequired: input.IsRequired }),
        ...(input.IsTunable !== undefined && input.IsTunable !== null && { IsTunable: input.IsTunable }),
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
        ...(input.Range !== undefined &&
            input.Range !== null && { Range: serializeAws_json1_1ParameterRange(input.Range, context) }),
        ...(input.Type !== undefined && input.Type !== null && { Type: input.Type }),
    };
};
const serializeAws_json1_1HyperParameterSpecifications = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1HyperParameterSpecification(entry, context);
    });
};
const serializeAws_json1_1HyperParameterTrainingJobDefinition = (input, context) => {
    return {
        ...(input.AlgorithmSpecification !== undefined &&
            input.AlgorithmSpecification !== null && {
            AlgorithmSpecification: serializeAws_json1_1HyperParameterAlgorithmSpecification(input.AlgorithmSpecification, context),
        }),
        ...(input.CheckpointConfig !== undefined &&
            input.CheckpointConfig !== null && {
            CheckpointConfig: serializeAws_json1_1CheckpointConfig(input.CheckpointConfig, context),
        }),
        ...(input.DefinitionName !== undefined &&
            input.DefinitionName !== null && { DefinitionName: input.DefinitionName }),
        ...(input.EnableInterContainerTrafficEncryption !== undefined &&
            input.EnableInterContainerTrafficEncryption !== null && {
            EnableInterContainerTrafficEncryption: input.EnableInterContainerTrafficEncryption,
        }),
        ...(input.EnableManagedSpotTraining !== undefined &&
            input.EnableManagedSpotTraining !== null && { EnableManagedSpotTraining: input.EnableManagedSpotTraining }),
        ...(input.EnableNetworkIsolation !== undefined &&
            input.EnableNetworkIsolation !== null && { EnableNetworkIsolation: input.EnableNetworkIsolation }),
        ...(input.HyperParameterRanges !== undefined &&
            input.HyperParameterRanges !== null && {
            HyperParameterRanges: serializeAws_json1_1ParameterRanges(input.HyperParameterRanges, context),
        }),
        ...(input.InputDataConfig !== undefined &&
            input.InputDataConfig !== null && {
            InputDataConfig: serializeAws_json1_1InputDataConfig(input.InputDataConfig, context),
        }),
        ...(input.OutputDataConfig !== undefined &&
            input.OutputDataConfig !== null && {
            OutputDataConfig: serializeAws_json1_1OutputDataConfig(input.OutputDataConfig, context),
        }),
        ...(input.ResourceConfig !== undefined &&
            input.ResourceConfig !== null && {
            ResourceConfig: serializeAws_json1_1ResourceConfig(input.ResourceConfig, context),
        }),
        ...(input.RetryStrategy !== undefined &&
            input.RetryStrategy !== null && {
            RetryStrategy: serializeAws_json1_1RetryStrategy(input.RetryStrategy, context),
        }),
        ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
        ...(input.StaticHyperParameters !== undefined &&
            input.StaticHyperParameters !== null && {
            StaticHyperParameters: serializeAws_json1_1HyperParameters(input.StaticHyperParameters, context),
        }),
        ...(input.StoppingCondition !== undefined &&
            input.StoppingCondition !== null && {
            StoppingCondition: serializeAws_json1_1StoppingCondition(input.StoppingCondition, context),
        }),
        ...(input.TuningObjective !== undefined &&
            input.TuningObjective !== null && {
            TuningObjective: serializeAws_json1_1HyperParameterTuningJobObjective(input.TuningObjective, context),
        }),
        ...(input.VpcConfig !== undefined &&
            input.VpcConfig !== null && { VpcConfig: serializeAws_json1_1VpcConfig(input.VpcConfig, context) }),
    };
};
const serializeAws_json1_1HyperParameterTrainingJobDefinitions = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1HyperParameterTrainingJobDefinition(entry, context);
    });
};
const serializeAws_json1_1HyperParameterTuningJobConfig = (input, context) => {
    return {
        ...(input.HyperParameterTuningJobObjective !== undefined &&
            input.HyperParameterTuningJobObjective !== null && {
            HyperParameterTuningJobObjective: serializeAws_json1_1HyperParameterTuningJobObjective(input.HyperParameterTuningJobObjective, context),
        }),
        ...(input.ParameterRanges !== undefined &&
            input.ParameterRanges !== null && {
            ParameterRanges: serializeAws_json1_1ParameterRanges(input.ParameterRanges, context),
        }),
        ...(input.ResourceLimits !== undefined &&
            input.ResourceLimits !== null && {
            ResourceLimits: serializeAws_json1_1ResourceLimits(input.ResourceLimits, context),
        }),
        ...(input.Strategy !== undefined && input.Strategy !== null && { Strategy: input.Strategy }),
        ...(input.TrainingJobEarlyStoppingType !== undefined &&
            input.TrainingJobEarlyStoppingType !== null && {
            TrainingJobEarlyStoppingType: input.TrainingJobEarlyStoppingType,
        }),
        ...(input.TuningJobCompletionCriteria !== undefined &&
            input.TuningJobCompletionCriteria !== null && {
            TuningJobCompletionCriteria: serializeAws_json1_1TuningJobCompletionCriteria(input.TuningJobCompletionCriteria, context),
        }),
    };
};
const serializeAws_json1_1HyperParameterTuningJobObjective = (input, context) => {
    return {
        ...(input.MetricName !== undefined && input.MetricName !== null && { MetricName: input.MetricName }),
        ...(input.Type !== undefined && input.Type !== null && { Type: input.Type }),
    };
};
const serializeAws_json1_1HyperParameterTuningJobObjectives = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1HyperParameterTuningJobObjective(entry, context);
    });
};
const serializeAws_json1_1HyperParameterTuningJobWarmStartConfig = (input, context) => {
    return {
        ...(input.ParentHyperParameterTuningJobs !== undefined &&
            input.ParentHyperParameterTuningJobs !== null && {
            ParentHyperParameterTuningJobs: serializeAws_json1_1ParentHyperParameterTuningJobs(input.ParentHyperParameterTuningJobs, context),
        }),
        ...(input.WarmStartType !== undefined && input.WarmStartType !== null && { WarmStartType: input.WarmStartType }),
    };
};
const serializeAws_json1_1ImageConfig = (input, context) => {
    return {
        ...(input.RepositoryAccessMode !== undefined &&
            input.RepositoryAccessMode !== null && { RepositoryAccessMode: input.RepositoryAccessMode }),
        ...(input.RepositoryAuthConfig !== undefined &&
            input.RepositoryAuthConfig !== null && {
            RepositoryAuthConfig: serializeAws_json1_1RepositoryAuthConfig(input.RepositoryAuthConfig, context),
        }),
    };
};
const serializeAws_json1_1ImageDeletePropertyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1InferenceExecutionConfig = (input, context) => {
    return {
        ...(input.Mode !== undefined && input.Mode !== null && { Mode: input.Mode }),
    };
};
const serializeAws_json1_1InferenceSpecification = (input, context) => {
    return {
        ...(input.Containers !== undefined &&
            input.Containers !== null && {
            Containers: serializeAws_json1_1ModelPackageContainerDefinitionList(input.Containers, context),
        }),
        ...(input.SupportedContentTypes !== undefined &&
            input.SupportedContentTypes !== null && {
            SupportedContentTypes: serializeAws_json1_1ContentTypes(input.SupportedContentTypes, context),
        }),
        ...(input.SupportedRealtimeInferenceInstanceTypes !== undefined &&
            input.SupportedRealtimeInferenceInstanceTypes !== null && {
            SupportedRealtimeInferenceInstanceTypes: serializeAws_json1_1RealtimeInferenceInstanceTypes(input.SupportedRealtimeInferenceInstanceTypes, context),
        }),
        ...(input.SupportedResponseMIMETypes !== undefined &&
            input.SupportedResponseMIMETypes !== null && {
            SupportedResponseMIMETypes: serializeAws_json1_1ResponseMIMETypes(input.SupportedResponseMIMETypes, context),
        }),
        ...(input.SupportedTransformInstanceTypes !== undefined &&
            input.SupportedTransformInstanceTypes !== null && {
            SupportedTransformInstanceTypes: serializeAws_json1_1TransformInstanceTypes(input.SupportedTransformInstanceTypes, context),
        }),
    };
};
const serializeAws_json1_1InputConfig = (input, context) => {
    return {
        ...(input.DataInputConfig !== undefined &&
            input.DataInputConfig !== null && { DataInputConfig: input.DataInputConfig }),
        ...(input.Framework !== undefined && input.Framework !== null && { Framework: input.Framework }),
        ...(input.FrameworkVersion !== undefined &&
            input.FrameworkVersion !== null && { FrameworkVersion: input.FrameworkVersion }),
        ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
    };
};
const serializeAws_json1_1InputDataConfig = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1Channel(entry, context);
    });
};
const serializeAws_json1_1InputModes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1IntegerParameterRange = (input, context) => {
    return {
        ...(input.MaxValue !== undefined && input.MaxValue !== null && { MaxValue: input.MaxValue }),
        ...(input.MinValue !== undefined && input.MinValue !== null && { MinValue: input.MinValue }),
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
        ...(input.ScalingType !== undefined && input.ScalingType !== null && { ScalingType: input.ScalingType }),
    };
};
const serializeAws_json1_1IntegerParameterRanges = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1IntegerParameterRange(entry, context);
    });
};
const serializeAws_json1_1IntegerParameterRangeSpecification = (input, context) => {
    return {
        ...(input.MaxValue !== undefined && input.MaxValue !== null && { MaxValue: input.MaxValue }),
        ...(input.MinValue !== undefined && input.MinValue !== null && { MinValue: input.MinValue }),
    };
};
const serializeAws_json1_1JsonContentTypes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1JupyterServerAppSettings = (input, context) => {
    return {
        ...(input.DefaultResourceSpec !== undefined &&
            input.DefaultResourceSpec !== null && {
            DefaultResourceSpec: serializeAws_json1_1ResourceSpec(input.DefaultResourceSpec, context),
        }),
    };
};
const serializeAws_json1_1KernelGatewayAppSettings = (input, context) => {
    return {
        ...(input.CustomImages !== undefined &&
            input.CustomImages !== null && { CustomImages: serializeAws_json1_1CustomImages(input.CustomImages, context) }),
        ...(input.DefaultResourceSpec !== undefined &&
            input.DefaultResourceSpec !== null && {
            DefaultResourceSpec: serializeAws_json1_1ResourceSpec(input.DefaultResourceSpec, context),
        }),
    };
};
const serializeAws_json1_1KernelGatewayImageConfig = (input, context) => {
    return {
        ...(input.FileSystemConfig !== undefined &&
            input.FileSystemConfig !== null && {
            FileSystemConfig: serializeAws_json1_1FileSystemConfig(input.FileSystemConfig, context),
        }),
        ...(input.KernelSpecs !== undefined &&
            input.KernelSpecs !== null && { KernelSpecs: serializeAws_json1_1KernelSpecs(input.KernelSpecs, context) }),
    };
};
const serializeAws_json1_1KernelSpec = (input, context) => {
    return {
        ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
    };
};
const serializeAws_json1_1KernelSpecs = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1KernelSpec(entry, context);
    });
};
const serializeAws_json1_1LabelingJobAlgorithmsConfig = (input, context) => {
    return {
        ...(input.InitialActiveLearningModelArn !== undefined &&
            input.InitialActiveLearningModelArn !== null && {
            InitialActiveLearningModelArn: input.InitialActiveLearningModelArn,
        }),
        ...(input.LabelingJobAlgorithmSpecificationArn !== undefined &&
            input.LabelingJobAlgorithmSpecificationArn !== null && {
            LabelingJobAlgorithmSpecificationArn: input.LabelingJobAlgorithmSpecificationArn,
        }),
        ...(input.LabelingJobResourceConfig !== undefined &&
            input.LabelingJobResourceConfig !== null && {
            LabelingJobResourceConfig: serializeAws_json1_1LabelingJobResourceConfig(input.LabelingJobResourceConfig, context),
        }),
    };
};
const serializeAws_json1_1LabelingJobDataAttributes = (input, context) => {
    return {
        ...(input.ContentClassifiers !== undefined &&
            input.ContentClassifiers !== null && {
            ContentClassifiers: serializeAws_json1_1ContentClassifiers(input.ContentClassifiers, context),
        }),
    };
};
const serializeAws_json1_1LabelingJobDataSource = (input, context) => {
    return {
        ...(input.S3DataSource !== undefined &&
            input.S3DataSource !== null && {
            S3DataSource: serializeAws_json1_1LabelingJobS3DataSource(input.S3DataSource, context),
        }),
        ...(input.SnsDataSource !== undefined &&
            input.SnsDataSource !== null && {
            SnsDataSource: serializeAws_json1_1LabelingJobSnsDataSource(input.SnsDataSource, context),
        }),
    };
};
const serializeAws_json1_1LabelingJobInputConfig = (input, context) => {
    return {
        ...(input.DataAttributes !== undefined &&
            input.DataAttributes !== null && {
            DataAttributes: serializeAws_json1_1LabelingJobDataAttributes(input.DataAttributes, context),
        }),
        ...(input.DataSource !== undefined &&
            input.DataSource !== null && {
            DataSource: serializeAws_json1_1LabelingJobDataSource(input.DataSource, context),
        }),
    };
};
const serializeAws_json1_1LabelingJobOutputConfig = (input, context) => {
    return {
        ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
        ...(input.S3OutputPath !== undefined && input.S3OutputPath !== null && { S3OutputPath: input.S3OutputPath }),
        ...(input.SnsTopicArn !== undefined && input.SnsTopicArn !== null && { SnsTopicArn: input.SnsTopicArn }),
    };
};
const serializeAws_json1_1LabelingJobResourceConfig = (input, context) => {
    return {
        ...(input.VolumeKmsKeyId !== undefined &&
            input.VolumeKmsKeyId !== null && { VolumeKmsKeyId: input.VolumeKmsKeyId }),
    };
};
const serializeAws_json1_1LabelingJobS3DataSource = (input, context) => {
    return {
        ...(input.ManifestS3Uri !== undefined && input.ManifestS3Uri !== null && { ManifestS3Uri: input.ManifestS3Uri }),
    };
};
const serializeAws_json1_1LabelingJobSnsDataSource = (input, context) => {
    return {
        ...(input.SnsTopicArn !== undefined && input.SnsTopicArn !== null && { SnsTopicArn: input.SnsTopicArn }),
    };
};
const serializeAws_json1_1LabelingJobStoppingConditions = (input, context) => {
    return {
        ...(input.MaxHumanLabeledObjectCount !== undefined &&
            input.MaxHumanLabeledObjectCount !== null && { MaxHumanLabeledObjectCount: input.MaxHumanLabeledObjectCount }),
        ...(input.MaxPercentageOfInputDatasetLabeled !== undefined &&
            input.MaxPercentageOfInputDatasetLabeled !== null && {
            MaxPercentageOfInputDatasetLabeled: input.MaxPercentageOfInputDatasetLabeled,
        }),
    };
};
const serializeAws_json1_1LineageEntityParameters = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const serializeAws_json1_1ListActionsRequest = (input, context) => {
    return {
        ...(input.ActionType !== undefined && input.ActionType !== null && { ActionType: input.ActionType }),
        ...(input.CreatedAfter !== undefined &&
            input.CreatedAfter !== null && { CreatedAfter: Math.round(input.CreatedAfter.getTime() / 1000) }),
        ...(input.CreatedBefore !== undefined &&
            input.CreatedBefore !== null && { CreatedBefore: Math.round(input.CreatedBefore.getTime() / 1000) }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
        ...(input.SourceUri !== undefined && input.SourceUri !== null && { SourceUri: input.SourceUri }),
    };
};
const serializeAws_json1_1ListAlgorithmsInput = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1ListAppImageConfigsRequest = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.ModifiedTimeAfter !== undefined &&
            input.ModifiedTimeAfter !== null && { ModifiedTimeAfter: Math.round(input.ModifiedTimeAfter.getTime() / 1000) }),
        ...(input.ModifiedTimeBefore !== undefined &&
            input.ModifiedTimeBefore !== null && {
            ModifiedTimeBefore: Math.round(input.ModifiedTimeBefore.getTime() / 1000),
        }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1ListAppsRequest = (input, context) => {
    return {
        ...(input.DomainIdEquals !== undefined &&
            input.DomainIdEquals !== null && { DomainIdEquals: input.DomainIdEquals }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
        ...(input.UserProfileNameEquals !== undefined &&
            input.UserProfileNameEquals !== null && { UserProfileNameEquals: input.UserProfileNameEquals }),
    };
};
const serializeAws_json1_1ListArtifactsRequest = (input, context) => {
    return {
        ...(input.ArtifactType !== undefined && input.ArtifactType !== null && { ArtifactType: input.ArtifactType }),
        ...(input.CreatedAfter !== undefined &&
            input.CreatedAfter !== null && { CreatedAfter: Math.round(input.CreatedAfter.getTime() / 1000) }),
        ...(input.CreatedBefore !== undefined &&
            input.CreatedBefore !== null && { CreatedBefore: Math.round(input.CreatedBefore.getTime() / 1000) }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
        ...(input.SourceUri !== undefined && input.SourceUri !== null && { SourceUri: input.SourceUri }),
    };
};
const serializeAws_json1_1ListAssociationsRequest = (input, context) => {
    return {
        ...(input.AssociationType !== undefined &&
            input.AssociationType !== null && { AssociationType: input.AssociationType }),
        ...(input.CreatedAfter !== undefined &&
            input.CreatedAfter !== null && { CreatedAfter: Math.round(input.CreatedAfter.getTime() / 1000) }),
        ...(input.CreatedBefore !== undefined &&
            input.CreatedBefore !== null && { CreatedBefore: Math.round(input.CreatedBefore.getTime() / 1000) }),
        ...(input.DestinationArn !== undefined &&
            input.DestinationArn !== null && { DestinationArn: input.DestinationArn }),
        ...(input.DestinationType !== undefined &&
            input.DestinationType !== null && { DestinationType: input.DestinationType }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
        ...(input.SourceArn !== undefined && input.SourceArn !== null && { SourceArn: input.SourceArn }),
        ...(input.SourceType !== undefined && input.SourceType !== null && { SourceType: input.SourceType }),
    };
};
const serializeAws_json1_1ListAutoMLJobsRequest = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeAfter !== undefined &&
            input.LastModifiedTimeAfter !== null && {
            LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeBefore !== undefined &&
            input.LastModifiedTimeBefore !== null && {
            LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
        ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
    };
};
const serializeAws_json1_1ListCandidatesForAutoMLJobRequest = (input, context) => {
    return {
        ...(input.AutoMLJobName !== undefined && input.AutoMLJobName !== null && { AutoMLJobName: input.AutoMLJobName }),
        ...(input.CandidateNameEquals !== undefined &&
            input.CandidateNameEquals !== null && { CandidateNameEquals: input.CandidateNameEquals }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
        ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
    };
};
const serializeAws_json1_1ListCodeRepositoriesInput = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeAfter !== undefined &&
            input.LastModifiedTimeAfter !== null && {
            LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeBefore !== undefined &&
            input.LastModifiedTimeBefore !== null && {
            LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1ListCompilationJobsRequest = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeAfter !== undefined &&
            input.LastModifiedTimeAfter !== null && {
            LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeBefore !== undefined &&
            input.LastModifiedTimeBefore !== null && {
            LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
        ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
    };
};
const serializeAws_json1_1ListContextsRequest = (input, context) => {
    return {
        ...(input.ContextType !== undefined && input.ContextType !== null && { ContextType: input.ContextType }),
        ...(input.CreatedAfter !== undefined &&
            input.CreatedAfter !== null && { CreatedAfter: Math.round(input.CreatedAfter.getTime() / 1000) }),
        ...(input.CreatedBefore !== undefined &&
            input.CreatedBefore !== null && { CreatedBefore: Math.round(input.CreatedBefore.getTime() / 1000) }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
        ...(input.SourceUri !== undefined && input.SourceUri !== null && { SourceUri: input.SourceUri }),
    };
};
const serializeAws_json1_1ListDataQualityJobDefinitionsRequest = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1ListDeviceFleetsRequest = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeAfter !== undefined &&
            input.LastModifiedTimeAfter !== null && {
            LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeBefore !== undefined &&
            input.LastModifiedTimeBefore !== null && {
            LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1ListDevicesRequest = (input, context) => {
    return {
        ...(input.DeviceFleetName !== undefined &&
            input.DeviceFleetName !== null && { DeviceFleetName: input.DeviceFleetName }),
        ...(input.LatestHeartbeatAfter !== undefined &&
            input.LatestHeartbeatAfter !== null && {
            LatestHeartbeatAfter: Math.round(input.LatestHeartbeatAfter.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.ModelName !== undefined && input.ModelName !== null && { ModelName: input.ModelName }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListDomainsRequest = (input, context) => {
    return {
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListEdgePackagingJobsRequest = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeAfter !== undefined &&
            input.LastModifiedTimeAfter !== null && {
            LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeBefore !== undefined &&
            input.LastModifiedTimeBefore !== null && {
            LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.ModelNameContains !== undefined &&
            input.ModelNameContains !== null && { ModelNameContains: input.ModelNameContains }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
        ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
    };
};
const serializeAws_json1_1ListEndpointConfigsInput = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1ListEndpointsInput = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeAfter !== undefined &&
            input.LastModifiedTimeAfter !== null && {
            LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeBefore !== undefined &&
            input.LastModifiedTimeBefore !== null && {
            LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
        ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
    };
};
const serializeAws_json1_1ListExperimentsRequest = (input, context) => {
    return {
        ...(input.CreatedAfter !== undefined &&
            input.CreatedAfter !== null && { CreatedAfter: Math.round(input.CreatedAfter.getTime() / 1000) }),
        ...(input.CreatedBefore !== undefined &&
            input.CreatedBefore !== null && { CreatedBefore: Math.round(input.CreatedBefore.getTime() / 1000) }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1ListFeatureGroupsRequest = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.FeatureGroupStatusEquals !== undefined &&
            input.FeatureGroupStatusEquals !== null && { FeatureGroupStatusEquals: input.FeatureGroupStatusEquals }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.OfflineStoreStatusEquals !== undefined &&
            input.OfflineStoreStatusEquals !== null && { OfflineStoreStatusEquals: input.OfflineStoreStatusEquals }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1ListFlowDefinitionsRequest = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1ListHumanTaskUisRequest = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1ListHyperParameterTuningJobsRequest = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeAfter !== undefined &&
            input.LastModifiedTimeAfter !== null && {
            LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeBefore !== undefined &&
            input.LastModifiedTimeBefore !== null && {
            LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
        ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
    };
};
const serializeAws_json1_1ListImagesRequest = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeAfter !== undefined &&
            input.LastModifiedTimeAfter !== null && {
            LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeBefore !== undefined &&
            input.LastModifiedTimeBefore !== null && {
            LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1ListImageVersionsRequest = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.ImageName !== undefined && input.ImageName !== null && { ImageName: input.ImageName }),
        ...(input.LastModifiedTimeAfter !== undefined &&
            input.LastModifiedTimeAfter !== null && {
            LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeBefore !== undefined &&
            input.LastModifiedTimeBefore !== null && {
            LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1ListLabelingJobsForWorkteamRequest = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.JobReferenceCodeContains !== undefined &&
            input.JobReferenceCodeContains !== null && { JobReferenceCodeContains: input.JobReferenceCodeContains }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
        ...(input.WorkteamArn !== undefined && input.WorkteamArn !== null && { WorkteamArn: input.WorkteamArn }),
    };
};
const serializeAws_json1_1ListLabelingJobsRequest = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeAfter !== undefined &&
            input.LastModifiedTimeAfter !== null && {
            LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeBefore !== undefined &&
            input.LastModifiedTimeBefore !== null && {
            LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
        ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
    };
};
const serializeAws_json1_1ListLineageEntityParameterKey = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1ListModelBiasJobDefinitionsRequest = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1ListModelExplainabilityJobDefinitionsRequest = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1ListModelPackageGroupsInput = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1ListModelPackagesInput = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.ModelApprovalStatus !== undefined &&
            input.ModelApprovalStatus !== null && { ModelApprovalStatus: input.ModelApprovalStatus }),
        ...(input.ModelPackageGroupName !== undefined &&
            input.ModelPackageGroupName !== null && { ModelPackageGroupName: input.ModelPackageGroupName }),
        ...(input.ModelPackageType !== undefined &&
            input.ModelPackageType !== null && { ModelPackageType: input.ModelPackageType }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1ListModelQualityJobDefinitionsRequest = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1ListModelsInput = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1ListMonitoringExecutionsRequest = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
        ...(input.LastModifiedTimeAfter !== undefined &&
            input.LastModifiedTimeAfter !== null && {
            LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeBefore !== undefined &&
            input.LastModifiedTimeBefore !== null && {
            LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.MonitoringJobDefinitionName !== undefined &&
            input.MonitoringJobDefinitionName !== null && { MonitoringJobDefinitionName: input.MonitoringJobDefinitionName }),
        ...(input.MonitoringScheduleName !== undefined &&
            input.MonitoringScheduleName !== null && { MonitoringScheduleName: input.MonitoringScheduleName }),
        ...(input.MonitoringTypeEquals !== undefined &&
            input.MonitoringTypeEquals !== null && { MonitoringTypeEquals: input.MonitoringTypeEquals }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.ScheduledTimeAfter !== undefined &&
            input.ScheduledTimeAfter !== null && {
            ScheduledTimeAfter: Math.round(input.ScheduledTimeAfter.getTime() / 1000),
        }),
        ...(input.ScheduledTimeBefore !== undefined &&
            input.ScheduledTimeBefore !== null && {
            ScheduledTimeBefore: Math.round(input.ScheduledTimeBefore.getTime() / 1000),
        }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
        ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
    };
};
const serializeAws_json1_1ListMonitoringSchedulesRequest = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
        ...(input.LastModifiedTimeAfter !== undefined &&
            input.LastModifiedTimeAfter !== null && {
            LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeBefore !== undefined &&
            input.LastModifiedTimeBefore !== null && {
            LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.MonitoringJobDefinitionName !== undefined &&
            input.MonitoringJobDefinitionName !== null && { MonitoringJobDefinitionName: input.MonitoringJobDefinitionName }),
        ...(input.MonitoringTypeEquals !== undefined &&
            input.MonitoringTypeEquals !== null && { MonitoringTypeEquals: input.MonitoringTypeEquals }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
        ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
    };
};
const serializeAws_json1_1ListNotebookInstanceLifecycleConfigsInput = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeAfter !== undefined &&
            input.LastModifiedTimeAfter !== null && {
            LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeBefore !== undefined &&
            input.LastModifiedTimeBefore !== null && {
            LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1ListNotebookInstancesInput = (input, context) => {
    return {
        ...(input.AdditionalCodeRepositoryEquals !== undefined &&
            input.AdditionalCodeRepositoryEquals !== null && {
            AdditionalCodeRepositoryEquals: input.AdditionalCodeRepositoryEquals,
        }),
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.DefaultCodeRepositoryContains !== undefined &&
            input.DefaultCodeRepositoryContains !== null && {
            DefaultCodeRepositoryContains: input.DefaultCodeRepositoryContains,
        }),
        ...(input.LastModifiedTimeAfter !== undefined &&
            input.LastModifiedTimeAfter !== null && {
            LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeBefore !== undefined &&
            input.LastModifiedTimeBefore !== null && {
            LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.NotebookInstanceLifecycleConfigNameContains !== undefined &&
            input.NotebookInstanceLifecycleConfigNameContains !== null && {
            NotebookInstanceLifecycleConfigNameContains: input.NotebookInstanceLifecycleConfigNameContains,
        }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
        ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
    };
};
const serializeAws_json1_1ListPipelineExecutionsRequest = (input, context) => {
    return {
        ...(input.CreatedAfter !== undefined &&
            input.CreatedAfter !== null && { CreatedAfter: Math.round(input.CreatedAfter.getTime() / 1000) }),
        ...(input.CreatedBefore !== undefined &&
            input.CreatedBefore !== null && { CreatedBefore: Math.round(input.CreatedBefore.getTime() / 1000) }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.PipelineName !== undefined && input.PipelineName !== null && { PipelineName: input.PipelineName }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1ListPipelineExecutionStepsRequest = (input, context) => {
    return {
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.PipelineExecutionArn !== undefined &&
            input.PipelineExecutionArn !== null && { PipelineExecutionArn: input.PipelineExecutionArn }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1ListPipelineParametersForExecutionRequest = (input, context) => {
    return {
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.PipelineExecutionArn !== undefined &&
            input.PipelineExecutionArn !== null && { PipelineExecutionArn: input.PipelineExecutionArn }),
    };
};
const serializeAws_json1_1ListPipelinesRequest = (input, context) => {
    return {
        ...(input.CreatedAfter !== undefined &&
            input.CreatedAfter !== null && { CreatedAfter: Math.round(input.CreatedAfter.getTime() / 1000) }),
        ...(input.CreatedBefore !== undefined &&
            input.CreatedBefore !== null && { CreatedBefore: Math.round(input.CreatedBefore.getTime() / 1000) }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.PipelineNamePrefix !== undefined &&
            input.PipelineNamePrefix !== null && { PipelineNamePrefix: input.PipelineNamePrefix }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1ListProcessingJobsRequest = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeAfter !== undefined &&
            input.LastModifiedTimeAfter !== null && {
            LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeBefore !== undefined &&
            input.LastModifiedTimeBefore !== null && {
            LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
        ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
    };
};
const serializeAws_json1_1ListProjectsInput = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1ListSubscribedWorkteamsRequest = (input, context) => {
    return {
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListTagsInput = (input, context) => {
    return {
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.ResourceArn !== undefined && input.ResourceArn !== null && { ResourceArn: input.ResourceArn }),
    };
};
const serializeAws_json1_1ListTrainingJobsForHyperParameterTuningJobRequest = (input, context) => {
    return {
        ...(input.HyperParameterTuningJobName !== undefined &&
            input.HyperParameterTuningJobName !== null && { HyperParameterTuningJobName: input.HyperParameterTuningJobName }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
        ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
    };
};
const serializeAws_json1_1ListTrainingJobsRequest = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeAfter !== undefined &&
            input.LastModifiedTimeAfter !== null && {
            LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeBefore !== undefined &&
            input.LastModifiedTimeBefore !== null && {
            LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
        ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
    };
};
const serializeAws_json1_1ListTransformJobsRequest = (input, context) => {
    return {
        ...(input.CreationTimeAfter !== undefined &&
            input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
        ...(input.CreationTimeBefore !== undefined &&
            input.CreationTimeBefore !== null && {
            CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeAfter !== undefined &&
            input.LastModifiedTimeAfter !== null && {
            LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
        }),
        ...(input.LastModifiedTimeBefore !== undefined &&
            input.LastModifiedTimeBefore !== null && {
            LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
        }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
        ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
    };
};
const serializeAws_json1_1ListTrialComponentKey256 = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1ListTrialComponentsRequest = (input, context) => {
    return {
        ...(input.CreatedAfter !== undefined &&
            input.CreatedAfter !== null && { CreatedAfter: Math.round(input.CreatedAfter.getTime() / 1000) }),
        ...(input.CreatedBefore !== undefined &&
            input.CreatedBefore !== null && { CreatedBefore: Math.round(input.CreatedBefore.getTime() / 1000) }),
        ...(input.ExperimentName !== undefined &&
            input.ExperimentName !== null && { ExperimentName: input.ExperimentName }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
        ...(input.SourceArn !== undefined && input.SourceArn !== null && { SourceArn: input.SourceArn }),
        ...(input.TrialName !== undefined && input.TrialName !== null && { TrialName: input.TrialName }),
    };
};
const serializeAws_json1_1ListTrialsRequest = (input, context) => {
    return {
        ...(input.CreatedAfter !== undefined &&
            input.CreatedAfter !== null && { CreatedAfter: Math.round(input.CreatedAfter.getTime() / 1000) }),
        ...(input.CreatedBefore !== undefined &&
            input.CreatedBefore !== null && { CreatedBefore: Math.round(input.CreatedBefore.getTime() / 1000) }),
        ...(input.ExperimentName !== undefined &&
            input.ExperimentName !== null && { ExperimentName: input.ExperimentName }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
        ...(input.TrialComponentName !== undefined &&
            input.TrialComponentName !== null && { TrialComponentName: input.TrialComponentName }),
    };
};
const serializeAws_json1_1ListUserProfilesRequest = (input, context) => {
    return {
        ...(input.DomainIdEquals !== undefined &&
            input.DomainIdEquals !== null && { DomainIdEquals: input.DomainIdEquals }),
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
        ...(input.UserProfileNameContains !== undefined &&
            input.UserProfileNameContains !== null && { UserProfileNameContains: input.UserProfileNameContains }),
    };
};
const serializeAws_json1_1ListWorkforcesRequest = (input, context) => {
    return {
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1ListWorkteamsRequest = (input, context) => {
    return {
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1MemberDefinition = (input, context) => {
    return {
        ...(input.CognitoMemberDefinition !== undefined &&
            input.CognitoMemberDefinition !== null && {
            CognitoMemberDefinition: serializeAws_json1_1CognitoMemberDefinition(input.CognitoMemberDefinition, context),
        }),
        ...(input.OidcMemberDefinition !== undefined &&
            input.OidcMemberDefinition !== null && {
            OidcMemberDefinition: serializeAws_json1_1OidcMemberDefinition(input.OidcMemberDefinition, context),
        }),
    };
};
const serializeAws_json1_1MemberDefinitions = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1MemberDefinition(entry, context);
    });
};
const serializeAws_json1_1MetadataProperties = (input, context) => {
    return {
        ...(input.CommitId !== undefined && input.CommitId !== null && { CommitId: input.CommitId }),
        ...(input.GeneratedBy !== undefined && input.GeneratedBy !== null && { GeneratedBy: input.GeneratedBy }),
        ...(input.ProjectId !== undefined && input.ProjectId !== null && { ProjectId: input.ProjectId }),
        ...(input.Repository !== undefined && input.Repository !== null && { Repository: input.Repository }),
    };
};
const serializeAws_json1_1MetricDefinition = (input, context) => {
    return {
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
        ...(input.Regex !== undefined && input.Regex !== null && { Regex: input.Regex }),
    };
};
const serializeAws_json1_1MetricDefinitionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1MetricDefinition(entry, context);
    });
};
const serializeAws_json1_1MetricsSource = (input, context) => {
    return {
        ...(input.ContentDigest !== undefined && input.ContentDigest !== null && { ContentDigest: input.ContentDigest }),
        ...(input.ContentType !== undefined && input.ContentType !== null && { ContentType: input.ContentType }),
        ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
    };
};
const serializeAws_json1_1ModelBiasAppSpecification = (input, context) => {
    return {
        ...(input.ConfigUri !== undefined && input.ConfigUri !== null && { ConfigUri: input.ConfigUri }),
        ...(input.Environment !== undefined &&
            input.Environment !== null && {
            Environment: serializeAws_json1_1MonitoringEnvironmentMap(input.Environment, context),
        }),
        ...(input.ImageUri !== undefined && input.ImageUri !== null && { ImageUri: input.ImageUri }),
    };
};
const serializeAws_json1_1ModelBiasBaselineConfig = (input, context) => {
    return {
        ...(input.BaseliningJobName !== undefined &&
            input.BaseliningJobName !== null && { BaseliningJobName: input.BaseliningJobName }),
        ...(input.ConstraintsResource !== undefined &&
            input.ConstraintsResource !== null && {
            ConstraintsResource: serializeAws_json1_1MonitoringConstraintsResource(input.ConstraintsResource, context),
        }),
    };
};
const serializeAws_json1_1ModelBiasJobInput = (input, context) => {
    return {
        ...(input.EndpointInput !== undefined &&
            input.EndpointInput !== null && {
            EndpointInput: serializeAws_json1_1EndpointInput(input.EndpointInput, context),
        }),
        ...(input.GroundTruthS3Input !== undefined &&
            input.GroundTruthS3Input !== null && {
            GroundTruthS3Input: serializeAws_json1_1MonitoringGroundTruthS3Input(input.GroundTruthS3Input, context),
        }),
    };
};
const serializeAws_json1_1ModelClientConfig = (input, context) => {
    return {
        ...(input.InvocationsMaxRetries !== undefined &&
            input.InvocationsMaxRetries !== null && { InvocationsMaxRetries: input.InvocationsMaxRetries }),
        ...(input.InvocationsTimeoutInSeconds !== undefined &&
            input.InvocationsTimeoutInSeconds !== null && { InvocationsTimeoutInSeconds: input.InvocationsTimeoutInSeconds }),
    };
};
const serializeAws_json1_1ModelDataQuality = (input, context) => {
    return {
        ...(input.Constraints !== undefined &&
            input.Constraints !== null && { Constraints: serializeAws_json1_1MetricsSource(input.Constraints, context) }),
        ...(input.Statistics !== undefined &&
            input.Statistics !== null && { Statistics: serializeAws_json1_1MetricsSource(input.Statistics, context) }),
    };
};
const serializeAws_json1_1ModelDeployConfig = (input, context) => {
    return {
        ...(input.AutoGenerateEndpointName !== undefined &&
            input.AutoGenerateEndpointName !== null && { AutoGenerateEndpointName: input.AutoGenerateEndpointName }),
        ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
    };
};
const serializeAws_json1_1ModelExplainabilityAppSpecification = (input, context) => {
    return {
        ...(input.ConfigUri !== undefined && input.ConfigUri !== null && { ConfigUri: input.ConfigUri }),
        ...(input.Environment !== undefined &&
            input.Environment !== null && {
            Environment: serializeAws_json1_1MonitoringEnvironmentMap(input.Environment, context),
        }),
        ...(input.ImageUri !== undefined && input.ImageUri !== null && { ImageUri: input.ImageUri }),
    };
};
const serializeAws_json1_1ModelExplainabilityBaselineConfig = (input, context) => {
    return {
        ...(input.BaseliningJobName !== undefined &&
            input.BaseliningJobName !== null && { BaseliningJobName: input.BaseliningJobName }),
        ...(input.ConstraintsResource !== undefined &&
            input.ConstraintsResource !== null && {
            ConstraintsResource: serializeAws_json1_1MonitoringConstraintsResource(input.ConstraintsResource, context),
        }),
    };
};
const serializeAws_json1_1ModelExplainabilityJobInput = (input, context) => {
    return {
        ...(input.EndpointInput !== undefined &&
            input.EndpointInput !== null && {
            EndpointInput: serializeAws_json1_1EndpointInput(input.EndpointInput, context),
        }),
    };
};
const serializeAws_json1_1ModelMetrics = (input, context) => {
    return {
        ...(input.Bias !== undefined && input.Bias !== null && { Bias: serializeAws_json1_1Bias(input.Bias, context) }),
        ...(input.Explainability !== undefined &&
            input.Explainability !== null && {
            Explainability: serializeAws_json1_1Explainability(input.Explainability, context),
        }),
        ...(input.ModelDataQuality !== undefined &&
            input.ModelDataQuality !== null && {
            ModelDataQuality: serializeAws_json1_1ModelDataQuality(input.ModelDataQuality, context),
        }),
        ...(input.ModelQuality !== undefined &&
            input.ModelQuality !== null && { ModelQuality: serializeAws_json1_1ModelQuality(input.ModelQuality, context) }),
    };
};
const serializeAws_json1_1ModelPackageContainerDefinition = (input, context) => {
    return {
        ...(input.ContainerHostname !== undefined &&
            input.ContainerHostname !== null && { ContainerHostname: input.ContainerHostname }),
        ...(input.Image !== undefined && input.Image !== null && { Image: input.Image }),
        ...(input.ImageDigest !== undefined && input.ImageDigest !== null && { ImageDigest: input.ImageDigest }),
        ...(input.ModelDataUrl !== undefined && input.ModelDataUrl !== null && { ModelDataUrl: input.ModelDataUrl }),
        ...(input.ProductId !== undefined && input.ProductId !== null && { ProductId: input.ProductId }),
    };
};
const serializeAws_json1_1ModelPackageContainerDefinitionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1ModelPackageContainerDefinition(entry, context);
    });
};
const serializeAws_json1_1ModelPackageValidationProfile = (input, context) => {
    return {
        ...(input.ProfileName !== undefined && input.ProfileName !== null && { ProfileName: input.ProfileName }),
        ...(input.TransformJobDefinition !== undefined &&
            input.TransformJobDefinition !== null && {
            TransformJobDefinition: serializeAws_json1_1TransformJobDefinition(input.TransformJobDefinition, context),
        }),
    };
};
const serializeAws_json1_1ModelPackageValidationProfiles = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1ModelPackageValidationProfile(entry, context);
    });
};
const serializeAws_json1_1ModelPackageValidationSpecification = (input, context) => {
    return {
        ...(input.ValidationProfiles !== undefined &&
            input.ValidationProfiles !== null && {
            ValidationProfiles: serializeAws_json1_1ModelPackageValidationProfiles(input.ValidationProfiles, context),
        }),
        ...(input.ValidationRole !== undefined &&
            input.ValidationRole !== null && { ValidationRole: input.ValidationRole }),
    };
};
const serializeAws_json1_1ModelQuality = (input, context) => {
    return {
        ...(input.Constraints !== undefined &&
            input.Constraints !== null && { Constraints: serializeAws_json1_1MetricsSource(input.Constraints, context) }),
        ...(input.Statistics !== undefined &&
            input.Statistics !== null && { Statistics: serializeAws_json1_1MetricsSource(input.Statistics, context) }),
    };
};
const serializeAws_json1_1ModelQualityAppSpecification = (input, context) => {
    return {
        ...(input.ContainerArguments !== undefined &&
            input.ContainerArguments !== null && {
            ContainerArguments: serializeAws_json1_1MonitoringContainerArguments(input.ContainerArguments, context),
        }),
        ...(input.ContainerEntrypoint !== undefined &&
            input.ContainerEntrypoint !== null && {
            ContainerEntrypoint: serializeAws_json1_1ContainerEntrypoint(input.ContainerEntrypoint, context),
        }),
        ...(input.Environment !== undefined &&
            input.Environment !== null && {
            Environment: serializeAws_json1_1MonitoringEnvironmentMap(input.Environment, context),
        }),
        ...(input.ImageUri !== undefined && input.ImageUri !== null && { ImageUri: input.ImageUri }),
        ...(input.PostAnalyticsProcessorSourceUri !== undefined &&
            input.PostAnalyticsProcessorSourceUri !== null && {
            PostAnalyticsProcessorSourceUri: input.PostAnalyticsProcessorSourceUri,
        }),
        ...(input.ProblemType !== undefined && input.ProblemType !== null && { ProblemType: input.ProblemType }),
        ...(input.RecordPreprocessorSourceUri !== undefined &&
            input.RecordPreprocessorSourceUri !== null && { RecordPreprocessorSourceUri: input.RecordPreprocessorSourceUri }),
    };
};
const serializeAws_json1_1ModelQualityBaselineConfig = (input, context) => {
    return {
        ...(input.BaseliningJobName !== undefined &&
            input.BaseliningJobName !== null && { BaseliningJobName: input.BaseliningJobName }),
        ...(input.ConstraintsResource !== undefined &&
            input.ConstraintsResource !== null && {
            ConstraintsResource: serializeAws_json1_1MonitoringConstraintsResource(input.ConstraintsResource, context),
        }),
    };
};
const serializeAws_json1_1ModelQualityJobInput = (input, context) => {
    return {
        ...(input.EndpointInput !== undefined &&
            input.EndpointInput !== null && {
            EndpointInput: serializeAws_json1_1EndpointInput(input.EndpointInput, context),
        }),
        ...(input.GroundTruthS3Input !== undefined &&
            input.GroundTruthS3Input !== null && {
            GroundTruthS3Input: serializeAws_json1_1MonitoringGroundTruthS3Input(input.GroundTruthS3Input, context),
        }),
    };
};
const serializeAws_json1_1MonitoringAppSpecification = (input, context) => {
    return {
        ...(input.ContainerArguments !== undefined &&
            input.ContainerArguments !== null && {
            ContainerArguments: serializeAws_json1_1MonitoringContainerArguments(input.ContainerArguments, context),
        }),
        ...(input.ContainerEntrypoint !== undefined &&
            input.ContainerEntrypoint !== null && {
            ContainerEntrypoint: serializeAws_json1_1ContainerEntrypoint(input.ContainerEntrypoint, context),
        }),
        ...(input.ImageUri !== undefined && input.ImageUri !== null && { ImageUri: input.ImageUri }),
        ...(input.PostAnalyticsProcessorSourceUri !== undefined &&
            input.PostAnalyticsProcessorSourceUri !== null && {
            PostAnalyticsProcessorSourceUri: input.PostAnalyticsProcessorSourceUri,
        }),
        ...(input.RecordPreprocessorSourceUri !== undefined &&
            input.RecordPreprocessorSourceUri !== null && { RecordPreprocessorSourceUri: input.RecordPreprocessorSourceUri }),
    };
};
const serializeAws_json1_1MonitoringBaselineConfig = (input, context) => {
    return {
        ...(input.BaseliningJobName !== undefined &&
            input.BaseliningJobName !== null && { BaseliningJobName: input.BaseliningJobName }),
        ...(input.ConstraintsResource !== undefined &&
            input.ConstraintsResource !== null && {
            ConstraintsResource: serializeAws_json1_1MonitoringConstraintsResource(input.ConstraintsResource, context),
        }),
        ...(input.StatisticsResource !== undefined &&
            input.StatisticsResource !== null && {
            StatisticsResource: serializeAws_json1_1MonitoringStatisticsResource(input.StatisticsResource, context),
        }),
    };
};
const serializeAws_json1_1MonitoringClusterConfig = (input, context) => {
    return {
        ...(input.InstanceCount !== undefined && input.InstanceCount !== null && { InstanceCount: input.InstanceCount }),
        ...(input.InstanceType !== undefined && input.InstanceType !== null && { InstanceType: input.InstanceType }),
        ...(input.VolumeKmsKeyId !== undefined &&
            input.VolumeKmsKeyId !== null && { VolumeKmsKeyId: input.VolumeKmsKeyId }),
        ...(input.VolumeSizeInGB !== undefined &&
            input.VolumeSizeInGB !== null && { VolumeSizeInGB: input.VolumeSizeInGB }),
    };
};
const serializeAws_json1_1MonitoringConstraintsResource = (input, context) => {
    return {
        ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
    };
};
const serializeAws_json1_1MonitoringContainerArguments = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1MonitoringEnvironmentMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const serializeAws_json1_1MonitoringGroundTruthS3Input = (input, context) => {
    return {
        ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
    };
};
const serializeAws_json1_1MonitoringInput = (input, context) => {
    return {
        ...(input.EndpointInput !== undefined &&
            input.EndpointInput !== null && {
            EndpointInput: serializeAws_json1_1EndpointInput(input.EndpointInput, context),
        }),
    };
};
const serializeAws_json1_1MonitoringInputs = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1MonitoringInput(entry, context);
    });
};
const serializeAws_json1_1MonitoringJobDefinition = (input, context) => {
    return {
        ...(input.BaselineConfig !== undefined &&
            input.BaselineConfig !== null && {
            BaselineConfig: serializeAws_json1_1MonitoringBaselineConfig(input.BaselineConfig, context),
        }),
        ...(input.Environment !== undefined &&
            input.Environment !== null && {
            Environment: serializeAws_json1_1MonitoringEnvironmentMap(input.Environment, context),
        }),
        ...(input.MonitoringAppSpecification !== undefined &&
            input.MonitoringAppSpecification !== null && {
            MonitoringAppSpecification: serializeAws_json1_1MonitoringAppSpecification(input.MonitoringAppSpecification, context),
        }),
        ...(input.MonitoringInputs !== undefined &&
            input.MonitoringInputs !== null && {
            MonitoringInputs: serializeAws_json1_1MonitoringInputs(input.MonitoringInputs, context),
        }),
        ...(input.MonitoringOutputConfig !== undefined &&
            input.MonitoringOutputConfig !== null && {
            MonitoringOutputConfig: serializeAws_json1_1MonitoringOutputConfig(input.MonitoringOutputConfig, context),
        }),
        ...(input.MonitoringResources !== undefined &&
            input.MonitoringResources !== null && {
            MonitoringResources: serializeAws_json1_1MonitoringResources(input.MonitoringResources, context),
        }),
        ...(input.NetworkConfig !== undefined &&
            input.NetworkConfig !== null && {
            NetworkConfig: serializeAws_json1_1NetworkConfig(input.NetworkConfig, context),
        }),
        ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
        ...(input.StoppingCondition !== undefined &&
            input.StoppingCondition !== null && {
            StoppingCondition: serializeAws_json1_1MonitoringStoppingCondition(input.StoppingCondition, context),
        }),
    };
};
const serializeAws_json1_1MonitoringNetworkConfig = (input, context) => {
    return {
        ...(input.EnableInterContainerTrafficEncryption !== undefined &&
            input.EnableInterContainerTrafficEncryption !== null && {
            EnableInterContainerTrafficEncryption: input.EnableInterContainerTrafficEncryption,
        }),
        ...(input.EnableNetworkIsolation !== undefined &&
            input.EnableNetworkIsolation !== null && { EnableNetworkIsolation: input.EnableNetworkIsolation }),
        ...(input.VpcConfig !== undefined &&
            input.VpcConfig !== null && { VpcConfig: serializeAws_json1_1VpcConfig(input.VpcConfig, context) }),
    };
};
const serializeAws_json1_1MonitoringOutput = (input, context) => {
    return {
        ...(input.S3Output !== undefined &&
            input.S3Output !== null && { S3Output: serializeAws_json1_1MonitoringS3Output(input.S3Output, context) }),
    };
};
const serializeAws_json1_1MonitoringOutputConfig = (input, context) => {
    return {
        ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
        ...(input.MonitoringOutputs !== undefined &&
            input.MonitoringOutputs !== null && {
            MonitoringOutputs: serializeAws_json1_1MonitoringOutputs(input.MonitoringOutputs, context),
        }),
    };
};
const serializeAws_json1_1MonitoringOutputs = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1MonitoringOutput(entry, context);
    });
};
const serializeAws_json1_1MonitoringResources = (input, context) => {
    return {
        ...(input.ClusterConfig !== undefined &&
            input.ClusterConfig !== null && {
            ClusterConfig: serializeAws_json1_1MonitoringClusterConfig(input.ClusterConfig, context),
        }),
    };
};
const serializeAws_json1_1MonitoringS3Output = (input, context) => {
    return {
        ...(input.LocalPath !== undefined && input.LocalPath !== null && { LocalPath: input.LocalPath }),
        ...(input.S3UploadMode !== undefined && input.S3UploadMode !== null && { S3UploadMode: input.S3UploadMode }),
        ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
    };
};
const serializeAws_json1_1MonitoringScheduleConfig = (input, context) => {
    return {
        ...(input.MonitoringJobDefinition !== undefined &&
            input.MonitoringJobDefinition !== null && {
            MonitoringJobDefinition: serializeAws_json1_1MonitoringJobDefinition(input.MonitoringJobDefinition, context),
        }),
        ...(input.MonitoringJobDefinitionName !== undefined &&
            input.MonitoringJobDefinitionName !== null && { MonitoringJobDefinitionName: input.MonitoringJobDefinitionName }),
        ...(input.MonitoringType !== undefined &&
            input.MonitoringType !== null && { MonitoringType: input.MonitoringType }),
        ...(input.ScheduleConfig !== undefined &&
            input.ScheduleConfig !== null && {
            ScheduleConfig: serializeAws_json1_1ScheduleConfig(input.ScheduleConfig, context),
        }),
    };
};
const serializeAws_json1_1MonitoringStatisticsResource = (input, context) => {
    return {
        ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
    };
};
const serializeAws_json1_1MonitoringStoppingCondition = (input, context) => {
    return {
        ...(input.MaxRuntimeInSeconds !== undefined &&
            input.MaxRuntimeInSeconds !== null && { MaxRuntimeInSeconds: input.MaxRuntimeInSeconds }),
    };
};
const serializeAws_json1_1MultiModelConfig = (input, context) => {
    return {
        ...(input.ModelCacheSetting !== undefined &&
            input.ModelCacheSetting !== null && { ModelCacheSetting: input.ModelCacheSetting }),
    };
};
const serializeAws_json1_1NestedFilters = (input, context) => {
    return {
        ...(input.Filters !== undefined &&
            input.Filters !== null && { Filters: serializeAws_json1_1FilterList(input.Filters, context) }),
        ...(input.NestedPropertyName !== undefined &&
            input.NestedPropertyName !== null && { NestedPropertyName: input.NestedPropertyName }),
    };
};
const serializeAws_json1_1NestedFiltersList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1NestedFilters(entry, context);
    });
};
const serializeAws_json1_1NetworkConfig = (input, context) => {
    return {
        ...(input.EnableInterContainerTrafficEncryption !== undefined &&
            input.EnableInterContainerTrafficEncryption !== null && {
            EnableInterContainerTrafficEncryption: input.EnableInterContainerTrafficEncryption,
        }),
        ...(input.EnableNetworkIsolation !== undefined &&
            input.EnableNetworkIsolation !== null && { EnableNetworkIsolation: input.EnableNetworkIsolation }),
        ...(input.VpcConfig !== undefined &&
            input.VpcConfig !== null && { VpcConfig: serializeAws_json1_1VpcConfig(input.VpcConfig, context) }),
    };
};
const serializeAws_json1_1NotebookInstanceAcceleratorTypes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1NotebookInstanceLifecycleConfigList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1NotebookInstanceLifecycleHook(entry, context);
    });
};
const serializeAws_json1_1NotebookInstanceLifecycleHook = (input, context) => {
    return {
        ...(input.Content !== undefined && input.Content !== null && { Content: input.Content }),
    };
};
const serializeAws_json1_1NotificationConfiguration = (input, context) => {
    return {
        ...(input.NotificationTopicArn !== undefined &&
            input.NotificationTopicArn !== null && { NotificationTopicArn: input.NotificationTopicArn }),
    };
};
const serializeAws_json1_1OfflineStoreConfig = (input, context) => {
    return {
        ...(input.DataCatalogConfig !== undefined &&
            input.DataCatalogConfig !== null && {
            DataCatalogConfig: serializeAws_json1_1DataCatalogConfig(input.DataCatalogConfig, context),
        }),
        ...(input.DisableGlueTableCreation !== undefined &&
            input.DisableGlueTableCreation !== null && { DisableGlueTableCreation: input.DisableGlueTableCreation }),
        ...(input.S3StorageConfig !== undefined &&
            input.S3StorageConfig !== null && {
            S3StorageConfig: serializeAws_json1_1S3StorageConfig(input.S3StorageConfig, context),
        }),
    };
};
const serializeAws_json1_1OidcConfig = (input, context) => {
    return {
        ...(input.AuthorizationEndpoint !== undefined &&
            input.AuthorizationEndpoint !== null && { AuthorizationEndpoint: input.AuthorizationEndpoint }),
        ...(input.ClientId !== undefined && input.ClientId !== null && { ClientId: input.ClientId }),
        ...(input.ClientSecret !== undefined && input.ClientSecret !== null && { ClientSecret: input.ClientSecret }),
        ...(input.Issuer !== undefined && input.Issuer !== null && { Issuer: input.Issuer }),
        ...(input.JwksUri !== undefined && input.JwksUri !== null && { JwksUri: input.JwksUri }),
        ...(input.LogoutEndpoint !== undefined &&
            input.LogoutEndpoint !== null && { LogoutEndpoint: input.LogoutEndpoint }),
        ...(input.TokenEndpoint !== undefined && input.TokenEndpoint !== null && { TokenEndpoint: input.TokenEndpoint }),
        ...(input.UserInfoEndpoint !== undefined &&
            input.UserInfoEndpoint !== null && { UserInfoEndpoint: input.UserInfoEndpoint }),
    };
};
const serializeAws_json1_1OidcMemberDefinition = (input, context) => {
    return {
        ...(input.Groups !== undefined &&
            input.Groups !== null && { Groups: serializeAws_json1_1Groups(input.Groups, context) }),
    };
};
const serializeAws_json1_1OnlineStoreConfig = (input, context) => {
    return {
        ...(input.EnableOnlineStore !== undefined &&
            input.EnableOnlineStore !== null && { EnableOnlineStore: input.EnableOnlineStore }),
        ...(input.SecurityConfig !== undefined &&
            input.SecurityConfig !== null && {
            SecurityConfig: serializeAws_json1_1OnlineStoreSecurityConfig(input.SecurityConfig, context),
        }),
    };
};
const serializeAws_json1_1OnlineStoreSecurityConfig = (input, context) => {
    return {
        ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
    };
};
const serializeAws_json1_1OutputConfig = (input, context) => {
    return {
        ...(input.CompilerOptions !== undefined &&
            input.CompilerOptions !== null && { CompilerOptions: input.CompilerOptions }),
        ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
        ...(input.S3OutputLocation !== undefined &&
            input.S3OutputLocation !== null && { S3OutputLocation: input.S3OutputLocation }),
        ...(input.TargetDevice !== undefined && input.TargetDevice !== null && { TargetDevice: input.TargetDevice }),
        ...(input.TargetPlatform !== undefined &&
            input.TargetPlatform !== null && {
            TargetPlatform: serializeAws_json1_1TargetPlatform(input.TargetPlatform, context),
        }),
    };
};
const serializeAws_json1_1OutputDataConfig = (input, context) => {
    return {
        ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
        ...(input.S3OutputPath !== undefined && input.S3OutputPath !== null && { S3OutputPath: input.S3OutputPath }),
    };
};
const serializeAws_json1_1Parameter = (input, context) => {
    return {
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
        ...(input.Value !== undefined && input.Value !== null && { Value: input.Value }),
    };
};
const serializeAws_json1_1ParameterList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1Parameter(entry, context);
    });
};
const serializeAws_json1_1ParameterRange = (input, context) => {
    return {
        ...(input.CategoricalParameterRangeSpecification !== undefined &&
            input.CategoricalParameterRangeSpecification !== null && {
            CategoricalParameterRangeSpecification: serializeAws_json1_1CategoricalParameterRangeSpecification(input.CategoricalParameterRangeSpecification, context),
        }),
        ...(input.ContinuousParameterRangeSpecification !== undefined &&
            input.ContinuousParameterRangeSpecification !== null && {
            ContinuousParameterRangeSpecification: serializeAws_json1_1ContinuousParameterRangeSpecification(input.ContinuousParameterRangeSpecification, context),
        }),
        ...(input.IntegerParameterRangeSpecification !== undefined &&
            input.IntegerParameterRangeSpecification !== null && {
            IntegerParameterRangeSpecification: serializeAws_json1_1IntegerParameterRangeSpecification(input.IntegerParameterRangeSpecification, context),
        }),
    };
};
const serializeAws_json1_1ParameterRanges = (input, context) => {
    return {
        ...(input.CategoricalParameterRanges !== undefined &&
            input.CategoricalParameterRanges !== null && {
            CategoricalParameterRanges: serializeAws_json1_1CategoricalParameterRanges(input.CategoricalParameterRanges, context),
        }),
        ...(input.ContinuousParameterRanges !== undefined &&
            input.ContinuousParameterRanges !== null && {
            ContinuousParameterRanges: serializeAws_json1_1ContinuousParameterRanges(input.ContinuousParameterRanges, context),
        }),
        ...(input.IntegerParameterRanges !== undefined &&
            input.IntegerParameterRanges !== null && {
            IntegerParameterRanges: serializeAws_json1_1IntegerParameterRanges(input.IntegerParameterRanges, context),
        }),
    };
};
const serializeAws_json1_1ParameterValues = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1ParentHyperParameterTuningJob = (input, context) => {
    return {
        ...(input.HyperParameterTuningJobName !== undefined &&
            input.HyperParameterTuningJobName !== null && { HyperParameterTuningJobName: input.HyperParameterTuningJobName }),
    };
};
const serializeAws_json1_1ParentHyperParameterTuningJobs = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1ParentHyperParameterTuningJob(entry, context);
    });
};
const serializeAws_json1_1ProcessingClusterConfig = (input, context) => {
    return {
        ...(input.InstanceCount !== undefined && input.InstanceCount !== null && { InstanceCount: input.InstanceCount }),
        ...(input.InstanceType !== undefined && input.InstanceType !== null && { InstanceType: input.InstanceType }),
        ...(input.VolumeKmsKeyId !== undefined &&
            input.VolumeKmsKeyId !== null && { VolumeKmsKeyId: input.VolumeKmsKeyId }),
        ...(input.VolumeSizeInGB !== undefined &&
            input.VolumeSizeInGB !== null && { VolumeSizeInGB: input.VolumeSizeInGB }),
    };
};
const serializeAws_json1_1ProcessingEnvironmentMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const serializeAws_json1_1ProcessingFeatureStoreOutput = (input, context) => {
    return {
        ...(input.FeatureGroupName !== undefined &&
            input.FeatureGroupName !== null && { FeatureGroupName: input.FeatureGroupName }),
    };
};
const serializeAws_json1_1ProcessingInput = (input, context) => {
    return {
        ...(input.AppManaged !== undefined && input.AppManaged !== null && { AppManaged: input.AppManaged }),
        ...(input.DatasetDefinition !== undefined &&
            input.DatasetDefinition !== null && {
            DatasetDefinition: serializeAws_json1_1DatasetDefinition(input.DatasetDefinition, context),
        }),
        ...(input.InputName !== undefined && input.InputName !== null && { InputName: input.InputName }),
        ...(input.S3Input !== undefined &&
            input.S3Input !== null && { S3Input: serializeAws_json1_1ProcessingS3Input(input.S3Input, context) }),
    };
};
const serializeAws_json1_1ProcessingInputs = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1ProcessingInput(entry, context);
    });
};
const serializeAws_json1_1ProcessingOutput = (input, context) => {
    return {
        ...(input.AppManaged !== undefined && input.AppManaged !== null && { AppManaged: input.AppManaged }),
        ...(input.FeatureStoreOutput !== undefined &&
            input.FeatureStoreOutput !== null && {
            FeatureStoreOutput: serializeAws_json1_1ProcessingFeatureStoreOutput(input.FeatureStoreOutput, context),
        }),
        ...(input.OutputName !== undefined && input.OutputName !== null && { OutputName: input.OutputName }),
        ...(input.S3Output !== undefined &&
            input.S3Output !== null && { S3Output: serializeAws_json1_1ProcessingS3Output(input.S3Output, context) }),
    };
};
const serializeAws_json1_1ProcessingOutputConfig = (input, context) => {
    return {
        ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
        ...(input.Outputs !== undefined &&
            input.Outputs !== null && { Outputs: serializeAws_json1_1ProcessingOutputs(input.Outputs, context) }),
    };
};
const serializeAws_json1_1ProcessingOutputs = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1ProcessingOutput(entry, context);
    });
};
const serializeAws_json1_1ProcessingResources = (input, context) => {
    return {
        ...(input.ClusterConfig !== undefined &&
            input.ClusterConfig !== null && {
            ClusterConfig: serializeAws_json1_1ProcessingClusterConfig(input.ClusterConfig, context),
        }),
    };
};
const serializeAws_json1_1ProcessingS3Input = (input, context) => {
    return {
        ...(input.LocalPath !== undefined && input.LocalPath !== null && { LocalPath: input.LocalPath }),
        ...(input.S3CompressionType !== undefined &&
            input.S3CompressionType !== null && { S3CompressionType: input.S3CompressionType }),
        ...(input.S3DataDistributionType !== undefined &&
            input.S3DataDistributionType !== null && { S3DataDistributionType: input.S3DataDistributionType }),
        ...(input.S3DataType !== undefined && input.S3DataType !== null && { S3DataType: input.S3DataType }),
        ...(input.S3InputMode !== undefined && input.S3InputMode !== null && { S3InputMode: input.S3InputMode }),
        ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
    };
};
const serializeAws_json1_1ProcessingS3Output = (input, context) => {
    return {
        ...(input.LocalPath !== undefined && input.LocalPath !== null && { LocalPath: input.LocalPath }),
        ...(input.S3UploadMode !== undefined && input.S3UploadMode !== null && { S3UploadMode: input.S3UploadMode }),
        ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
    };
};
const serializeAws_json1_1ProcessingStoppingCondition = (input, context) => {
    return {
        ...(input.MaxRuntimeInSeconds !== undefined &&
            input.MaxRuntimeInSeconds !== null && { MaxRuntimeInSeconds: input.MaxRuntimeInSeconds }),
    };
};
const serializeAws_json1_1ProductionVariant = (input, context) => {
    return {
        ...(input.AcceleratorType !== undefined &&
            input.AcceleratorType !== null && { AcceleratorType: input.AcceleratorType }),
        ...(input.CoreDumpConfig !== undefined &&
            input.CoreDumpConfig !== null && {
            CoreDumpConfig: serializeAws_json1_1ProductionVariantCoreDumpConfig(input.CoreDumpConfig, context),
        }),
        ...(input.InitialInstanceCount !== undefined &&
            input.InitialInstanceCount !== null && { InitialInstanceCount: input.InitialInstanceCount }),
        ...(input.InitialVariantWeight !== undefined &&
            input.InitialVariantWeight !== null && { InitialVariantWeight: input.InitialVariantWeight }),
        ...(input.InstanceType !== undefined && input.InstanceType !== null && { InstanceType: input.InstanceType }),
        ...(input.ModelName !== undefined && input.ModelName !== null && { ModelName: input.ModelName }),
        ...(input.VariantName !== undefined && input.VariantName !== null && { VariantName: input.VariantName }),
    };
};
const serializeAws_json1_1ProductionVariantCoreDumpConfig = (input, context) => {
    return {
        ...(input.DestinationS3Uri !== undefined &&
            input.DestinationS3Uri !== null && { DestinationS3Uri: input.DestinationS3Uri }),
        ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
    };
};
const serializeAws_json1_1ProductionVariantList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1ProductionVariant(entry, context);
    });
};
const serializeAws_json1_1ProfilerConfig = (input, context) => {
    return {
        ...(input.ProfilingIntervalInMilliseconds !== undefined &&
            input.ProfilingIntervalInMilliseconds !== null && {
            ProfilingIntervalInMilliseconds: input.ProfilingIntervalInMilliseconds,
        }),
        ...(input.ProfilingParameters !== undefined &&
            input.ProfilingParameters !== null && {
            ProfilingParameters: serializeAws_json1_1ProfilingParameters(input.ProfilingParameters, context),
        }),
        ...(input.S3OutputPath !== undefined && input.S3OutputPath !== null && { S3OutputPath: input.S3OutputPath }),
    };
};
const serializeAws_json1_1ProfilerConfigForUpdate = (input, context) => {
    return {
        ...(input.DisableProfiler !== undefined &&
            input.DisableProfiler !== null && { DisableProfiler: input.DisableProfiler }),
        ...(input.ProfilingIntervalInMilliseconds !== undefined &&
            input.ProfilingIntervalInMilliseconds !== null && {
            ProfilingIntervalInMilliseconds: input.ProfilingIntervalInMilliseconds,
        }),
        ...(input.ProfilingParameters !== undefined &&
            input.ProfilingParameters !== null && {
            ProfilingParameters: serializeAws_json1_1ProfilingParameters(input.ProfilingParameters, context),
        }),
        ...(input.S3OutputPath !== undefined && input.S3OutputPath !== null && { S3OutputPath: input.S3OutputPath }),
    };
};
const serializeAws_json1_1ProfilerRuleConfiguration = (input, context) => {
    return {
        ...(input.InstanceType !== undefined && input.InstanceType !== null && { InstanceType: input.InstanceType }),
        ...(input.LocalPath !== undefined && input.LocalPath !== null && { LocalPath: input.LocalPath }),
        ...(input.RuleConfigurationName !== undefined &&
            input.RuleConfigurationName !== null && { RuleConfigurationName: input.RuleConfigurationName }),
        ...(input.RuleEvaluatorImage !== undefined &&
            input.RuleEvaluatorImage !== null && { RuleEvaluatorImage: input.RuleEvaluatorImage }),
        ...(input.RuleParameters !== undefined &&
            input.RuleParameters !== null && {
            RuleParameters: serializeAws_json1_1RuleParameters(input.RuleParameters, context),
        }),
        ...(input.S3OutputPath !== undefined && input.S3OutputPath !== null && { S3OutputPath: input.S3OutputPath }),
        ...(input.VolumeSizeInGB !== undefined &&
            input.VolumeSizeInGB !== null && { VolumeSizeInGB: input.VolumeSizeInGB }),
    };
};
const serializeAws_json1_1ProfilerRuleConfigurations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1ProfilerRuleConfiguration(entry, context);
    });
};
const serializeAws_json1_1ProfilingParameters = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const serializeAws_json1_1PropertyNameQuery = (input, context) => {
    return {
        ...(input.PropertyNameHint !== undefined &&
            input.PropertyNameHint !== null && { PropertyNameHint: input.PropertyNameHint }),
    };
};
const serializeAws_json1_1ProvisioningParameter = (input, context) => {
    return {
        ...(input.Key !== undefined && input.Key !== null && { Key: input.Key }),
        ...(input.Value !== undefined && input.Value !== null && { Value: input.Value }),
    };
};
const serializeAws_json1_1ProvisioningParameters = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1ProvisioningParameter(entry, context);
    });
};
const serializeAws_json1_1PublicWorkforceTaskPrice = (input, context) => {
    return {
        ...(input.AmountInUsd !== undefined &&
            input.AmountInUsd !== null && { AmountInUsd: serializeAws_json1_1USD(input.AmountInUsd, context) }),
    };
};
const serializeAws_json1_1PutModelPackageGroupPolicyInput = (input, context) => {
    return {
        ...(input.ModelPackageGroupName !== undefined &&
            input.ModelPackageGroupName !== null && { ModelPackageGroupName: input.ModelPackageGroupName }),
        ...(input.ResourcePolicy !== undefined &&
            input.ResourcePolicy !== null && { ResourcePolicy: input.ResourcePolicy }),
    };
};
const serializeAws_json1_1RealtimeInferenceInstanceTypes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1RedshiftDatasetDefinition = (input, context) => {
    return {
        ...(input.ClusterId !== undefined && input.ClusterId !== null && { ClusterId: input.ClusterId }),
        ...(input.ClusterRoleArn !== undefined &&
            input.ClusterRoleArn !== null && { ClusterRoleArn: input.ClusterRoleArn }),
        ...(input.Database !== undefined && input.Database !== null && { Database: input.Database }),
        ...(input.DbUser !== undefined && input.DbUser !== null && { DbUser: input.DbUser }),
        ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
        ...(input.OutputCompression !== undefined &&
            input.OutputCompression !== null && { OutputCompression: input.OutputCompression }),
        ...(input.OutputFormat !== undefined && input.OutputFormat !== null && { OutputFormat: input.OutputFormat }),
        ...(input.OutputS3Uri !== undefined && input.OutputS3Uri !== null && { OutputS3Uri: input.OutputS3Uri }),
        ...(input.QueryString !== undefined && input.QueryString !== null && { QueryString: input.QueryString }),
    };
};
const serializeAws_json1_1RegisterDevicesRequest = (input, context) => {
    return {
        ...(input.DeviceFleetName !== undefined &&
            input.DeviceFleetName !== null && { DeviceFleetName: input.DeviceFleetName }),
        ...(input.Devices !== undefined &&
            input.Devices !== null && { Devices: serializeAws_json1_1Devices(input.Devices, context) }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1RenderableTask = (input, context) => {
    return {
        ...(input.Input !== undefined && input.Input !== null && { Input: input.Input }),
    };
};
const serializeAws_json1_1RenderUiTemplateRequest = (input, context) => {
    return {
        ...(input.HumanTaskUiArn !== undefined &&
            input.HumanTaskUiArn !== null && { HumanTaskUiArn: input.HumanTaskUiArn }),
        ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
        ...(input.Task !== undefined &&
            input.Task !== null && { Task: serializeAws_json1_1RenderableTask(input.Task, context) }),
        ...(input.UiTemplate !== undefined &&
            input.UiTemplate !== null && { UiTemplate: serializeAws_json1_1UiTemplate(input.UiTemplate, context) }),
    };
};
const serializeAws_json1_1RepositoryAuthConfig = (input, context) => {
    return {
        ...(input.RepositoryCredentialsProviderArn !== undefined &&
            input.RepositoryCredentialsProviderArn !== null && {
            RepositoryCredentialsProviderArn: input.RepositoryCredentialsProviderArn,
        }),
    };
};
const serializeAws_json1_1ResourceConfig = (input, context) => {
    return {
        ...(input.InstanceCount !== undefined && input.InstanceCount !== null && { InstanceCount: input.InstanceCount }),
        ...(input.InstanceType !== undefined && input.InstanceType !== null && { InstanceType: input.InstanceType }),
        ...(input.VolumeKmsKeyId !== undefined &&
            input.VolumeKmsKeyId !== null && { VolumeKmsKeyId: input.VolumeKmsKeyId }),
        ...(input.VolumeSizeInGB !== undefined &&
            input.VolumeSizeInGB !== null && { VolumeSizeInGB: input.VolumeSizeInGB }),
    };
};
const serializeAws_json1_1ResourceLimits = (input, context) => {
    return {
        ...(input.MaxNumberOfTrainingJobs !== undefined &&
            input.MaxNumberOfTrainingJobs !== null && { MaxNumberOfTrainingJobs: input.MaxNumberOfTrainingJobs }),
        ...(input.MaxParallelTrainingJobs !== undefined &&
            input.MaxParallelTrainingJobs !== null && { MaxParallelTrainingJobs: input.MaxParallelTrainingJobs }),
    };
};
const serializeAws_json1_1ResourceSpec = (input, context) => {
    return {
        ...(input.InstanceType !== undefined && input.InstanceType !== null && { InstanceType: input.InstanceType }),
        ...(input.SageMakerImageArn !== undefined &&
            input.SageMakerImageArn !== null && { SageMakerImageArn: input.SageMakerImageArn }),
        ...(input.SageMakerImageVersionArn !== undefined &&
            input.SageMakerImageVersionArn !== null && { SageMakerImageVersionArn: input.SageMakerImageVersionArn }),
    };
};
const serializeAws_json1_1ResponseMIMETypes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1RetentionPolicy = (input, context) => {
    return {
        ...(input.HomeEfsFileSystem !== undefined &&
            input.HomeEfsFileSystem !== null && { HomeEfsFileSystem: input.HomeEfsFileSystem }),
    };
};
const serializeAws_json1_1RetryStrategy = (input, context) => {
    return {
        ...(input.MaximumRetryAttempts !== undefined &&
            input.MaximumRetryAttempts !== null && { MaximumRetryAttempts: input.MaximumRetryAttempts }),
    };
};
const serializeAws_json1_1RuleParameters = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const serializeAws_json1_1S3DataSource = (input, context) => {
    return {
        ...(input.AttributeNames !== undefined &&
            input.AttributeNames !== null && {
            AttributeNames: serializeAws_json1_1AttributeNames(input.AttributeNames, context),
        }),
        ...(input.S3DataDistributionType !== undefined &&
            input.S3DataDistributionType !== null && { S3DataDistributionType: input.S3DataDistributionType }),
        ...(input.S3DataType !== undefined && input.S3DataType !== null && { S3DataType: input.S3DataType }),
        ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
    };
};
const serializeAws_json1_1S3StorageConfig = (input, context) => {
    return {
        ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
        ...(input.ResolvedOutputS3Uri !== undefined &&
            input.ResolvedOutputS3Uri !== null && { ResolvedOutputS3Uri: input.ResolvedOutputS3Uri }),
        ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
    };
};
const serializeAws_json1_1ScheduleConfig = (input, context) => {
    return {
        ...(input.ScheduleExpression !== undefined &&
            input.ScheduleExpression !== null && { ScheduleExpression: input.ScheduleExpression }),
    };
};
const serializeAws_json1_1SearchExpression = (input, context) => {
    return {
        ...(input.Filters !== undefined &&
            input.Filters !== null && { Filters: serializeAws_json1_1FilterList(input.Filters, context) }),
        ...(input.NestedFilters !== undefined &&
            input.NestedFilters !== null && {
            NestedFilters: serializeAws_json1_1NestedFiltersList(input.NestedFilters, context),
        }),
        ...(input.Operator !== undefined && input.Operator !== null && { Operator: input.Operator }),
        ...(input.SubExpressions !== undefined &&
            input.SubExpressions !== null && {
            SubExpressions: serializeAws_json1_1SearchExpressionList(input.SubExpressions, context),
        }),
    };
};
const serializeAws_json1_1SearchExpressionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1SearchExpression(entry, context);
    });
};
const serializeAws_json1_1SearchRequest = (input, context) => {
    return {
        ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
        ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
        ...(input.Resource !== undefined && input.Resource !== null && { Resource: input.Resource }),
        ...(input.SearchExpression !== undefined &&
            input.SearchExpression !== null && {
            SearchExpression: serializeAws_json1_1SearchExpression(input.SearchExpression, context),
        }),
        ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
        ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1SecurityGroupIds = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1ServiceCatalogProvisioningDetails = (input, context) => {
    return {
        ...(input.PathId !== undefined && input.PathId !== null && { PathId: input.PathId }),
        ...(input.ProductId !== undefined && input.ProductId !== null && { ProductId: input.ProductId }),
        ...(input.ProvisioningArtifactId !== undefined &&
            input.ProvisioningArtifactId !== null && { ProvisioningArtifactId: input.ProvisioningArtifactId }),
        ...(input.ProvisioningParameters !== undefined &&
            input.ProvisioningParameters !== null && {
            ProvisioningParameters: serializeAws_json1_1ProvisioningParameters(input.ProvisioningParameters, context),
        }),
    };
};
const serializeAws_json1_1SharingSettings = (input, context) => {
    return {
        ...(input.NotebookOutputOption !== undefined &&
            input.NotebookOutputOption !== null && { NotebookOutputOption: input.NotebookOutputOption }),
        ...(input.S3KmsKeyId !== undefined && input.S3KmsKeyId !== null && { S3KmsKeyId: input.S3KmsKeyId }),
        ...(input.S3OutputPath !== undefined && input.S3OutputPath !== null && { S3OutputPath: input.S3OutputPath }),
    };
};
const serializeAws_json1_1ShuffleConfig = (input, context) => {
    return {
        ...(input.Seed !== undefined && input.Seed !== null && { Seed: input.Seed }),
    };
};
const serializeAws_json1_1SourceAlgorithm = (input, context) => {
    return {
        ...(input.AlgorithmName !== undefined && input.AlgorithmName !== null && { AlgorithmName: input.AlgorithmName }),
        ...(input.ModelDataUrl !== undefined && input.ModelDataUrl !== null && { ModelDataUrl: input.ModelDataUrl }),
    };
};
const serializeAws_json1_1SourceAlgorithmList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1SourceAlgorithm(entry, context);
    });
};
const serializeAws_json1_1SourceAlgorithmSpecification = (input, context) => {
    return {
        ...(input.SourceAlgorithms !== undefined &&
            input.SourceAlgorithms !== null && {
            SourceAlgorithms: serializeAws_json1_1SourceAlgorithmList(input.SourceAlgorithms, context),
        }),
    };
};
const serializeAws_json1_1SourceIpConfig = (input, context) => {
    return {
        ...(input.Cidrs !== undefined &&
            input.Cidrs !== null && { Cidrs: serializeAws_json1_1Cidrs(input.Cidrs, context) }),
    };
};
const serializeAws_json1_1StartMonitoringScheduleRequest = (input, context) => {
    return {
        ...(input.MonitoringScheduleName !== undefined &&
            input.MonitoringScheduleName !== null && { MonitoringScheduleName: input.MonitoringScheduleName }),
    };
};
const serializeAws_json1_1StartNotebookInstanceInput = (input, context) => {
    return {
        ...(input.NotebookInstanceName !== undefined &&
            input.NotebookInstanceName !== null && { NotebookInstanceName: input.NotebookInstanceName }),
    };
};
const serializeAws_json1_1StartPipelineExecutionRequest = (input, context) => {
    var _a;
    return {
        ClientRequestToken: (_a = input.ClientRequestToken) !== null && _a !== void 0 ? _a : uuid_1.v4(),
        ...(input.PipelineExecutionDescription !== undefined &&
            input.PipelineExecutionDescription !== null && {
            PipelineExecutionDescription: input.PipelineExecutionDescription,
        }),
        ...(input.PipelineExecutionDisplayName !== undefined &&
            input.PipelineExecutionDisplayName !== null && {
            PipelineExecutionDisplayName: input.PipelineExecutionDisplayName,
        }),
        ...(input.PipelineName !== undefined && input.PipelineName !== null && { PipelineName: input.PipelineName }),
        ...(input.PipelineParameters !== undefined &&
            input.PipelineParameters !== null && {
            PipelineParameters: serializeAws_json1_1ParameterList(input.PipelineParameters, context),
        }),
    };
};
const serializeAws_json1_1StopAutoMLJobRequest = (input, context) => {
    return {
        ...(input.AutoMLJobName !== undefined && input.AutoMLJobName !== null && { AutoMLJobName: input.AutoMLJobName }),
    };
};
const serializeAws_json1_1StopCompilationJobRequest = (input, context) => {
    return {
        ...(input.CompilationJobName !== undefined &&
            input.CompilationJobName !== null && { CompilationJobName: input.CompilationJobName }),
    };
};
const serializeAws_json1_1StopEdgePackagingJobRequest = (input, context) => {
    return {
        ...(input.EdgePackagingJobName !== undefined &&
            input.EdgePackagingJobName !== null && { EdgePackagingJobName: input.EdgePackagingJobName }),
    };
};
const serializeAws_json1_1StopHyperParameterTuningJobRequest = (input, context) => {
    return {
        ...(input.HyperParameterTuningJobName !== undefined &&
            input.HyperParameterTuningJobName !== null && { HyperParameterTuningJobName: input.HyperParameterTuningJobName }),
    };
};
const serializeAws_json1_1StopLabelingJobRequest = (input, context) => {
    return {
        ...(input.LabelingJobName !== undefined &&
            input.LabelingJobName !== null && { LabelingJobName: input.LabelingJobName }),
    };
};
const serializeAws_json1_1StopMonitoringScheduleRequest = (input, context) => {
    return {
        ...(input.MonitoringScheduleName !== undefined &&
            input.MonitoringScheduleName !== null && { MonitoringScheduleName: input.MonitoringScheduleName }),
    };
};
const serializeAws_json1_1StopNotebookInstanceInput = (input, context) => {
    return {
        ...(input.NotebookInstanceName !== undefined &&
            input.NotebookInstanceName !== null && { NotebookInstanceName: input.NotebookInstanceName }),
    };
};
const serializeAws_json1_1StoppingCondition = (input, context) => {
    return {
        ...(input.MaxRuntimeInSeconds !== undefined &&
            input.MaxRuntimeInSeconds !== null && { MaxRuntimeInSeconds: input.MaxRuntimeInSeconds }),
        ...(input.MaxWaitTimeInSeconds !== undefined &&
            input.MaxWaitTimeInSeconds !== null && { MaxWaitTimeInSeconds: input.MaxWaitTimeInSeconds }),
    };
};
const serializeAws_json1_1StopPipelineExecutionRequest = (input, context) => {
    var _a;
    return {
        ClientRequestToken: (_a = input.ClientRequestToken) !== null && _a !== void 0 ? _a : uuid_1.v4(),
        ...(input.PipelineExecutionArn !== undefined &&
            input.PipelineExecutionArn !== null && { PipelineExecutionArn: input.PipelineExecutionArn }),
    };
};
const serializeAws_json1_1StopProcessingJobRequest = (input, context) => {
    return {
        ...(input.ProcessingJobName !== undefined &&
            input.ProcessingJobName !== null && { ProcessingJobName: input.ProcessingJobName }),
    };
};
const serializeAws_json1_1StopTrainingJobRequest = (input, context) => {
    return {
        ...(input.TrainingJobName !== undefined &&
            input.TrainingJobName !== null && { TrainingJobName: input.TrainingJobName }),
    };
};
const serializeAws_json1_1StopTransformJobRequest = (input, context) => {
    return {
        ...(input.TransformJobName !== undefined &&
            input.TransformJobName !== null && { TransformJobName: input.TransformJobName }),
    };
};
const serializeAws_json1_1Subnets = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1SuggestionQuery = (input, context) => {
    return {
        ...(input.PropertyNameQuery !== undefined &&
            input.PropertyNameQuery !== null && {
            PropertyNameQuery: serializeAws_json1_1PropertyNameQuery(input.PropertyNameQuery, context),
        }),
    };
};
const serializeAws_json1_1Tag = (input, context) => {
    return {
        ...(input.Key !== undefined && input.Key !== null && { Key: input.Key }),
        ...(input.Value !== undefined && input.Value !== null && { Value: input.Value }),
    };
};
const serializeAws_json1_1TagKeyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1TagList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1Tag(entry, context);
    });
};
const serializeAws_json1_1TargetPlatform = (input, context) => {
    return {
        ...(input.Accelerator !== undefined && input.Accelerator !== null && { Accelerator: input.Accelerator }),
        ...(input.Arch !== undefined && input.Arch !== null && { Arch: input.Arch }),
        ...(input.Os !== undefined && input.Os !== null && { Os: input.Os }),
    };
};
const serializeAws_json1_1TaskKeywords = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1TensorBoardAppSettings = (input, context) => {
    return {
        ...(input.DefaultResourceSpec !== undefined &&
            input.DefaultResourceSpec !== null && {
            DefaultResourceSpec: serializeAws_json1_1ResourceSpec(input.DefaultResourceSpec, context),
        }),
    };
};
const serializeAws_json1_1TensorBoardOutputConfig = (input, context) => {
    return {
        ...(input.LocalPath !== undefined && input.LocalPath !== null && { LocalPath: input.LocalPath }),
        ...(input.S3OutputPath !== undefined && input.S3OutputPath !== null && { S3OutputPath: input.S3OutputPath }),
    };
};
const serializeAws_json1_1TrafficRoutingConfig = (input, context) => {
    return {
        ...(input.CanarySize !== undefined &&
            input.CanarySize !== null && { CanarySize: serializeAws_json1_1CapacitySize(input.CanarySize, context) }),
        ...(input.Type !== undefined && input.Type !== null && { Type: input.Type }),
        ...(input.WaitIntervalInSeconds !== undefined &&
            input.WaitIntervalInSeconds !== null && { WaitIntervalInSeconds: input.WaitIntervalInSeconds }),
    };
};
const serializeAws_json1_1TrainingEnvironmentMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const serializeAws_json1_1TrainingInstanceTypes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1TrainingJobDefinition = (input, context) => {
    return {
        ...(input.HyperParameters !== undefined &&
            input.HyperParameters !== null && {
            HyperParameters: serializeAws_json1_1HyperParameters(input.HyperParameters, context),
        }),
        ...(input.InputDataConfig !== undefined &&
            input.InputDataConfig !== null && {
            InputDataConfig: serializeAws_json1_1InputDataConfig(input.InputDataConfig, context),
        }),
        ...(input.OutputDataConfig !== undefined &&
            input.OutputDataConfig !== null && {
            OutputDataConfig: serializeAws_json1_1OutputDataConfig(input.OutputDataConfig, context),
        }),
        ...(input.ResourceConfig !== undefined &&
            input.ResourceConfig !== null && {
            ResourceConfig: serializeAws_json1_1ResourceConfig(input.ResourceConfig, context),
        }),
        ...(input.StoppingCondition !== undefined &&
            input.StoppingCondition !== null && {
            StoppingCondition: serializeAws_json1_1StoppingCondition(input.StoppingCondition, context),
        }),
        ...(input.TrainingInputMode !== undefined &&
            input.TrainingInputMode !== null && { TrainingInputMode: input.TrainingInputMode }),
    };
};
const serializeAws_json1_1TrainingSpecification = (input, context) => {
    return {
        ...(input.MetricDefinitions !== undefined &&
            input.MetricDefinitions !== null && {
            MetricDefinitions: serializeAws_json1_1MetricDefinitionList(input.MetricDefinitions, context),
        }),
        ...(input.SupportedHyperParameters !== undefined &&
            input.SupportedHyperParameters !== null && {
            SupportedHyperParameters: serializeAws_json1_1HyperParameterSpecifications(input.SupportedHyperParameters, context),
        }),
        ...(input.SupportedTrainingInstanceTypes !== undefined &&
            input.SupportedTrainingInstanceTypes !== null && {
            SupportedTrainingInstanceTypes: serializeAws_json1_1TrainingInstanceTypes(input.SupportedTrainingInstanceTypes, context),
        }),
        ...(input.SupportedTuningJobObjectiveMetrics !== undefined &&
            input.SupportedTuningJobObjectiveMetrics !== null && {
            SupportedTuningJobObjectiveMetrics: serializeAws_json1_1HyperParameterTuningJobObjectives(input.SupportedTuningJobObjectiveMetrics, context),
        }),
        ...(input.SupportsDistributedTraining !== undefined &&
            input.SupportsDistributedTraining !== null && { SupportsDistributedTraining: input.SupportsDistributedTraining }),
        ...(input.TrainingChannels !== undefined &&
            input.TrainingChannels !== null && {
            TrainingChannels: serializeAws_json1_1ChannelSpecifications(input.TrainingChannels, context),
        }),
        ...(input.TrainingImage !== undefined && input.TrainingImage !== null && { TrainingImage: input.TrainingImage }),
        ...(input.TrainingImageDigest !== undefined &&
            input.TrainingImageDigest !== null && { TrainingImageDigest: input.TrainingImageDigest }),
    };
};
const serializeAws_json1_1TransformDataSource = (input, context) => {
    return {
        ...(input.S3DataSource !== undefined &&
            input.S3DataSource !== null && {
            S3DataSource: serializeAws_json1_1TransformS3DataSource(input.S3DataSource, context),
        }),
    };
};
const serializeAws_json1_1TransformEnvironmentMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const serializeAws_json1_1TransformInput = (input, context) => {
    return {
        ...(input.CompressionType !== undefined &&
            input.CompressionType !== null && { CompressionType: input.CompressionType }),
        ...(input.ContentType !== undefined && input.ContentType !== null && { ContentType: input.ContentType }),
        ...(input.DataSource !== undefined &&
            input.DataSource !== null && { DataSource: serializeAws_json1_1TransformDataSource(input.DataSource, context) }),
        ...(input.SplitType !== undefined && input.SplitType !== null && { SplitType: input.SplitType }),
    };
};
const serializeAws_json1_1TransformInstanceTypes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const serializeAws_json1_1TransformJobDefinition = (input, context) => {
    return {
        ...(input.BatchStrategy !== undefined && input.BatchStrategy !== null && { BatchStrategy: input.BatchStrategy }),
        ...(input.Environment !== undefined &&
            input.Environment !== null && {
            Environment: serializeAws_json1_1TransformEnvironmentMap(input.Environment, context),
        }),
        ...(input.MaxConcurrentTransforms !== undefined &&
            input.MaxConcurrentTransforms !== null && { MaxConcurrentTransforms: input.MaxConcurrentTransforms }),
        ...(input.MaxPayloadInMB !== undefined &&
            input.MaxPayloadInMB !== null && { MaxPayloadInMB: input.MaxPayloadInMB }),
        ...(input.TransformInput !== undefined &&
            input.TransformInput !== null && {
            TransformInput: serializeAws_json1_1TransformInput(input.TransformInput, context),
        }),
        ...(input.TransformOutput !== undefined &&
            input.TransformOutput !== null && {
            TransformOutput: serializeAws_json1_1TransformOutput(input.TransformOutput, context),
        }),
        ...(input.TransformResources !== undefined &&
            input.TransformResources !== null && {
            TransformResources: serializeAws_json1_1TransformResources(input.TransformResources, context),
        }),
    };
};
const serializeAws_json1_1TransformOutput = (input, context) => {
    return {
        ...(input.Accept !== undefined && input.Accept !== null && { Accept: input.Accept }),
        ...(input.AssembleWith !== undefined && input.AssembleWith !== null && { AssembleWith: input.AssembleWith }),
        ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
        ...(input.S3OutputPath !== undefined && input.S3OutputPath !== null && { S3OutputPath: input.S3OutputPath }),
    };
};
const serializeAws_json1_1TransformResources = (input, context) => {
    return {
        ...(input.InstanceCount !== undefined && input.InstanceCount !== null && { InstanceCount: input.InstanceCount }),
        ...(input.InstanceType !== undefined && input.InstanceType !== null && { InstanceType: input.InstanceType }),
        ...(input.VolumeKmsKeyId !== undefined &&
            input.VolumeKmsKeyId !== null && { VolumeKmsKeyId: input.VolumeKmsKeyId }),
    };
};
const serializeAws_json1_1TransformS3DataSource = (input, context) => {
    return {
        ...(input.S3DataType !== undefined && input.S3DataType !== null && { S3DataType: input.S3DataType }),
        ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
    };
};
const serializeAws_json1_1TrialComponentArtifact = (input, context) => {
    return {
        ...(input.MediaType !== undefined && input.MediaType !== null && { MediaType: input.MediaType }),
        ...(input.Value !== undefined && input.Value !== null && { Value: input.Value }),
    };
};
const serializeAws_json1_1TrialComponentArtifacts = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: serializeAws_json1_1TrialComponentArtifact(value, context),
        };
    }, {});
};
const serializeAws_json1_1TrialComponentParameters = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: serializeAws_json1_1TrialComponentParameterValue(value, context),
        };
    }, {});
};
const serializeAws_json1_1TrialComponentParameterValue = (input, context) => {
    return models_1_1.TrialComponentParameterValue.visit(input, {
        NumberValue: (value) => ({ NumberValue: value }),
        StringValue: (value) => ({ StringValue: value }),
        _: (name, value) => ({ name: value }),
    });
};
const serializeAws_json1_1TrialComponentStatus = (input, context) => {
    return {
        ...(input.Message !== undefined && input.Message !== null && { Message: input.Message }),
        ...(input.PrimaryStatus !== undefined && input.PrimaryStatus !== null && { PrimaryStatus: input.PrimaryStatus }),
    };
};
const serializeAws_json1_1TuningJobCompletionCriteria = (input, context) => {
    return {
        ...(input.TargetObjectiveMetricValue !== undefined &&
            input.TargetObjectiveMetricValue !== null && { TargetObjectiveMetricValue: input.TargetObjectiveMetricValue }),
    };
};
const serializeAws_json1_1UiConfig = (input, context) => {
    return {
        ...(input.HumanTaskUiArn !== undefined &&
            input.HumanTaskUiArn !== null && { HumanTaskUiArn: input.HumanTaskUiArn }),
        ...(input.UiTemplateS3Uri !== undefined &&
            input.UiTemplateS3Uri !== null && { UiTemplateS3Uri: input.UiTemplateS3Uri }),
    };
};
const serializeAws_json1_1UiTemplate = (input, context) => {
    return {
        ...(input.Content !== undefined && input.Content !== null && { Content: input.Content }),
    };
};
const serializeAws_json1_1UpdateActionRequest = (input, context) => {
    return {
        ...(input.ActionName !== undefined && input.ActionName !== null && { ActionName: input.ActionName }),
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.Properties !== undefined &&
            input.Properties !== null && {
            Properties: serializeAws_json1_1LineageEntityParameters(input.Properties, context),
        }),
        ...(input.PropertiesToRemove !== undefined &&
            input.PropertiesToRemove !== null && {
            PropertiesToRemove: serializeAws_json1_1ListLineageEntityParameterKey(input.PropertiesToRemove, context),
        }),
        ...(input.Status !== undefined && input.Status !== null && { Status: input.Status }),
    };
};
const serializeAws_json1_1UpdateAppImageConfigRequest = (input, context) => {
    return {
        ...(input.AppImageConfigName !== undefined &&
            input.AppImageConfigName !== null && { AppImageConfigName: input.AppImageConfigName }),
        ...(input.KernelGatewayImageConfig !== undefined &&
            input.KernelGatewayImageConfig !== null && {
            KernelGatewayImageConfig: serializeAws_json1_1KernelGatewayImageConfig(input.KernelGatewayImageConfig, context),
        }),
    };
};
const serializeAws_json1_1UpdateArtifactRequest = (input, context) => {
    return {
        ...(input.ArtifactArn !== undefined && input.ArtifactArn !== null && { ArtifactArn: input.ArtifactArn }),
        ...(input.ArtifactName !== undefined && input.ArtifactName !== null && { ArtifactName: input.ArtifactName }),
        ...(input.Properties !== undefined &&
            input.Properties !== null && {
            Properties: serializeAws_json1_1LineageEntityParameters(input.Properties, context),
        }),
        ...(input.PropertiesToRemove !== undefined &&
            input.PropertiesToRemove !== null && {
            PropertiesToRemove: serializeAws_json1_1ListLineageEntityParameterKey(input.PropertiesToRemove, context),
        }),
    };
};
const serializeAws_json1_1UpdateCodeRepositoryInput = (input, context) => {
    return {
        ...(input.CodeRepositoryName !== undefined &&
            input.CodeRepositoryName !== null && { CodeRepositoryName: input.CodeRepositoryName }),
        ...(input.GitConfig !== undefined &&
            input.GitConfig !== null && { GitConfig: serializeAws_json1_1GitConfigForUpdate(input.GitConfig, context) }),
    };
};
const serializeAws_json1_1UpdateContextRequest = (input, context) => {
    return {
        ...(input.ContextName !== undefined && input.ContextName !== null && { ContextName: input.ContextName }),
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.Properties !== undefined &&
            input.Properties !== null && {
            Properties: serializeAws_json1_1LineageEntityParameters(input.Properties, context),
        }),
        ...(input.PropertiesToRemove !== undefined &&
            input.PropertiesToRemove !== null && {
            PropertiesToRemove: serializeAws_json1_1ListLineageEntityParameterKey(input.PropertiesToRemove, context),
        }),
    };
};
const serializeAws_json1_1UpdateDeviceFleetRequest = (input, context) => {
    return {
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.DeviceFleetName !== undefined &&
            input.DeviceFleetName !== null && { DeviceFleetName: input.DeviceFleetName }),
        ...(input.OutputConfig !== undefined &&
            input.OutputConfig !== null && {
            OutputConfig: serializeAws_json1_1EdgeOutputConfig(input.OutputConfig, context),
        }),
        ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
    };
};
const serializeAws_json1_1UpdateDevicesRequest = (input, context) => {
    return {
        ...(input.DeviceFleetName !== undefined &&
            input.DeviceFleetName !== null && { DeviceFleetName: input.DeviceFleetName }),
        ...(input.Devices !== undefined &&
            input.Devices !== null && { Devices: serializeAws_json1_1Devices(input.Devices, context) }),
    };
};
const serializeAws_json1_1UpdateDomainRequest = (input, context) => {
    return {
        ...(input.DefaultUserSettings !== undefined &&
            input.DefaultUserSettings !== null && {
            DefaultUserSettings: serializeAws_json1_1UserSettings(input.DefaultUserSettings, context),
        }),
        ...(input.DomainId !== undefined && input.DomainId !== null && { DomainId: input.DomainId }),
    };
};
const serializeAws_json1_1UpdateEndpointInput = (input, context) => {
    return {
        ...(input.DeploymentConfig !== undefined &&
            input.DeploymentConfig !== null && {
            DeploymentConfig: serializeAws_json1_1DeploymentConfig(input.DeploymentConfig, context),
        }),
        ...(input.EndpointConfigName !== undefined &&
            input.EndpointConfigName !== null && { EndpointConfigName: input.EndpointConfigName }),
        ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
        ...(input.ExcludeRetainedVariantProperties !== undefined &&
            input.ExcludeRetainedVariantProperties !== null && {
            ExcludeRetainedVariantProperties: serializeAws_json1_1VariantPropertyList(input.ExcludeRetainedVariantProperties, context),
        }),
        ...(input.RetainAllVariantProperties !== undefined &&
            input.RetainAllVariantProperties !== null && { RetainAllVariantProperties: input.RetainAllVariantProperties }),
    };
};
const serializeAws_json1_1UpdateEndpointWeightsAndCapacitiesInput = (input, context) => {
    return {
        ...(input.DesiredWeightsAndCapacities !== undefined &&
            input.DesiredWeightsAndCapacities !== null && {
            DesiredWeightsAndCapacities: serializeAws_json1_1DesiredWeightAndCapacityList(input.DesiredWeightsAndCapacities, context),
        }),
        ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
    };
};
const serializeAws_json1_1UpdateExperimentRequest = (input, context) => {
    return {
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
        ...(input.ExperimentName !== undefined &&
            input.ExperimentName !== null && { ExperimentName: input.ExperimentName }),
    };
};
const serializeAws_json1_1UpdateImageRequest = (input, context) => {
    return {
        ...(input.DeleteProperties !== undefined &&
            input.DeleteProperties !== null && {
            DeleteProperties: serializeAws_json1_1ImageDeletePropertyList(input.DeleteProperties, context),
        }),
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
        ...(input.ImageName !== undefined && input.ImageName !== null && { ImageName: input.ImageName }),
        ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
    };
};
const serializeAws_json1_1UpdateModelPackageInput = (input, context) => {
    return {
        ...(input.ApprovalDescription !== undefined &&
            input.ApprovalDescription !== null && { ApprovalDescription: input.ApprovalDescription }),
        ...(input.ModelApprovalStatus !== undefined &&
            input.ModelApprovalStatus !== null && { ModelApprovalStatus: input.ModelApprovalStatus }),
        ...(input.ModelPackageArn !== undefined &&
            input.ModelPackageArn !== null && { ModelPackageArn: input.ModelPackageArn }),
    };
};
const serializeAws_json1_1UpdateMonitoringScheduleRequest = (input, context) => {
    return {
        ...(input.MonitoringScheduleConfig !== undefined &&
            input.MonitoringScheduleConfig !== null && {
            MonitoringScheduleConfig: serializeAws_json1_1MonitoringScheduleConfig(input.MonitoringScheduleConfig, context),
        }),
        ...(input.MonitoringScheduleName !== undefined &&
            input.MonitoringScheduleName !== null && { MonitoringScheduleName: input.MonitoringScheduleName }),
    };
};
const serializeAws_json1_1UpdateNotebookInstanceInput = (input, context) => {
    return {
        ...(input.AcceleratorTypes !== undefined &&
            input.AcceleratorTypes !== null && {
            AcceleratorTypes: serializeAws_json1_1NotebookInstanceAcceleratorTypes(input.AcceleratorTypes, context),
        }),
        ...(input.AdditionalCodeRepositories !== undefined &&
            input.AdditionalCodeRepositories !== null && {
            AdditionalCodeRepositories: serializeAws_json1_1AdditionalCodeRepositoryNamesOrUrls(input.AdditionalCodeRepositories, context),
        }),
        ...(input.DefaultCodeRepository !== undefined &&
            input.DefaultCodeRepository !== null && { DefaultCodeRepository: input.DefaultCodeRepository }),
        ...(input.DisassociateAcceleratorTypes !== undefined &&
            input.DisassociateAcceleratorTypes !== null && {
            DisassociateAcceleratorTypes: input.DisassociateAcceleratorTypes,
        }),
        ...(input.DisassociateAdditionalCodeRepositories !== undefined &&
            input.DisassociateAdditionalCodeRepositories !== null && {
            DisassociateAdditionalCodeRepositories: input.DisassociateAdditionalCodeRepositories,
        }),
        ...(input.DisassociateDefaultCodeRepository !== undefined &&
            input.DisassociateDefaultCodeRepository !== null && {
            DisassociateDefaultCodeRepository: input.DisassociateDefaultCodeRepository,
        }),
        ...(input.DisassociateLifecycleConfig !== undefined &&
            input.DisassociateLifecycleConfig !== null && { DisassociateLifecycleConfig: input.DisassociateLifecycleConfig }),
        ...(input.InstanceType !== undefined && input.InstanceType !== null && { InstanceType: input.InstanceType }),
        ...(input.LifecycleConfigName !== undefined &&
            input.LifecycleConfigName !== null && { LifecycleConfigName: input.LifecycleConfigName }),
        ...(input.NotebookInstanceName !== undefined &&
            input.NotebookInstanceName !== null && { NotebookInstanceName: input.NotebookInstanceName }),
        ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
        ...(input.RootAccess !== undefined && input.RootAccess !== null && { RootAccess: input.RootAccess }),
        ...(input.VolumeSizeInGB !== undefined &&
            input.VolumeSizeInGB !== null && { VolumeSizeInGB: input.VolumeSizeInGB }),
    };
};
const serializeAws_json1_1UpdateNotebookInstanceLifecycleConfigInput = (input, context) => {
    return {
        ...(input.NotebookInstanceLifecycleConfigName !== undefined &&
            input.NotebookInstanceLifecycleConfigName !== null && {
            NotebookInstanceLifecycleConfigName: input.NotebookInstanceLifecycleConfigName,
        }),
        ...(input.OnCreate !== undefined &&
            input.OnCreate !== null && {
            OnCreate: serializeAws_json1_1NotebookInstanceLifecycleConfigList(input.OnCreate, context),
        }),
        ...(input.OnStart !== undefined &&
            input.OnStart !== null && {
            OnStart: serializeAws_json1_1NotebookInstanceLifecycleConfigList(input.OnStart, context),
        }),
    };
};
const serializeAws_json1_1UpdatePipelineExecutionRequest = (input, context) => {
    return {
        ...(input.PipelineExecutionArn !== undefined &&
            input.PipelineExecutionArn !== null && { PipelineExecutionArn: input.PipelineExecutionArn }),
        ...(input.PipelineExecutionDescription !== undefined &&
            input.PipelineExecutionDescription !== null && {
            PipelineExecutionDescription: input.PipelineExecutionDescription,
        }),
        ...(input.PipelineExecutionDisplayName !== undefined &&
            input.PipelineExecutionDisplayName !== null && {
            PipelineExecutionDisplayName: input.PipelineExecutionDisplayName,
        }),
    };
};
const serializeAws_json1_1UpdatePipelineRequest = (input, context) => {
    return {
        ...(input.PipelineDefinition !== undefined &&
            input.PipelineDefinition !== null && { PipelineDefinition: input.PipelineDefinition }),
        ...(input.PipelineDescription !== undefined &&
            input.PipelineDescription !== null && { PipelineDescription: input.PipelineDescription }),
        ...(input.PipelineDisplayName !== undefined &&
            input.PipelineDisplayName !== null && { PipelineDisplayName: input.PipelineDisplayName }),
        ...(input.PipelineName !== undefined && input.PipelineName !== null && { PipelineName: input.PipelineName }),
        ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
    };
};
const serializeAws_json1_1UpdateTrainingJobRequest = (input, context) => {
    return {
        ...(input.ProfilerConfig !== undefined &&
            input.ProfilerConfig !== null && {
            ProfilerConfig: serializeAws_json1_1ProfilerConfigForUpdate(input.ProfilerConfig, context),
        }),
        ...(input.ProfilerRuleConfigurations !== undefined &&
            input.ProfilerRuleConfigurations !== null && {
            ProfilerRuleConfigurations: serializeAws_json1_1ProfilerRuleConfigurations(input.ProfilerRuleConfigurations, context),
        }),
        ...(input.TrainingJobName !== undefined &&
            input.TrainingJobName !== null && { TrainingJobName: input.TrainingJobName }),
    };
};
const serializeAws_json1_1UpdateTrialComponentRequest = (input, context) => {
    return {
        ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
        ...(input.EndTime !== undefined &&
            input.EndTime !== null && { EndTime: Math.round(input.EndTime.getTime() / 1000) }),
        ...(input.InputArtifacts !== undefined &&
            input.InputArtifacts !== null && {
            InputArtifacts: serializeAws_json1_1TrialComponentArtifacts(input.InputArtifacts, context),
        }),
        ...(input.InputArtifactsToRemove !== undefined &&
            input.InputArtifactsToRemove !== null && {
            InputArtifactsToRemove: serializeAws_json1_1ListTrialComponentKey256(input.InputArtifactsToRemove, context),
        }),
        ...(input.OutputArtifacts !== undefined &&
            input.OutputArtifacts !== null && {
            OutputArtifacts: serializeAws_json1_1TrialComponentArtifacts(input.OutputArtifacts, context),
        }),
        ...(input.OutputArtifactsToRemove !== undefined &&
            input.OutputArtifactsToRemove !== null && {
            OutputArtifactsToRemove: serializeAws_json1_1ListTrialComponentKey256(input.OutputArtifactsToRemove, context),
        }),
        ...(input.Parameters !== undefined &&
            input.Parameters !== null && {
            Parameters: serializeAws_json1_1TrialComponentParameters(input.Parameters, context),
        }),
        ...(input.ParametersToRemove !== undefined &&
            input.ParametersToRemove !== null && {
            ParametersToRemove: serializeAws_json1_1ListTrialComponentKey256(input.ParametersToRemove, context),
        }),
        ...(input.StartTime !== undefined &&
            input.StartTime !== null && { StartTime: Math.round(input.StartTime.getTime() / 1000) }),
        ...(input.Status !== undefined &&
            input.Status !== null && { Status: serializeAws_json1_1TrialComponentStatus(input.Status, context) }),
        ...(input.TrialComponentName !== undefined &&
            input.TrialComponentName !== null && { TrialComponentName: input.TrialComponentName }),
    };
};
const serializeAws_json1_1UpdateTrialRequest = (input, context) => {
    return {
        ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
        ...(input.TrialName !== undefined && input.TrialName !== null && { TrialName: input.TrialName }),
    };
};
const serializeAws_json1_1UpdateUserProfileRequest = (input, context) => {
    return {
        ...(input.DomainId !== undefined && input.DomainId !== null && { DomainId: input.DomainId }),
        ...(input.UserProfileName !== undefined &&
            input.UserProfileName !== null && { UserProfileName: input.UserProfileName }),
        ...(input.UserSettings !== undefined &&
            input.UserSettings !== null && { UserSettings: serializeAws_json1_1UserSettings(input.UserSettings, context) }),
    };
};
const serializeAws_json1_1UpdateWorkforceRequest = (input, context) => {
    return {
        ...(input.OidcConfig !== undefined &&
            input.OidcConfig !== null && { OidcConfig: serializeAws_json1_1OidcConfig(input.OidcConfig, context) }),
        ...(input.SourceIpConfig !== undefined &&
            input.SourceIpConfig !== null && {
            SourceIpConfig: serializeAws_json1_1SourceIpConfig(input.SourceIpConfig, context),
        }),
        ...(input.WorkforceName !== undefined && input.WorkforceName !== null && { WorkforceName: input.WorkforceName }),
    };
};
const serializeAws_json1_1UpdateWorkteamRequest = (input, context) => {
    return {
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.MemberDefinitions !== undefined &&
            input.MemberDefinitions !== null && {
            MemberDefinitions: serializeAws_json1_1MemberDefinitions(input.MemberDefinitions, context),
        }),
        ...(input.NotificationConfiguration !== undefined &&
            input.NotificationConfiguration !== null && {
            NotificationConfiguration: serializeAws_json1_1NotificationConfiguration(input.NotificationConfiguration, context),
        }),
        ...(input.WorkteamName !== undefined && input.WorkteamName !== null && { WorkteamName: input.WorkteamName }),
    };
};
const serializeAws_json1_1USD = (input, context) => {
    return {
        ...(input.Cents !== undefined && input.Cents !== null && { Cents: input.Cents }),
        ...(input.Dollars !== undefined && input.Dollars !== null && { Dollars: input.Dollars }),
        ...(input.TenthFractionsOfACent !== undefined &&
            input.TenthFractionsOfACent !== null && { TenthFractionsOfACent: input.TenthFractionsOfACent }),
    };
};
const serializeAws_json1_1UserSettings = (input, context) => {
    return {
        ...(input.ExecutionRole !== undefined && input.ExecutionRole !== null && { ExecutionRole: input.ExecutionRole }),
        ...(input.JupyterServerAppSettings !== undefined &&
            input.JupyterServerAppSettings !== null && {
            JupyterServerAppSettings: serializeAws_json1_1JupyterServerAppSettings(input.JupyterServerAppSettings, context),
        }),
        ...(input.KernelGatewayAppSettings !== undefined &&
            input.KernelGatewayAppSettings !== null && {
            KernelGatewayAppSettings: serializeAws_json1_1KernelGatewayAppSettings(input.KernelGatewayAppSettings, context),
        }),
        ...(input.SecurityGroups !== undefined &&
            input.SecurityGroups !== null && {
            SecurityGroups: serializeAws_json1_1SecurityGroupIds(input.SecurityGroups, context),
        }),
        ...(input.SharingSettings !== undefined &&
            input.SharingSettings !== null && {
            SharingSettings: serializeAws_json1_1SharingSettings(input.SharingSettings, context),
        }),
        ...(input.TensorBoardAppSettings !== undefined &&
            input.TensorBoardAppSettings !== null && {
            TensorBoardAppSettings: serializeAws_json1_1TensorBoardAppSettings(input.TensorBoardAppSettings, context),
        }),
    };
};
const serializeAws_json1_1VariantProperty = (input, context) => {
    return {
        ...(input.VariantPropertyType !== undefined &&
            input.VariantPropertyType !== null && { VariantPropertyType: input.VariantPropertyType }),
    };
};
const serializeAws_json1_1VariantPropertyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_json1_1VariantProperty(entry, context);
    });
};
const serializeAws_json1_1VpcConfig = (input, context) => {
    return {
        ...(input.SecurityGroupIds !== undefined &&
            input.SecurityGroupIds !== null && {
            SecurityGroupIds: serializeAws_json1_1VpcSecurityGroupIds(input.SecurityGroupIds, context),
        }),
        ...(input.Subnets !== undefined &&
            input.Subnets !== null && { Subnets: serializeAws_json1_1Subnets(input.Subnets, context) }),
    };
};
const serializeAws_json1_1VpcSecurityGroupIds = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1ActionSource = (output, context) => {
    return {
        SourceId: output.SourceId !== undefined && output.SourceId !== null ? output.SourceId : undefined,
        SourceType: output.SourceType !== undefined && output.SourceType !== null ? output.SourceType : undefined,
        SourceUri: output.SourceUri !== undefined && output.SourceUri !== null ? output.SourceUri : undefined,
    };
};
const deserializeAws_json1_1ActionSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ActionSummary(entry, context);
    });
};
const deserializeAws_json1_1ActionSummary = (output, context) => {
    return {
        ActionArn: output.ActionArn !== undefined && output.ActionArn !== null ? output.ActionArn : undefined,
        ActionName: output.ActionName !== undefined && output.ActionName !== null ? output.ActionName : undefined,
        ActionType: output.ActionType !== undefined && output.ActionType !== null ? output.ActionType : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        Source: output.Source !== undefined && output.Source !== null
            ? deserializeAws_json1_1ActionSource(output.Source, context)
            : undefined,
        Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
    };
};
const deserializeAws_json1_1AddAssociationResponse = (output, context) => {
    return {
        DestinationArn: output.DestinationArn !== undefined && output.DestinationArn !== null ? output.DestinationArn : undefined,
        SourceArn: output.SourceArn !== undefined && output.SourceArn !== null ? output.SourceArn : undefined,
    };
};
const deserializeAws_json1_1AdditionalCodeRepositoryNamesOrUrls = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1AddTagsOutput = (output, context) => {
    return {
        Tags: output.Tags !== undefined && output.Tags !== null
            ? deserializeAws_json1_1TagList(output.Tags, context)
            : undefined,
    };
};
const deserializeAws_json1_1AgentVersion = (output, context) => {
    return {
        AgentCount: output.AgentCount !== undefined && output.AgentCount !== null ? output.AgentCount : undefined,
        Version: output.Version !== undefined && output.Version !== null ? output.Version : undefined,
    };
};
const deserializeAws_json1_1AgentVersions = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AgentVersion(entry, context);
    });
};
const deserializeAws_json1_1Alarm = (output, context) => {
    return {
        AlarmName: output.AlarmName !== undefined && output.AlarmName !== null ? output.AlarmName : undefined,
    };
};
const deserializeAws_json1_1AlarmList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Alarm(entry, context);
    });
};
const deserializeAws_json1_1AlgorithmSpecification = (output, context) => {
    return {
        AlgorithmName: output.AlgorithmName !== undefined && output.AlgorithmName !== null ? output.AlgorithmName : undefined,
        EnableSageMakerMetricsTimeSeries: output.EnableSageMakerMetricsTimeSeries !== undefined && output.EnableSageMakerMetricsTimeSeries !== null
            ? output.EnableSageMakerMetricsTimeSeries
            : undefined,
        MetricDefinitions: output.MetricDefinitions !== undefined && output.MetricDefinitions !== null
            ? deserializeAws_json1_1MetricDefinitionList(output.MetricDefinitions, context)
            : undefined,
        TrainingImage: output.TrainingImage !== undefined && output.TrainingImage !== null ? output.TrainingImage : undefined,
        TrainingInputMode: output.TrainingInputMode !== undefined && output.TrainingInputMode !== null
            ? output.TrainingInputMode
            : undefined,
    };
};
const deserializeAws_json1_1AlgorithmStatusDetails = (output, context) => {
    return {
        ImageScanStatuses: output.ImageScanStatuses !== undefined && output.ImageScanStatuses !== null
            ? deserializeAws_json1_1AlgorithmStatusItemList(output.ImageScanStatuses, context)
            : undefined,
        ValidationStatuses: output.ValidationStatuses !== undefined && output.ValidationStatuses !== null
            ? deserializeAws_json1_1AlgorithmStatusItemList(output.ValidationStatuses, context)
            : undefined,
    };
};
const deserializeAws_json1_1AlgorithmStatusItem = (output, context) => {
    return {
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,
        Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
    };
};
const deserializeAws_json1_1AlgorithmStatusItemList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AlgorithmStatusItem(entry, context);
    });
};
const deserializeAws_json1_1AlgorithmSummary = (output, context) => {
    return {
        AlgorithmArn: output.AlgorithmArn !== undefined && output.AlgorithmArn !== null ? output.AlgorithmArn : undefined,
        AlgorithmDescription: output.AlgorithmDescription !== undefined && output.AlgorithmDescription !== null
            ? output.AlgorithmDescription
            : undefined,
        AlgorithmName: output.AlgorithmName !== undefined && output.AlgorithmName !== null ? output.AlgorithmName : undefined,
        AlgorithmStatus: output.AlgorithmStatus !== undefined && output.AlgorithmStatus !== null ? output.AlgorithmStatus : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
    };
};
const deserializeAws_json1_1AlgorithmSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AlgorithmSummary(entry, context);
    });
};
const deserializeAws_json1_1AlgorithmValidationProfile = (output, context) => {
    return {
        ProfileName: output.ProfileName !== undefined && output.ProfileName !== null ? output.ProfileName : undefined,
        TrainingJobDefinition: output.TrainingJobDefinition !== undefined && output.TrainingJobDefinition !== null
            ? deserializeAws_json1_1TrainingJobDefinition(output.TrainingJobDefinition, context)
            : undefined,
        TransformJobDefinition: output.TransformJobDefinition !== undefined && output.TransformJobDefinition !== null
            ? deserializeAws_json1_1TransformJobDefinition(output.TransformJobDefinition, context)
            : undefined,
    };
};
const deserializeAws_json1_1AlgorithmValidationProfiles = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AlgorithmValidationProfile(entry, context);
    });
};
const deserializeAws_json1_1AlgorithmValidationSpecification = (output, context) => {
    return {
        ValidationProfiles: output.ValidationProfiles !== undefined && output.ValidationProfiles !== null
            ? deserializeAws_json1_1AlgorithmValidationProfiles(output.ValidationProfiles, context)
            : undefined,
        ValidationRole: output.ValidationRole !== undefined && output.ValidationRole !== null ? output.ValidationRole : undefined,
    };
};
const deserializeAws_json1_1AnnotationConsolidationConfig = (output, context) => {
    return {
        AnnotationConsolidationLambdaArn: output.AnnotationConsolidationLambdaArn !== undefined && output.AnnotationConsolidationLambdaArn !== null
            ? output.AnnotationConsolidationLambdaArn
            : undefined,
    };
};
const deserializeAws_json1_1AppDetails = (output, context) => {
    return {
        AppName: output.AppName !== undefined && output.AppName !== null ? output.AppName : undefined,
        AppType: output.AppType !== undefined && output.AppType !== null ? output.AppType : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        DomainId: output.DomainId !== undefined && output.DomainId !== null ? output.DomainId : undefined,
        Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
        UserProfileName: output.UserProfileName !== undefined && output.UserProfileName !== null ? output.UserProfileName : undefined,
    };
};
const deserializeAws_json1_1AppImageConfigDetails = (output, context) => {
    return {
        AppImageConfigArn: output.AppImageConfigArn !== undefined && output.AppImageConfigArn !== null
            ? output.AppImageConfigArn
            : undefined,
        AppImageConfigName: output.AppImageConfigName !== undefined && output.AppImageConfigName !== null
            ? output.AppImageConfigName
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        KernelGatewayImageConfig: output.KernelGatewayImageConfig !== undefined && output.KernelGatewayImageConfig !== null
            ? deserializeAws_json1_1KernelGatewayImageConfig(output.KernelGatewayImageConfig, context)
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
    };
};
const deserializeAws_json1_1AppImageConfigList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AppImageConfigDetails(entry, context);
    });
};
const deserializeAws_json1_1AppList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AppDetails(entry, context);
    });
};
const deserializeAws_json1_1AppSpecification = (output, context) => {
    return {
        ContainerArguments: output.ContainerArguments !== undefined && output.ContainerArguments !== null
            ? deserializeAws_json1_1ContainerArguments(output.ContainerArguments, context)
            : undefined,
        ContainerEntrypoint: output.ContainerEntrypoint !== undefined && output.ContainerEntrypoint !== null
            ? deserializeAws_json1_1ContainerEntrypoint(output.ContainerEntrypoint, context)
            : undefined,
        ImageUri: output.ImageUri !== undefined && output.ImageUri !== null ? output.ImageUri : undefined,
    };
};
const deserializeAws_json1_1ArtifactSource = (output, context) => {
    return {
        SourceTypes: output.SourceTypes !== undefined && output.SourceTypes !== null
            ? deserializeAws_json1_1ArtifactSourceTypes(output.SourceTypes, context)
            : undefined,
        SourceUri: output.SourceUri !== undefined && output.SourceUri !== null ? output.SourceUri : undefined,
    };
};
const deserializeAws_json1_1ArtifactSourceType = (output, context) => {
    return {
        SourceIdType: output.SourceIdType !== undefined && output.SourceIdType !== null ? output.SourceIdType : undefined,
        Value: output.Value !== undefined && output.Value !== null ? output.Value : undefined,
    };
};
const deserializeAws_json1_1ArtifactSourceTypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ArtifactSourceType(entry, context);
    });
};
const deserializeAws_json1_1ArtifactSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ArtifactSummary(entry, context);
    });
};
const deserializeAws_json1_1ArtifactSummary = (output, context) => {
    return {
        ArtifactArn: output.ArtifactArn !== undefined && output.ArtifactArn !== null ? output.ArtifactArn : undefined,
        ArtifactName: output.ArtifactName !== undefined && output.ArtifactName !== null ? output.ArtifactName : undefined,
        ArtifactType: output.ArtifactType !== undefined && output.ArtifactType !== null ? output.ArtifactType : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        Source: output.Source !== undefined && output.Source !== null
            ? deserializeAws_json1_1ArtifactSource(output.Source, context)
            : undefined,
    };
};
const deserializeAws_json1_1AssociateTrialComponentResponse = (output, context) => {
    return {
        TrialArn: output.TrialArn !== undefined && output.TrialArn !== null ? output.TrialArn : undefined,
        TrialComponentArn: output.TrialComponentArn !== undefined && output.TrialComponentArn !== null
            ? output.TrialComponentArn
            : undefined,
    };
};
const deserializeAws_json1_1AssociationSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AssociationSummary(entry, context);
    });
};
const deserializeAws_json1_1AssociationSummary = (output, context) => {
    return {
        AssociationType: output.AssociationType !== undefined && output.AssociationType !== null ? output.AssociationType : undefined,
        CreatedBy: output.CreatedBy !== undefined && output.CreatedBy !== null
            ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        DestinationArn: output.DestinationArn !== undefined && output.DestinationArn !== null ? output.DestinationArn : undefined,
        DestinationName: output.DestinationName !== undefined && output.DestinationName !== null ? output.DestinationName : undefined,
        DestinationType: output.DestinationType !== undefined && output.DestinationType !== null ? output.DestinationType : undefined,
        SourceArn: output.SourceArn !== undefined && output.SourceArn !== null ? output.SourceArn : undefined,
        SourceName: output.SourceName !== undefined && output.SourceName !== null ? output.SourceName : undefined,
        SourceType: output.SourceType !== undefined && output.SourceType !== null ? output.SourceType : undefined,
    };
};
const deserializeAws_json1_1AthenaDatasetDefinition = (output, context) => {
    return {
        Catalog: output.Catalog !== undefined && output.Catalog !== null ? output.Catalog : undefined,
        Database: output.Database !== undefined && output.Database !== null ? output.Database : undefined,
        KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
        OutputCompression: output.OutputCompression !== undefined && output.OutputCompression !== null
            ? output.OutputCompression
            : undefined,
        OutputFormat: output.OutputFormat !== undefined && output.OutputFormat !== null ? output.OutputFormat : undefined,
        OutputS3Uri: output.OutputS3Uri !== undefined && output.OutputS3Uri !== null ? output.OutputS3Uri : undefined,
        QueryString: output.QueryString !== undefined && output.QueryString !== null ? output.QueryString : undefined,
        WorkGroup: output.WorkGroup !== undefined && output.WorkGroup !== null ? output.WorkGroup : undefined,
    };
};
const deserializeAws_json1_1AttributeNames = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1AutoMLCandidate = (output, context) => {
    return {
        CandidateName: output.CandidateName !== undefined && output.CandidateName !== null ? output.CandidateName : undefined,
        CandidateProperties: output.CandidateProperties !== undefined && output.CandidateProperties !== null
            ? deserializeAws_json1_1CandidateProperties(output.CandidateProperties, context)
            : undefined,
        CandidateStatus: output.CandidateStatus !== undefined && output.CandidateStatus !== null ? output.CandidateStatus : undefined,
        CandidateSteps: output.CandidateSteps !== undefined && output.CandidateSteps !== null
            ? deserializeAws_json1_1CandidateSteps(output.CandidateSteps, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        EndTime: output.EndTime !== undefined && output.EndTime !== null ? new Date(Math.round(output.EndTime * 1000)) : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        FinalAutoMLJobObjectiveMetric: output.FinalAutoMLJobObjectiveMetric !== undefined && output.FinalAutoMLJobObjectiveMetric !== null
            ? deserializeAws_json1_1FinalAutoMLJobObjectiveMetric(output.FinalAutoMLJobObjectiveMetric, context)
            : undefined,
        InferenceContainers: output.InferenceContainers !== undefined && output.InferenceContainers !== null
            ? deserializeAws_json1_1AutoMLContainerDefinitions(output.InferenceContainers, context)
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        ObjectiveStatus: output.ObjectiveStatus !== undefined && output.ObjectiveStatus !== null ? output.ObjectiveStatus : undefined,
    };
};
const deserializeAws_json1_1AutoMLCandidates = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AutoMLCandidate(entry, context);
    });
};
const deserializeAws_json1_1AutoMLCandidateStep = (output, context) => {
    return {
        CandidateStepArn: output.CandidateStepArn !== undefined && output.CandidateStepArn !== null ? output.CandidateStepArn : undefined,
        CandidateStepName: output.CandidateStepName !== undefined && output.CandidateStepName !== null
            ? output.CandidateStepName
            : undefined,
        CandidateStepType: output.CandidateStepType !== undefined && output.CandidateStepType !== null
            ? output.CandidateStepType
            : undefined,
    };
};
const deserializeAws_json1_1AutoMLChannel = (output, context) => {
    return {
        CompressionType: output.CompressionType !== undefined && output.CompressionType !== null ? output.CompressionType : undefined,
        DataSource: output.DataSource !== undefined && output.DataSource !== null
            ? deserializeAws_json1_1AutoMLDataSource(output.DataSource, context)
            : undefined,
        TargetAttributeName: output.TargetAttributeName !== undefined && output.TargetAttributeName !== null
            ? output.TargetAttributeName
            : undefined,
    };
};
const deserializeAws_json1_1AutoMLContainerDefinition = (output, context) => {
    return {
        Environment: output.Environment !== undefined && output.Environment !== null
            ? deserializeAws_json1_1EnvironmentMap(output.Environment, context)
            : undefined,
        Image: output.Image !== undefined && output.Image !== null ? output.Image : undefined,
        ModelDataUrl: output.ModelDataUrl !== undefined && output.ModelDataUrl !== null ? output.ModelDataUrl : undefined,
    };
};
const deserializeAws_json1_1AutoMLContainerDefinitions = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AutoMLContainerDefinition(entry, context);
    });
};
const deserializeAws_json1_1AutoMLDataSource = (output, context) => {
    return {
        S3DataSource: output.S3DataSource !== undefined && output.S3DataSource !== null
            ? deserializeAws_json1_1AutoMLS3DataSource(output.S3DataSource, context)
            : undefined,
    };
};
const deserializeAws_json1_1AutoMLInputDataConfig = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AutoMLChannel(entry, context);
    });
};
const deserializeAws_json1_1AutoMLJobArtifacts = (output, context) => {
    return {
        CandidateDefinitionNotebookLocation: output.CandidateDefinitionNotebookLocation !== undefined && output.CandidateDefinitionNotebookLocation !== null
            ? output.CandidateDefinitionNotebookLocation
            : undefined,
        DataExplorationNotebookLocation: output.DataExplorationNotebookLocation !== undefined && output.DataExplorationNotebookLocation !== null
            ? output.DataExplorationNotebookLocation
            : undefined,
    };
};
const deserializeAws_json1_1AutoMLJobCompletionCriteria = (output, context) => {
    return {
        MaxAutoMLJobRuntimeInSeconds: output.MaxAutoMLJobRuntimeInSeconds !== undefined && output.MaxAutoMLJobRuntimeInSeconds !== null
            ? output.MaxAutoMLJobRuntimeInSeconds
            : undefined,
        MaxCandidates: output.MaxCandidates !== undefined && output.MaxCandidates !== null ? output.MaxCandidates : undefined,
        MaxRuntimePerTrainingJobInSeconds: output.MaxRuntimePerTrainingJobInSeconds !== undefined && output.MaxRuntimePerTrainingJobInSeconds !== null
            ? output.MaxRuntimePerTrainingJobInSeconds
            : undefined,
    };
};
const deserializeAws_json1_1AutoMLJobConfig = (output, context) => {
    return {
        CompletionCriteria: output.CompletionCriteria !== undefined && output.CompletionCriteria !== null
            ? deserializeAws_json1_1AutoMLJobCompletionCriteria(output.CompletionCriteria, context)
            : undefined,
        SecurityConfig: output.SecurityConfig !== undefined && output.SecurityConfig !== null
            ? deserializeAws_json1_1AutoMLSecurityConfig(output.SecurityConfig, context)
            : undefined,
    };
};
const deserializeAws_json1_1AutoMLJobObjective = (output, context) => {
    return {
        MetricName: output.MetricName !== undefined && output.MetricName !== null ? output.MetricName : undefined,
    };
};
const deserializeAws_json1_1AutoMLJobSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AutoMLJobSummary(entry, context);
    });
};
const deserializeAws_json1_1AutoMLJobSummary = (output, context) => {
    return {
        AutoMLJobArn: output.AutoMLJobArn !== undefined && output.AutoMLJobArn !== null ? output.AutoMLJobArn : undefined,
        AutoMLJobName: output.AutoMLJobName !== undefined && output.AutoMLJobName !== null ? output.AutoMLJobName : undefined,
        AutoMLJobSecondaryStatus: output.AutoMLJobSecondaryStatus !== undefined && output.AutoMLJobSecondaryStatus !== null
            ? output.AutoMLJobSecondaryStatus
            : undefined,
        AutoMLJobStatus: output.AutoMLJobStatus !== undefined && output.AutoMLJobStatus !== null ? output.AutoMLJobStatus : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        EndTime: output.EndTime !== undefined && output.EndTime !== null ? new Date(Math.round(output.EndTime * 1000)) : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        PartialFailureReasons: output.PartialFailureReasons !== undefined && output.PartialFailureReasons !== null
            ? deserializeAws_json1_1AutoMLPartialFailureReasons(output.PartialFailureReasons, context)
            : undefined,
    };
};
const deserializeAws_json1_1AutoMLOutputDataConfig = (output, context) => {
    return {
        KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
        S3OutputPath: output.S3OutputPath !== undefined && output.S3OutputPath !== null ? output.S3OutputPath : undefined,
    };
};
const deserializeAws_json1_1AutoMLPartialFailureReason = (output, context) => {
    return {
        PartialFailureMessage: output.PartialFailureMessage !== undefined && output.PartialFailureMessage !== null
            ? output.PartialFailureMessage
            : undefined,
    };
};
const deserializeAws_json1_1AutoMLPartialFailureReasons = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AutoMLPartialFailureReason(entry, context);
    });
};
const deserializeAws_json1_1AutoMLS3DataSource = (output, context) => {
    return {
        S3DataType: output.S3DataType !== undefined && output.S3DataType !== null ? output.S3DataType : undefined,
        S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
    };
};
const deserializeAws_json1_1AutoMLSecurityConfig = (output, context) => {
    return {
        EnableInterContainerTrafficEncryption: output.EnableInterContainerTrafficEncryption !== undefined &&
            output.EnableInterContainerTrafficEncryption !== null
            ? output.EnableInterContainerTrafficEncryption
            : undefined,
        VolumeKmsKeyId: output.VolumeKmsKeyId !== undefined && output.VolumeKmsKeyId !== null ? output.VolumeKmsKeyId : undefined,
        VpcConfig: output.VpcConfig !== undefined && output.VpcConfig !== null
            ? deserializeAws_json1_1VpcConfig(output.VpcConfig, context)
            : undefined,
    };
};
const deserializeAws_json1_1AutoRollbackConfig = (output, context) => {
    return {
        Alarms: output.Alarms !== undefined && output.Alarms !== null
            ? deserializeAws_json1_1AlarmList(output.Alarms, context)
            : undefined,
    };
};
const deserializeAws_json1_1Bias = (output, context) => {
    return {
        Report: output.Report !== undefined && output.Report !== null
            ? deserializeAws_json1_1MetricsSource(output.Report, context)
            : undefined,
    };
};
const deserializeAws_json1_1BlueGreenUpdatePolicy = (output, context) => {
    return {
        MaximumExecutionTimeoutInSeconds: output.MaximumExecutionTimeoutInSeconds !== undefined && output.MaximumExecutionTimeoutInSeconds !== null
            ? output.MaximumExecutionTimeoutInSeconds
            : undefined,
        TerminationWaitInSeconds: output.TerminationWaitInSeconds !== undefined && output.TerminationWaitInSeconds !== null
            ? output.TerminationWaitInSeconds
            : undefined,
        TrafficRoutingConfiguration: output.TrafficRoutingConfiguration !== undefined && output.TrafficRoutingConfiguration !== null
            ? deserializeAws_json1_1TrafficRoutingConfig(output.TrafficRoutingConfiguration, context)
            : undefined,
    };
};
const deserializeAws_json1_1CacheHitResult = (output, context) => {
    return {
        SourcePipelineExecutionArn: output.SourcePipelineExecutionArn !== undefined && output.SourcePipelineExecutionArn !== null
            ? output.SourcePipelineExecutionArn
            : undefined,
    };
};
const deserializeAws_json1_1CandidateArtifactLocations = (output, context) => {
    return {
        Explainability: output.Explainability !== undefined && output.Explainability !== null ? output.Explainability : undefined,
    };
};
const deserializeAws_json1_1CandidateProperties = (output, context) => {
    return {
        CandidateArtifactLocations: output.CandidateArtifactLocations !== undefined && output.CandidateArtifactLocations !== null
            ? deserializeAws_json1_1CandidateArtifactLocations(output.CandidateArtifactLocations, context)
            : undefined,
    };
};
const deserializeAws_json1_1CandidateSteps = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AutoMLCandidateStep(entry, context);
    });
};
const deserializeAws_json1_1CapacitySize = (output, context) => {
    return {
        Type: output.Type !== undefined && output.Type !== null ? output.Type : undefined,
        Value: output.Value !== undefined && output.Value !== null ? output.Value : undefined,
    };
};
const deserializeAws_json1_1CaptureContentTypeHeader = (output, context) => {
    return {
        CsvContentTypes: output.CsvContentTypes !== undefined && output.CsvContentTypes !== null
            ? deserializeAws_json1_1CsvContentTypes(output.CsvContentTypes, context)
            : undefined,
        JsonContentTypes: output.JsonContentTypes !== undefined && output.JsonContentTypes !== null
            ? deserializeAws_json1_1JsonContentTypes(output.JsonContentTypes, context)
            : undefined,
    };
};
const deserializeAws_json1_1CaptureOption = (output, context) => {
    return {
        CaptureMode: output.CaptureMode !== undefined && output.CaptureMode !== null ? output.CaptureMode : undefined,
    };
};
const deserializeAws_json1_1CaptureOptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1CaptureOption(entry, context);
    });
};
const deserializeAws_json1_1CategoricalParameterRange = (output, context) => {
    return {
        Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,
        Values: output.Values !== undefined && output.Values !== null
            ? deserializeAws_json1_1ParameterValues(output.Values, context)
            : undefined,
    };
};
const deserializeAws_json1_1CategoricalParameterRanges = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1CategoricalParameterRange(entry, context);
    });
};
const deserializeAws_json1_1CategoricalParameterRangeSpecification = (output, context) => {
    return {
        Values: output.Values !== undefined && output.Values !== null
            ? deserializeAws_json1_1ParameterValues(output.Values, context)
            : undefined,
    };
};
const deserializeAws_json1_1Channel = (output, context) => {
    return {
        ChannelName: output.ChannelName !== undefined && output.ChannelName !== null ? output.ChannelName : undefined,
        CompressionType: output.CompressionType !== undefined && output.CompressionType !== null ? output.CompressionType : undefined,
        ContentType: output.ContentType !== undefined && output.ContentType !== null ? output.ContentType : undefined,
        DataSource: output.DataSource !== undefined && output.DataSource !== null
            ? deserializeAws_json1_1DataSource(output.DataSource, context)
            : undefined,
        InputMode: output.InputMode !== undefined && output.InputMode !== null ? output.InputMode : undefined,
        RecordWrapperType: output.RecordWrapperType !== undefined && output.RecordWrapperType !== null
            ? output.RecordWrapperType
            : undefined,
        ShuffleConfig: output.ShuffleConfig !== undefined && output.ShuffleConfig !== null
            ? deserializeAws_json1_1ShuffleConfig(output.ShuffleConfig, context)
            : undefined,
    };
};
const deserializeAws_json1_1ChannelSpecification = (output, context) => {
    return {
        Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
        IsRequired: output.IsRequired !== undefined && output.IsRequired !== null ? output.IsRequired : undefined,
        Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,
        SupportedCompressionTypes: output.SupportedCompressionTypes !== undefined && output.SupportedCompressionTypes !== null
            ? deserializeAws_json1_1CompressionTypes(output.SupportedCompressionTypes, context)
            : undefined,
        SupportedContentTypes: output.SupportedContentTypes !== undefined && output.SupportedContentTypes !== null
            ? deserializeAws_json1_1ContentTypes(output.SupportedContentTypes, context)
            : undefined,
        SupportedInputModes: output.SupportedInputModes !== undefined && output.SupportedInputModes !== null
            ? deserializeAws_json1_1InputModes(output.SupportedInputModes, context)
            : undefined,
    };
};
const deserializeAws_json1_1ChannelSpecifications = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ChannelSpecification(entry, context);
    });
};
const deserializeAws_json1_1CheckpointConfig = (output, context) => {
    return {
        LocalPath: output.LocalPath !== undefined && output.LocalPath !== null ? output.LocalPath : undefined,
        S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
    };
};
const deserializeAws_json1_1Cidrs = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1CodeRepositorySummary = (output, context) => {
    return {
        CodeRepositoryArn: output.CodeRepositoryArn !== undefined && output.CodeRepositoryArn !== null
            ? output.CodeRepositoryArn
            : undefined,
        CodeRepositoryName: output.CodeRepositoryName !== undefined && output.CodeRepositoryName !== null
            ? output.CodeRepositoryName
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        GitConfig: output.GitConfig !== undefined && output.GitConfig !== null
            ? deserializeAws_json1_1GitConfig(output.GitConfig, context)
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
    };
};
const deserializeAws_json1_1CodeRepositorySummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1CodeRepositorySummary(entry, context);
    });
};
const deserializeAws_json1_1CognitoConfig = (output, context) => {
    return {
        ClientId: output.ClientId !== undefined && output.ClientId !== null ? output.ClientId : undefined,
        UserPool: output.UserPool !== undefined && output.UserPool !== null ? output.UserPool : undefined,
    };
};
const deserializeAws_json1_1CognitoMemberDefinition = (output, context) => {
    return {
        ClientId: output.ClientId !== undefined && output.ClientId !== null ? output.ClientId : undefined,
        UserGroup: output.UserGroup !== undefined && output.UserGroup !== null ? output.UserGroup : undefined,
        UserPool: output.UserPool !== undefined && output.UserPool !== null ? output.UserPool : undefined,
    };
};
const deserializeAws_json1_1CollectionConfiguration = (output, context) => {
    return {
        CollectionName: output.CollectionName !== undefined && output.CollectionName !== null ? output.CollectionName : undefined,
        CollectionParameters: output.CollectionParameters !== undefined && output.CollectionParameters !== null
            ? deserializeAws_json1_1CollectionParameters(output.CollectionParameters, context)
            : undefined,
    };
};
const deserializeAws_json1_1CollectionConfigurations = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1CollectionConfiguration(entry, context);
    });
};
const deserializeAws_json1_1CollectionParameters = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const deserializeAws_json1_1CompilationJobSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1CompilationJobSummary(entry, context);
    });
};
const deserializeAws_json1_1CompilationJobSummary = (output, context) => {
    return {
        CompilationEndTime: output.CompilationEndTime !== undefined && output.CompilationEndTime !== null
            ? new Date(Math.round(output.CompilationEndTime * 1000))
            : undefined,
        CompilationJobArn: output.CompilationJobArn !== undefined && output.CompilationJobArn !== null
            ? output.CompilationJobArn
            : undefined,
        CompilationJobName: output.CompilationJobName !== undefined && output.CompilationJobName !== null
            ? output.CompilationJobName
            : undefined,
        CompilationJobStatus: output.CompilationJobStatus !== undefined && output.CompilationJobStatus !== null
            ? output.CompilationJobStatus
            : undefined,
        CompilationStartTime: output.CompilationStartTime !== undefined && output.CompilationStartTime !== null
            ? new Date(Math.round(output.CompilationStartTime * 1000))
            : undefined,
        CompilationTargetDevice: output.CompilationTargetDevice !== undefined && output.CompilationTargetDevice !== null
            ? output.CompilationTargetDevice
            : undefined,
        CompilationTargetPlatformAccelerator: output.CompilationTargetPlatformAccelerator !== undefined && output.CompilationTargetPlatformAccelerator !== null
            ? output.CompilationTargetPlatformAccelerator
            : undefined,
        CompilationTargetPlatformArch: output.CompilationTargetPlatformArch !== undefined && output.CompilationTargetPlatformArch !== null
            ? output.CompilationTargetPlatformArch
            : undefined,
        CompilationTargetPlatformOs: output.CompilationTargetPlatformOs !== undefined && output.CompilationTargetPlatformOs !== null
            ? output.CompilationTargetPlatformOs
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
    };
};
const deserializeAws_json1_1CompressionTypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1ConditionStepMetadata = (output, context) => {
    return {
        Outcome: output.Outcome !== undefined && output.Outcome !== null ? output.Outcome : undefined,
    };
};
const deserializeAws_json1_1ConflictException = (output, context) => {
    return {
        Message: output.Message !== undefined && output.Message !== null ? output.Message : undefined,
    };
};
const deserializeAws_json1_1ContainerArguments = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1ContainerDefinition = (output, context) => {
    return {
        ContainerHostname: output.ContainerHostname !== undefined && output.ContainerHostname !== null
            ? output.ContainerHostname
            : undefined,
        Environment: output.Environment !== undefined && output.Environment !== null
            ? deserializeAws_json1_1EnvironmentMap(output.Environment, context)
            : undefined,
        Image: output.Image !== undefined && output.Image !== null ? output.Image : undefined,
        ImageConfig: output.ImageConfig !== undefined && output.ImageConfig !== null
            ? deserializeAws_json1_1ImageConfig(output.ImageConfig, context)
            : undefined,
        Mode: output.Mode !== undefined && output.Mode !== null ? output.Mode : undefined,
        ModelDataUrl: output.ModelDataUrl !== undefined && output.ModelDataUrl !== null ? output.ModelDataUrl : undefined,
        ModelPackageName: output.ModelPackageName !== undefined && output.ModelPackageName !== null ? output.ModelPackageName : undefined,
        MultiModelConfig: output.MultiModelConfig !== undefined && output.MultiModelConfig !== null
            ? deserializeAws_json1_1MultiModelConfig(output.MultiModelConfig, context)
            : undefined,
    };
};
const deserializeAws_json1_1ContainerDefinitionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ContainerDefinition(entry, context);
    });
};
const deserializeAws_json1_1ContainerEntrypoint = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1ContentClassifiers = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1ContentTypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1ContextSource = (output, context) => {
    return {
        SourceId: output.SourceId !== undefined && output.SourceId !== null ? output.SourceId : undefined,
        SourceType: output.SourceType !== undefined && output.SourceType !== null ? output.SourceType : undefined,
        SourceUri: output.SourceUri !== undefined && output.SourceUri !== null ? output.SourceUri : undefined,
    };
};
const deserializeAws_json1_1ContextSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ContextSummary(entry, context);
    });
};
const deserializeAws_json1_1ContextSummary = (output, context) => {
    return {
        ContextArn: output.ContextArn !== undefined && output.ContextArn !== null ? output.ContextArn : undefined,
        ContextName: output.ContextName !== undefined && output.ContextName !== null ? output.ContextName : undefined,
        ContextType: output.ContextType !== undefined && output.ContextType !== null ? output.ContextType : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        Source: output.Source !== undefined && output.Source !== null
            ? deserializeAws_json1_1ContextSource(output.Source, context)
            : undefined,
    };
};
const deserializeAws_json1_1ContinuousParameterRange = (output, context) => {
    return {
        MaxValue: output.MaxValue !== undefined && output.MaxValue !== null ? output.MaxValue : undefined,
        MinValue: output.MinValue !== undefined && output.MinValue !== null ? output.MinValue : undefined,
        Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,
        ScalingType: output.ScalingType !== undefined && output.ScalingType !== null ? output.ScalingType : undefined,
    };
};
const deserializeAws_json1_1ContinuousParameterRanges = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ContinuousParameterRange(entry, context);
    });
};
const deserializeAws_json1_1ContinuousParameterRangeSpecification = (output, context) => {
    return {
        MaxValue: output.MaxValue !== undefined && output.MaxValue !== null ? output.MaxValue : undefined,
        MinValue: output.MinValue !== undefined && output.MinValue !== null ? output.MinValue : undefined,
    };
};
const deserializeAws_json1_1CreateActionResponse = (output, context) => {
    return {
        ActionArn: output.ActionArn !== undefined && output.ActionArn !== null ? output.ActionArn : undefined,
    };
};
const deserializeAws_json1_1CreateAlgorithmOutput = (output, context) => {
    return {
        AlgorithmArn: output.AlgorithmArn !== undefined && output.AlgorithmArn !== null ? output.AlgorithmArn : undefined,
    };
};
const deserializeAws_json1_1CreateAppImageConfigResponse = (output, context) => {
    return {
        AppImageConfigArn: output.AppImageConfigArn !== undefined && output.AppImageConfigArn !== null
            ? output.AppImageConfigArn
            : undefined,
    };
};
const deserializeAws_json1_1CreateAppResponse = (output, context) => {
    return {
        AppArn: output.AppArn !== undefined && output.AppArn !== null ? output.AppArn : undefined,
    };
};
const deserializeAws_json1_1CreateArtifactResponse = (output, context) => {
    return {
        ArtifactArn: output.ArtifactArn !== undefined && output.ArtifactArn !== null ? output.ArtifactArn : undefined,
    };
};
const deserializeAws_json1_1CreateAutoMLJobResponse = (output, context) => {
    return {
        AutoMLJobArn: output.AutoMLJobArn !== undefined && output.AutoMLJobArn !== null ? output.AutoMLJobArn : undefined,
    };
};
const deserializeAws_json1_1CreateCodeRepositoryOutput = (output, context) => {
    return {
        CodeRepositoryArn: output.CodeRepositoryArn !== undefined && output.CodeRepositoryArn !== null
            ? output.CodeRepositoryArn
            : undefined,
    };
};
const deserializeAws_json1_1CreateCompilationJobResponse = (output, context) => {
    return {
        CompilationJobArn: output.CompilationJobArn !== undefined && output.CompilationJobArn !== null
            ? output.CompilationJobArn
            : undefined,
    };
};
const deserializeAws_json1_1CreateContextResponse = (output, context) => {
    return {
        ContextArn: output.ContextArn !== undefined && output.ContextArn !== null ? output.ContextArn : undefined,
    };
};
const deserializeAws_json1_1CreateDataQualityJobDefinitionResponse = (output, context) => {
    return {
        JobDefinitionArn: output.JobDefinitionArn !== undefined && output.JobDefinitionArn !== null ? output.JobDefinitionArn : undefined,
    };
};
const deserializeAws_json1_1CreateDomainResponse = (output, context) => {
    return {
        DomainArn: output.DomainArn !== undefined && output.DomainArn !== null ? output.DomainArn : undefined,
        Url: output.Url !== undefined && output.Url !== null ? output.Url : undefined,
    };
};
const deserializeAws_json1_1CreateEndpointConfigOutput = (output, context) => {
    return {
        EndpointConfigArn: output.EndpointConfigArn !== undefined && output.EndpointConfigArn !== null
            ? output.EndpointConfigArn
            : undefined,
    };
};
const deserializeAws_json1_1CreateEndpointOutput = (output, context) => {
    return {
        EndpointArn: output.EndpointArn !== undefined && output.EndpointArn !== null ? output.EndpointArn : undefined,
    };
};
const deserializeAws_json1_1CreateExperimentResponse = (output, context) => {
    return {
        ExperimentArn: output.ExperimentArn !== undefined && output.ExperimentArn !== null ? output.ExperimentArn : undefined,
    };
};
const deserializeAws_json1_1CreateFeatureGroupResponse = (output, context) => {
    return {
        FeatureGroupArn: output.FeatureGroupArn !== undefined && output.FeatureGroupArn !== null ? output.FeatureGroupArn : undefined,
    };
};
const deserializeAws_json1_1CreateFlowDefinitionResponse = (output, context) => {
    return {
        FlowDefinitionArn: output.FlowDefinitionArn !== undefined && output.FlowDefinitionArn !== null
            ? output.FlowDefinitionArn
            : undefined,
    };
};
const deserializeAws_json1_1CreateHumanTaskUiResponse = (output, context) => {
    return {
        HumanTaskUiArn: output.HumanTaskUiArn !== undefined && output.HumanTaskUiArn !== null ? output.HumanTaskUiArn : undefined,
    };
};
const deserializeAws_json1_1CreateHyperParameterTuningJobResponse = (output, context) => {
    return {
        HyperParameterTuningJobArn: output.HyperParameterTuningJobArn !== undefined && output.HyperParameterTuningJobArn !== null
            ? output.HyperParameterTuningJobArn
            : undefined,
    };
};
const deserializeAws_json1_1CreateImageResponse = (output, context) => {
    return {
        ImageArn: output.ImageArn !== undefined && output.ImageArn !== null ? output.ImageArn : undefined,
    };
};
const deserializeAws_json1_1CreateImageVersionResponse = (output, context) => {
    return {
        ImageVersionArn: output.ImageVersionArn !== undefined && output.ImageVersionArn !== null ? output.ImageVersionArn : undefined,
    };
};
const deserializeAws_json1_1CreateLabelingJobResponse = (output, context) => {
    return {
        LabelingJobArn: output.LabelingJobArn !== undefined && output.LabelingJobArn !== null ? output.LabelingJobArn : undefined,
    };
};
const deserializeAws_json1_1CreateModelBiasJobDefinitionResponse = (output, context) => {
    return {
        JobDefinitionArn: output.JobDefinitionArn !== undefined && output.JobDefinitionArn !== null ? output.JobDefinitionArn : undefined,
    };
};
const deserializeAws_json1_1CreateModelExplainabilityJobDefinitionResponse = (output, context) => {
    return {
        JobDefinitionArn: output.JobDefinitionArn !== undefined && output.JobDefinitionArn !== null ? output.JobDefinitionArn : undefined,
    };
};
const deserializeAws_json1_1CreateModelOutput = (output, context) => {
    return {
        ModelArn: output.ModelArn !== undefined && output.ModelArn !== null ? output.ModelArn : undefined,
    };
};
const deserializeAws_json1_1CreateModelPackageGroupOutput = (output, context) => {
    return {
        ModelPackageGroupArn: output.ModelPackageGroupArn !== undefined && output.ModelPackageGroupArn !== null
            ? output.ModelPackageGroupArn
            : undefined,
    };
};
const deserializeAws_json1_1CreateModelPackageOutput = (output, context) => {
    return {
        ModelPackageArn: output.ModelPackageArn !== undefined && output.ModelPackageArn !== null ? output.ModelPackageArn : undefined,
    };
};
const deserializeAws_json1_1CreateModelQualityJobDefinitionResponse = (output, context) => {
    return {
        JobDefinitionArn: output.JobDefinitionArn !== undefined && output.JobDefinitionArn !== null ? output.JobDefinitionArn : undefined,
    };
};
const deserializeAws_json1_1CreateMonitoringScheduleResponse = (output, context) => {
    return {
        MonitoringScheduleArn: output.MonitoringScheduleArn !== undefined && output.MonitoringScheduleArn !== null
            ? output.MonitoringScheduleArn
            : undefined,
    };
};
const deserializeAws_json1_1CreateNotebookInstanceLifecycleConfigOutput = (output, context) => {
    return {
        NotebookInstanceLifecycleConfigArn: output.NotebookInstanceLifecycleConfigArn !== undefined && output.NotebookInstanceLifecycleConfigArn !== null
            ? output.NotebookInstanceLifecycleConfigArn
            : undefined,
    };
};
const deserializeAws_json1_1CreateNotebookInstanceOutput = (output, context) => {
    return {
        NotebookInstanceArn: output.NotebookInstanceArn !== undefined && output.NotebookInstanceArn !== null
            ? output.NotebookInstanceArn
            : undefined,
    };
};
const deserializeAws_json1_1CreatePipelineResponse = (output, context) => {
    return {
        PipelineArn: output.PipelineArn !== undefined && output.PipelineArn !== null ? output.PipelineArn : undefined,
    };
};
const deserializeAws_json1_1CreatePresignedDomainUrlResponse = (output, context) => {
    return {
        AuthorizedUrl: output.AuthorizedUrl !== undefined && output.AuthorizedUrl !== null ? output.AuthorizedUrl : undefined,
    };
};
const deserializeAws_json1_1CreatePresignedNotebookInstanceUrlOutput = (output, context) => {
    return {
        AuthorizedUrl: output.AuthorizedUrl !== undefined && output.AuthorizedUrl !== null ? output.AuthorizedUrl : undefined,
    };
};
const deserializeAws_json1_1CreateProcessingJobResponse = (output, context) => {
    return {
        ProcessingJobArn: output.ProcessingJobArn !== undefined && output.ProcessingJobArn !== null ? output.ProcessingJobArn : undefined,
    };
};
const deserializeAws_json1_1CreateProjectOutput = (output, context) => {
    return {
        ProjectArn: output.ProjectArn !== undefined && output.ProjectArn !== null ? output.ProjectArn : undefined,
        ProjectId: output.ProjectId !== undefined && output.ProjectId !== null ? output.ProjectId : undefined,
    };
};
const deserializeAws_json1_1CreateTrainingJobResponse = (output, context) => {
    return {
        TrainingJobArn: output.TrainingJobArn !== undefined && output.TrainingJobArn !== null ? output.TrainingJobArn : undefined,
    };
};
const deserializeAws_json1_1CreateTransformJobResponse = (output, context) => {
    return {
        TransformJobArn: output.TransformJobArn !== undefined && output.TransformJobArn !== null ? output.TransformJobArn : undefined,
    };
};
const deserializeAws_json1_1CreateTrialComponentResponse = (output, context) => {
    return {
        TrialComponentArn: output.TrialComponentArn !== undefined && output.TrialComponentArn !== null
            ? output.TrialComponentArn
            : undefined,
    };
};
const deserializeAws_json1_1CreateTrialResponse = (output, context) => {
    return {
        TrialArn: output.TrialArn !== undefined && output.TrialArn !== null ? output.TrialArn : undefined,
    };
};
const deserializeAws_json1_1CreateUserProfileResponse = (output, context) => {
    return {
        UserProfileArn: output.UserProfileArn !== undefined && output.UserProfileArn !== null ? output.UserProfileArn : undefined,
    };
};
const deserializeAws_json1_1CreateWorkforceResponse = (output, context) => {
    return {
        WorkforceArn: output.WorkforceArn !== undefined && output.WorkforceArn !== null ? output.WorkforceArn : undefined,
    };
};
const deserializeAws_json1_1CreateWorkteamResponse = (output, context) => {
    return {
        WorkteamArn: output.WorkteamArn !== undefined && output.WorkteamArn !== null ? output.WorkteamArn : undefined,
    };
};
const deserializeAws_json1_1CsvContentTypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1CustomImage = (output, context) => {
    return {
        AppImageConfigName: output.AppImageConfigName !== undefined && output.AppImageConfigName !== null
            ? output.AppImageConfigName
            : undefined,
        ImageName: output.ImageName !== undefined && output.ImageName !== null ? output.ImageName : undefined,
        ImageVersionNumber: output.ImageVersionNumber !== undefined && output.ImageVersionNumber !== null
            ? output.ImageVersionNumber
            : undefined,
    };
};
const deserializeAws_json1_1CustomImages = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1CustomImage(entry, context);
    });
};
const deserializeAws_json1_1DataCaptureConfig = (output, context) => {
    return {
        CaptureContentTypeHeader: output.CaptureContentTypeHeader !== undefined && output.CaptureContentTypeHeader !== null
            ? deserializeAws_json1_1CaptureContentTypeHeader(output.CaptureContentTypeHeader, context)
            : undefined,
        CaptureOptions: output.CaptureOptions !== undefined && output.CaptureOptions !== null
            ? deserializeAws_json1_1CaptureOptionList(output.CaptureOptions, context)
            : undefined,
        DestinationS3Uri: output.DestinationS3Uri !== undefined && output.DestinationS3Uri !== null ? output.DestinationS3Uri : undefined,
        EnableCapture: output.EnableCapture !== undefined && output.EnableCapture !== null ? output.EnableCapture : undefined,
        InitialSamplingPercentage: output.InitialSamplingPercentage !== undefined && output.InitialSamplingPercentage !== null
            ? output.InitialSamplingPercentage
            : undefined,
        KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
    };
};
const deserializeAws_json1_1DataCaptureConfigSummary = (output, context) => {
    return {
        CaptureStatus: output.CaptureStatus !== undefined && output.CaptureStatus !== null ? output.CaptureStatus : undefined,
        CurrentSamplingPercentage: output.CurrentSamplingPercentage !== undefined && output.CurrentSamplingPercentage !== null
            ? output.CurrentSamplingPercentage
            : undefined,
        DestinationS3Uri: output.DestinationS3Uri !== undefined && output.DestinationS3Uri !== null ? output.DestinationS3Uri : undefined,
        EnableCapture: output.EnableCapture !== undefined && output.EnableCapture !== null ? output.EnableCapture : undefined,
        KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
    };
};
const deserializeAws_json1_1DataCatalogConfig = (output, context) => {
    return {
        Catalog: output.Catalog !== undefined && output.Catalog !== null ? output.Catalog : undefined,
        Database: output.Database !== undefined && output.Database !== null ? output.Database : undefined,
        TableName: output.TableName !== undefined && output.TableName !== null ? output.TableName : undefined,
    };
};
const deserializeAws_json1_1DataProcessing = (output, context) => {
    return {
        InputFilter: output.InputFilter !== undefined && output.InputFilter !== null ? output.InputFilter : undefined,
        JoinSource: output.JoinSource !== undefined && output.JoinSource !== null ? output.JoinSource : undefined,
        OutputFilter: output.OutputFilter !== undefined && output.OutputFilter !== null ? output.OutputFilter : undefined,
    };
};
const deserializeAws_json1_1DataQualityAppSpecification = (output, context) => {
    return {
        ContainerArguments: output.ContainerArguments !== undefined && output.ContainerArguments !== null
            ? deserializeAws_json1_1MonitoringContainerArguments(output.ContainerArguments, context)
            : undefined,
        ContainerEntrypoint: output.ContainerEntrypoint !== undefined && output.ContainerEntrypoint !== null
            ? deserializeAws_json1_1ContainerEntrypoint(output.ContainerEntrypoint, context)
            : undefined,
        Environment: output.Environment !== undefined && output.Environment !== null
            ? deserializeAws_json1_1MonitoringEnvironmentMap(output.Environment, context)
            : undefined,
        ImageUri: output.ImageUri !== undefined && output.ImageUri !== null ? output.ImageUri : undefined,
        PostAnalyticsProcessorSourceUri: output.PostAnalyticsProcessorSourceUri !== undefined && output.PostAnalyticsProcessorSourceUri !== null
            ? output.PostAnalyticsProcessorSourceUri
            : undefined,
        RecordPreprocessorSourceUri: output.RecordPreprocessorSourceUri !== undefined && output.RecordPreprocessorSourceUri !== null
            ? output.RecordPreprocessorSourceUri
            : undefined,
    };
};
const deserializeAws_json1_1DataQualityBaselineConfig = (output, context) => {
    return {
        BaseliningJobName: output.BaseliningJobName !== undefined && output.BaseliningJobName !== null
            ? output.BaseliningJobName
            : undefined,
        ConstraintsResource: output.ConstraintsResource !== undefined && output.ConstraintsResource !== null
            ? deserializeAws_json1_1MonitoringConstraintsResource(output.ConstraintsResource, context)
            : undefined,
        StatisticsResource: output.StatisticsResource !== undefined && output.StatisticsResource !== null
            ? deserializeAws_json1_1MonitoringStatisticsResource(output.StatisticsResource, context)
            : undefined,
    };
};
const deserializeAws_json1_1DataQualityJobInput = (output, context) => {
    return {
        EndpointInput: output.EndpointInput !== undefined && output.EndpointInput !== null
            ? deserializeAws_json1_1EndpointInput(output.EndpointInput, context)
            : undefined,
    };
};
const deserializeAws_json1_1DatasetDefinition = (output, context) => {
    return {
        AthenaDatasetDefinition: output.AthenaDatasetDefinition !== undefined && output.AthenaDatasetDefinition !== null
            ? deserializeAws_json1_1AthenaDatasetDefinition(output.AthenaDatasetDefinition, context)
            : undefined,
        DataDistributionType: output.DataDistributionType !== undefined && output.DataDistributionType !== null
            ? output.DataDistributionType
            : undefined,
        InputMode: output.InputMode !== undefined && output.InputMode !== null ? output.InputMode : undefined,
        LocalPath: output.LocalPath !== undefined && output.LocalPath !== null ? output.LocalPath : undefined,
        RedshiftDatasetDefinition: output.RedshiftDatasetDefinition !== undefined && output.RedshiftDatasetDefinition !== null
            ? deserializeAws_json1_1RedshiftDatasetDefinition(output.RedshiftDatasetDefinition, context)
            : undefined,
    };
};
const deserializeAws_json1_1DataSource = (output, context) => {
    return {
        FileSystemDataSource: output.FileSystemDataSource !== undefined && output.FileSystemDataSource !== null
            ? deserializeAws_json1_1FileSystemDataSource(output.FileSystemDataSource, context)
            : undefined,
        S3DataSource: output.S3DataSource !== undefined && output.S3DataSource !== null
            ? deserializeAws_json1_1S3DataSource(output.S3DataSource, context)
            : undefined,
    };
};
const deserializeAws_json1_1DebugHookConfig = (output, context) => {
    return {
        CollectionConfigurations: output.CollectionConfigurations !== undefined && output.CollectionConfigurations !== null
            ? deserializeAws_json1_1CollectionConfigurations(output.CollectionConfigurations, context)
            : undefined,
        HookParameters: output.HookParameters !== undefined && output.HookParameters !== null
            ? deserializeAws_json1_1HookParameters(output.HookParameters, context)
            : undefined,
        LocalPath: output.LocalPath !== undefined && output.LocalPath !== null ? output.LocalPath : undefined,
        S3OutputPath: output.S3OutputPath !== undefined && output.S3OutputPath !== null ? output.S3OutputPath : undefined,
    };
};
const deserializeAws_json1_1DebugRuleConfiguration = (output, context) => {
    return {
        InstanceType: output.InstanceType !== undefined && output.InstanceType !== null ? output.InstanceType : undefined,
        LocalPath: output.LocalPath !== undefined && output.LocalPath !== null ? output.LocalPath : undefined,
        RuleConfigurationName: output.RuleConfigurationName !== undefined && output.RuleConfigurationName !== null
            ? output.RuleConfigurationName
            : undefined,
        RuleEvaluatorImage: output.RuleEvaluatorImage !== undefined && output.RuleEvaluatorImage !== null
            ? output.RuleEvaluatorImage
            : undefined,
        RuleParameters: output.RuleParameters !== undefined && output.RuleParameters !== null
            ? deserializeAws_json1_1RuleParameters(output.RuleParameters, context)
            : undefined,
        S3OutputPath: output.S3OutputPath !== undefined && output.S3OutputPath !== null ? output.S3OutputPath : undefined,
        VolumeSizeInGB: output.VolumeSizeInGB !== undefined && output.VolumeSizeInGB !== null ? output.VolumeSizeInGB : undefined,
    };
};
const deserializeAws_json1_1DebugRuleConfigurations = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1DebugRuleConfiguration(entry, context);
    });
};
const deserializeAws_json1_1DebugRuleEvaluationStatus = (output, context) => {
    return {
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        RuleConfigurationName: output.RuleConfigurationName !== undefined && output.RuleConfigurationName !== null
            ? output.RuleConfigurationName
            : undefined,
        RuleEvaluationJobArn: output.RuleEvaluationJobArn !== undefined && output.RuleEvaluationJobArn !== null
            ? output.RuleEvaluationJobArn
            : undefined,
        RuleEvaluationStatus: output.RuleEvaluationStatus !== undefined && output.RuleEvaluationStatus !== null
            ? output.RuleEvaluationStatus
            : undefined,
        StatusDetails: output.StatusDetails !== undefined && output.StatusDetails !== null ? output.StatusDetails : undefined,
    };
};
const deserializeAws_json1_1DebugRuleEvaluationStatuses = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1DebugRuleEvaluationStatus(entry, context);
    });
};
const deserializeAws_json1_1DeleteActionResponse = (output, context) => {
    return {
        ActionArn: output.ActionArn !== undefined && output.ActionArn !== null ? output.ActionArn : undefined,
    };
};
const deserializeAws_json1_1DeleteArtifactResponse = (output, context) => {
    return {
        ArtifactArn: output.ArtifactArn !== undefined && output.ArtifactArn !== null ? output.ArtifactArn : undefined,
    };
};
const deserializeAws_json1_1DeleteAssociationResponse = (output, context) => {
    return {
        DestinationArn: output.DestinationArn !== undefined && output.DestinationArn !== null ? output.DestinationArn : undefined,
        SourceArn: output.SourceArn !== undefined && output.SourceArn !== null ? output.SourceArn : undefined,
    };
};
const deserializeAws_json1_1DeleteContextResponse = (output, context) => {
    return {
        ContextArn: output.ContextArn !== undefined && output.ContextArn !== null ? output.ContextArn : undefined,
    };
};
const deserializeAws_json1_1DeleteExperimentResponse = (output, context) => {
    return {
        ExperimentArn: output.ExperimentArn !== undefined && output.ExperimentArn !== null ? output.ExperimentArn : undefined,
    };
};
const deserializeAws_json1_1DeleteFlowDefinitionResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteHumanTaskUiResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteImageResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteImageVersionResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeletePipelineResponse = (output, context) => {
    return {
        PipelineArn: output.PipelineArn !== undefined && output.PipelineArn !== null ? output.PipelineArn : undefined,
    };
};
const deserializeAws_json1_1DeleteTagsOutput = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteTrialComponentResponse = (output, context) => {
    return {
        TrialComponentArn: output.TrialComponentArn !== undefined && output.TrialComponentArn !== null
            ? output.TrialComponentArn
            : undefined,
    };
};
const deserializeAws_json1_1DeleteTrialResponse = (output, context) => {
    return {
        TrialArn: output.TrialArn !== undefined && output.TrialArn !== null ? output.TrialArn : undefined,
    };
};
const deserializeAws_json1_1DeleteWorkforceResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteWorkteamResponse = (output, context) => {
    return {
        Success: output.Success !== undefined && output.Success !== null ? output.Success : undefined,
    };
};
const deserializeAws_json1_1DeployedImage = (output, context) => {
    return {
        ResolutionTime: output.ResolutionTime !== undefined && output.ResolutionTime !== null
            ? new Date(Math.round(output.ResolutionTime * 1000))
            : undefined,
        ResolvedImage: output.ResolvedImage !== undefined && output.ResolvedImage !== null ? output.ResolvedImage : undefined,
        SpecifiedImage: output.SpecifiedImage !== undefined && output.SpecifiedImage !== null ? output.SpecifiedImage : undefined,
    };
};
const deserializeAws_json1_1DeployedImages = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1DeployedImage(entry, context);
    });
};
const deserializeAws_json1_1DeploymentConfig = (output, context) => {
    return {
        AutoRollbackConfiguration: output.AutoRollbackConfiguration !== undefined && output.AutoRollbackConfiguration !== null
            ? deserializeAws_json1_1AutoRollbackConfig(output.AutoRollbackConfiguration, context)
            : undefined,
        BlueGreenUpdatePolicy: output.BlueGreenUpdatePolicy !== undefined && output.BlueGreenUpdatePolicy !== null
            ? deserializeAws_json1_1BlueGreenUpdatePolicy(output.BlueGreenUpdatePolicy, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeActionResponse = (output, context) => {
    return {
        ActionArn: output.ActionArn !== undefined && output.ActionArn !== null ? output.ActionArn : undefined,
        ActionName: output.ActionName !== undefined && output.ActionName !== null ? output.ActionName : undefined,
        ActionType: output.ActionType !== undefined && output.ActionType !== null ? output.ActionType : undefined,
        CreatedBy: output.CreatedBy !== undefined && output.CreatedBy !== null
            ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
        LastModifiedBy: output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
            ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        MetadataProperties: output.MetadataProperties !== undefined && output.MetadataProperties !== null
            ? deserializeAws_json1_1MetadataProperties(output.MetadataProperties, context)
            : undefined,
        Properties: output.Properties !== undefined && output.Properties !== null
            ? deserializeAws_json1_1LineageEntityParameters(output.Properties, context)
            : undefined,
        Source: output.Source !== undefined && output.Source !== null
            ? deserializeAws_json1_1ActionSource(output.Source, context)
            : undefined,
        Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
    };
};
const deserializeAws_json1_1DescribeAlgorithmOutput = (output, context) => {
    return {
        AlgorithmArn: output.AlgorithmArn !== undefined && output.AlgorithmArn !== null ? output.AlgorithmArn : undefined,
        AlgorithmDescription: output.AlgorithmDescription !== undefined && output.AlgorithmDescription !== null
            ? output.AlgorithmDescription
            : undefined,
        AlgorithmName: output.AlgorithmName !== undefined && output.AlgorithmName !== null ? output.AlgorithmName : undefined,
        AlgorithmStatus: output.AlgorithmStatus !== undefined && output.AlgorithmStatus !== null ? output.AlgorithmStatus : undefined,
        AlgorithmStatusDetails: output.AlgorithmStatusDetails !== undefined && output.AlgorithmStatusDetails !== null
            ? deserializeAws_json1_1AlgorithmStatusDetails(output.AlgorithmStatusDetails, context)
            : undefined,
        CertifyForMarketplace: output.CertifyForMarketplace !== undefined && output.CertifyForMarketplace !== null
            ? output.CertifyForMarketplace
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        InferenceSpecification: output.InferenceSpecification !== undefined && output.InferenceSpecification !== null
            ? deserializeAws_json1_1InferenceSpecification(output.InferenceSpecification, context)
            : undefined,
        ProductId: output.ProductId !== undefined && output.ProductId !== null ? output.ProductId : undefined,
        TrainingSpecification: output.TrainingSpecification !== undefined && output.TrainingSpecification !== null
            ? deserializeAws_json1_1TrainingSpecification(output.TrainingSpecification, context)
            : undefined,
        ValidationSpecification: output.ValidationSpecification !== undefined && output.ValidationSpecification !== null
            ? deserializeAws_json1_1AlgorithmValidationSpecification(output.ValidationSpecification, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeAppImageConfigResponse = (output, context) => {
    return {
        AppImageConfigArn: output.AppImageConfigArn !== undefined && output.AppImageConfigArn !== null
            ? output.AppImageConfigArn
            : undefined,
        AppImageConfigName: output.AppImageConfigName !== undefined && output.AppImageConfigName !== null
            ? output.AppImageConfigName
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        KernelGatewayImageConfig: output.KernelGatewayImageConfig !== undefined && output.KernelGatewayImageConfig !== null
            ? deserializeAws_json1_1KernelGatewayImageConfig(output.KernelGatewayImageConfig, context)
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
    };
};
const deserializeAws_json1_1DescribeAppResponse = (output, context) => {
    return {
        AppArn: output.AppArn !== undefined && output.AppArn !== null ? output.AppArn : undefined,
        AppName: output.AppName !== undefined && output.AppName !== null ? output.AppName : undefined,
        AppType: output.AppType !== undefined && output.AppType !== null ? output.AppType : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        DomainId: output.DomainId !== undefined && output.DomainId !== null ? output.DomainId : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        LastHealthCheckTimestamp: output.LastHealthCheckTimestamp !== undefined && output.LastHealthCheckTimestamp !== null
            ? new Date(Math.round(output.LastHealthCheckTimestamp * 1000))
            : undefined,
        LastUserActivityTimestamp: output.LastUserActivityTimestamp !== undefined && output.LastUserActivityTimestamp !== null
            ? new Date(Math.round(output.LastUserActivityTimestamp * 1000))
            : undefined,
        ResourceSpec: output.ResourceSpec !== undefined && output.ResourceSpec !== null
            ? deserializeAws_json1_1ResourceSpec(output.ResourceSpec, context)
            : undefined,
        Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
        UserProfileName: output.UserProfileName !== undefined && output.UserProfileName !== null ? output.UserProfileName : undefined,
    };
};
const deserializeAws_json1_1DescribeArtifactResponse = (output, context) => {
    return {
        ArtifactArn: output.ArtifactArn !== undefined && output.ArtifactArn !== null ? output.ArtifactArn : undefined,
        ArtifactName: output.ArtifactName !== undefined && output.ArtifactName !== null ? output.ArtifactName : undefined,
        ArtifactType: output.ArtifactType !== undefined && output.ArtifactType !== null ? output.ArtifactType : undefined,
        CreatedBy: output.CreatedBy !== undefined && output.CreatedBy !== null
            ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        LastModifiedBy: output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
            ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        MetadataProperties: output.MetadataProperties !== undefined && output.MetadataProperties !== null
            ? deserializeAws_json1_1MetadataProperties(output.MetadataProperties, context)
            : undefined,
        Properties: output.Properties !== undefined && output.Properties !== null
            ? deserializeAws_json1_1LineageEntityParameters(output.Properties, context)
            : undefined,
        Source: output.Source !== undefined && output.Source !== null
            ? deserializeAws_json1_1ArtifactSource(output.Source, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeAutoMLJobResponse = (output, context) => {
    return {
        AutoMLJobArn: output.AutoMLJobArn !== undefined && output.AutoMLJobArn !== null ? output.AutoMLJobArn : undefined,
        AutoMLJobArtifacts: output.AutoMLJobArtifacts !== undefined && output.AutoMLJobArtifacts !== null
            ? deserializeAws_json1_1AutoMLJobArtifacts(output.AutoMLJobArtifacts, context)
            : undefined,
        AutoMLJobConfig: output.AutoMLJobConfig !== undefined && output.AutoMLJobConfig !== null
            ? deserializeAws_json1_1AutoMLJobConfig(output.AutoMLJobConfig, context)
            : undefined,
        AutoMLJobName: output.AutoMLJobName !== undefined && output.AutoMLJobName !== null ? output.AutoMLJobName : undefined,
        AutoMLJobObjective: output.AutoMLJobObjective !== undefined && output.AutoMLJobObjective !== null
            ? deserializeAws_json1_1AutoMLJobObjective(output.AutoMLJobObjective, context)
            : undefined,
        AutoMLJobSecondaryStatus: output.AutoMLJobSecondaryStatus !== undefined && output.AutoMLJobSecondaryStatus !== null
            ? output.AutoMLJobSecondaryStatus
            : undefined,
        AutoMLJobStatus: output.AutoMLJobStatus !== undefined && output.AutoMLJobStatus !== null ? output.AutoMLJobStatus : undefined,
        BestCandidate: output.BestCandidate !== undefined && output.BestCandidate !== null
            ? deserializeAws_json1_1AutoMLCandidate(output.BestCandidate, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        EndTime: output.EndTime !== undefined && output.EndTime !== null ? new Date(Math.round(output.EndTime * 1000)) : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        GenerateCandidateDefinitionsOnly: output.GenerateCandidateDefinitionsOnly !== undefined && output.GenerateCandidateDefinitionsOnly !== null
            ? output.GenerateCandidateDefinitionsOnly
            : undefined,
        InputDataConfig: output.InputDataConfig !== undefined && output.InputDataConfig !== null
            ? deserializeAws_json1_1AutoMLInputDataConfig(output.InputDataConfig, context)
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        ModelDeployConfig: output.ModelDeployConfig !== undefined && output.ModelDeployConfig !== null
            ? deserializeAws_json1_1ModelDeployConfig(output.ModelDeployConfig, context)
            : undefined,
        ModelDeployResult: output.ModelDeployResult !== undefined && output.ModelDeployResult !== null
            ? deserializeAws_json1_1ModelDeployResult(output.ModelDeployResult, context)
            : undefined,
        OutputDataConfig: output.OutputDataConfig !== undefined && output.OutputDataConfig !== null
            ? deserializeAws_json1_1AutoMLOutputDataConfig(output.OutputDataConfig, context)
            : undefined,
        PartialFailureReasons: output.PartialFailureReasons !== undefined && output.PartialFailureReasons !== null
            ? deserializeAws_json1_1AutoMLPartialFailureReasons(output.PartialFailureReasons, context)
            : undefined,
        ProblemType: output.ProblemType !== undefined && output.ProblemType !== null ? output.ProblemType : undefined,
        ResolvedAttributes: output.ResolvedAttributes !== undefined && output.ResolvedAttributes !== null
            ? deserializeAws_json1_1ResolvedAttributes(output.ResolvedAttributes, context)
            : undefined,
        RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
    };
};
const deserializeAws_json1_1DescribeCodeRepositoryOutput = (output, context) => {
    return {
        CodeRepositoryArn: output.CodeRepositoryArn !== undefined && output.CodeRepositoryArn !== null
            ? output.CodeRepositoryArn
            : undefined,
        CodeRepositoryName: output.CodeRepositoryName !== undefined && output.CodeRepositoryName !== null
            ? output.CodeRepositoryName
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        GitConfig: output.GitConfig !== undefined && output.GitConfig !== null
            ? deserializeAws_json1_1GitConfig(output.GitConfig, context)
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
    };
};
const deserializeAws_json1_1DescribeCompilationJobResponse = (output, context) => {
    return {
        CompilationEndTime: output.CompilationEndTime !== undefined && output.CompilationEndTime !== null
            ? new Date(Math.round(output.CompilationEndTime * 1000))
            : undefined,
        CompilationJobArn: output.CompilationJobArn !== undefined && output.CompilationJobArn !== null
            ? output.CompilationJobArn
            : undefined,
        CompilationJobName: output.CompilationJobName !== undefined && output.CompilationJobName !== null
            ? output.CompilationJobName
            : undefined,
        CompilationJobStatus: output.CompilationJobStatus !== undefined && output.CompilationJobStatus !== null
            ? output.CompilationJobStatus
            : undefined,
        CompilationStartTime: output.CompilationStartTime !== undefined && output.CompilationStartTime !== null
            ? new Date(Math.round(output.CompilationStartTime * 1000))
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        InputConfig: output.InputConfig !== undefined && output.InputConfig !== null
            ? deserializeAws_json1_1InputConfig(output.InputConfig, context)
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        ModelArtifacts: output.ModelArtifacts !== undefined && output.ModelArtifacts !== null
            ? deserializeAws_json1_1ModelArtifacts(output.ModelArtifacts, context)
            : undefined,
        ModelDigests: output.ModelDigests !== undefined && output.ModelDigests !== null
            ? deserializeAws_json1_1ModelDigests(output.ModelDigests, context)
            : undefined,
        OutputConfig: output.OutputConfig !== undefined && output.OutputConfig !== null
            ? deserializeAws_json1_1OutputConfig(output.OutputConfig, context)
            : undefined,
        RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
        StoppingCondition: output.StoppingCondition !== undefined && output.StoppingCondition !== null
            ? deserializeAws_json1_1StoppingCondition(output.StoppingCondition, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeContextResponse = (output, context) => {
    return {
        ContextArn: output.ContextArn !== undefined && output.ContextArn !== null ? output.ContextArn : undefined,
        ContextName: output.ContextName !== undefined && output.ContextName !== null ? output.ContextName : undefined,
        ContextType: output.ContextType !== undefined && output.ContextType !== null ? output.ContextType : undefined,
        CreatedBy: output.CreatedBy !== undefined && output.CreatedBy !== null
            ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
        LastModifiedBy: output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
            ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        Properties: output.Properties !== undefined && output.Properties !== null
            ? deserializeAws_json1_1LineageEntityParameters(output.Properties, context)
            : undefined,
        Source: output.Source !== undefined && output.Source !== null
            ? deserializeAws_json1_1ContextSource(output.Source, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeDataQualityJobDefinitionResponse = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        DataQualityAppSpecification: output.DataQualityAppSpecification !== undefined && output.DataQualityAppSpecification !== null
            ? deserializeAws_json1_1DataQualityAppSpecification(output.DataQualityAppSpecification, context)
            : undefined,
        DataQualityBaselineConfig: output.DataQualityBaselineConfig !== undefined && output.DataQualityBaselineConfig !== null
            ? deserializeAws_json1_1DataQualityBaselineConfig(output.DataQualityBaselineConfig, context)
            : undefined,
        DataQualityJobInput: output.DataQualityJobInput !== undefined && output.DataQualityJobInput !== null
            ? deserializeAws_json1_1DataQualityJobInput(output.DataQualityJobInput, context)
            : undefined,
        DataQualityJobOutputConfig: output.DataQualityJobOutputConfig !== undefined && output.DataQualityJobOutputConfig !== null
            ? deserializeAws_json1_1MonitoringOutputConfig(output.DataQualityJobOutputConfig, context)
            : undefined,
        JobDefinitionArn: output.JobDefinitionArn !== undefined && output.JobDefinitionArn !== null ? output.JobDefinitionArn : undefined,
        JobDefinitionName: output.JobDefinitionName !== undefined && output.JobDefinitionName !== null
            ? output.JobDefinitionName
            : undefined,
        JobResources: output.JobResources !== undefined && output.JobResources !== null
            ? deserializeAws_json1_1MonitoringResources(output.JobResources, context)
            : undefined,
        NetworkConfig: output.NetworkConfig !== undefined && output.NetworkConfig !== null
            ? deserializeAws_json1_1MonitoringNetworkConfig(output.NetworkConfig, context)
            : undefined,
        RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
        StoppingCondition: output.StoppingCondition !== undefined && output.StoppingCondition !== null
            ? deserializeAws_json1_1MonitoringStoppingCondition(output.StoppingCondition, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeDeviceFleetResponse = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
        DeviceFleetArn: output.DeviceFleetArn !== undefined && output.DeviceFleetArn !== null ? output.DeviceFleetArn : undefined,
        DeviceFleetName: output.DeviceFleetName !== undefined && output.DeviceFleetName !== null ? output.DeviceFleetName : undefined,
        IotRoleAlias: output.IotRoleAlias !== undefined && output.IotRoleAlias !== null ? output.IotRoleAlias : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        OutputConfig: output.OutputConfig !== undefined && output.OutputConfig !== null
            ? deserializeAws_json1_1EdgeOutputConfig(output.OutputConfig, context)
            : undefined,
        RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
    };
};
const deserializeAws_json1_1DescribeDeviceResponse = (output, context) => {
    return {
        Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
        DeviceArn: output.DeviceArn !== undefined && output.DeviceArn !== null ? output.DeviceArn : undefined,
        DeviceFleetName: output.DeviceFleetName !== undefined && output.DeviceFleetName !== null ? output.DeviceFleetName : undefined,
        DeviceName: output.DeviceName !== undefined && output.DeviceName !== null ? output.DeviceName : undefined,
        IotThingName: output.IotThingName !== undefined && output.IotThingName !== null ? output.IotThingName : undefined,
        LatestHeartbeat: output.LatestHeartbeat !== undefined && output.LatestHeartbeat !== null
            ? new Date(Math.round(output.LatestHeartbeat * 1000))
            : undefined,
        MaxModels: output.MaxModels !== undefined && output.MaxModels !== null ? output.MaxModels : undefined,
        Models: output.Models !== undefined && output.Models !== null
            ? deserializeAws_json1_1EdgeModels(output.Models, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
        RegistrationTime: output.RegistrationTime !== undefined && output.RegistrationTime !== null
            ? new Date(Math.round(output.RegistrationTime * 1000))
            : undefined,
    };
};
const deserializeAws_json1_1DescribeDomainResponse = (output, context) => {
    return {
        AppNetworkAccessType: output.AppNetworkAccessType !== undefined && output.AppNetworkAccessType !== null
            ? output.AppNetworkAccessType
            : undefined,
        AuthMode: output.AuthMode !== undefined && output.AuthMode !== null ? output.AuthMode : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        DefaultUserSettings: output.DefaultUserSettings !== undefined && output.DefaultUserSettings !== null
            ? deserializeAws_json1_1UserSettings(output.DefaultUserSettings, context)
            : undefined,
        DomainArn: output.DomainArn !== undefined && output.DomainArn !== null ? output.DomainArn : undefined,
        DomainId: output.DomainId !== undefined && output.DomainId !== null ? output.DomainId : undefined,
        DomainName: output.DomainName !== undefined && output.DomainName !== null ? output.DomainName : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        HomeEfsFileSystemId: output.HomeEfsFileSystemId !== undefined && output.HomeEfsFileSystemId !== null
            ? output.HomeEfsFileSystemId
            : undefined,
        HomeEfsFileSystemKmsKeyId: output.HomeEfsFileSystemKmsKeyId !== undefined && output.HomeEfsFileSystemKmsKeyId !== null
            ? output.HomeEfsFileSystemKmsKeyId
            : undefined,
        KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        SingleSignOnManagedApplicationInstanceId: output.SingleSignOnManagedApplicationInstanceId !== undefined &&
            output.SingleSignOnManagedApplicationInstanceId !== null
            ? output.SingleSignOnManagedApplicationInstanceId
            : undefined,
        Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
        SubnetIds: output.SubnetIds !== undefined && output.SubnetIds !== null
            ? deserializeAws_json1_1Subnets(output.SubnetIds, context)
            : undefined,
        Url: output.Url !== undefined && output.Url !== null ? output.Url : undefined,
        VpcId: output.VpcId !== undefined && output.VpcId !== null ? output.VpcId : undefined,
    };
};
const deserializeAws_json1_1DescribeEdgePackagingJobResponse = (output, context) => {
    return {
        CompilationJobName: output.CompilationJobName !== undefined && output.CompilationJobName !== null
            ? output.CompilationJobName
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        EdgePackagingJobArn: output.EdgePackagingJobArn !== undefined && output.EdgePackagingJobArn !== null
            ? output.EdgePackagingJobArn
            : undefined,
        EdgePackagingJobName: output.EdgePackagingJobName !== undefined && output.EdgePackagingJobName !== null
            ? output.EdgePackagingJobName
            : undefined,
        EdgePackagingJobStatus: output.EdgePackagingJobStatus !== undefined && output.EdgePackagingJobStatus !== null
            ? output.EdgePackagingJobStatus
            : undefined,
        EdgePackagingJobStatusMessage: output.EdgePackagingJobStatusMessage !== undefined && output.EdgePackagingJobStatusMessage !== null
            ? output.EdgePackagingJobStatusMessage
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        ModelArtifact: output.ModelArtifact !== undefined && output.ModelArtifact !== null ? output.ModelArtifact : undefined,
        ModelName: output.ModelName !== undefined && output.ModelName !== null ? output.ModelName : undefined,
        ModelSignature: output.ModelSignature !== undefined && output.ModelSignature !== null ? output.ModelSignature : undefined,
        ModelVersion: output.ModelVersion !== undefined && output.ModelVersion !== null ? output.ModelVersion : undefined,
        OutputConfig: output.OutputConfig !== undefined && output.OutputConfig !== null
            ? deserializeAws_json1_1EdgeOutputConfig(output.OutputConfig, context)
            : undefined,
        ResourceKey: output.ResourceKey !== undefined && output.ResourceKey !== null ? output.ResourceKey : undefined,
        RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
    };
};
const deserializeAws_json1_1DescribeEndpointConfigOutput = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        DataCaptureConfig: output.DataCaptureConfig !== undefined && output.DataCaptureConfig !== null
            ? deserializeAws_json1_1DataCaptureConfig(output.DataCaptureConfig, context)
            : undefined,
        EndpointConfigArn: output.EndpointConfigArn !== undefined && output.EndpointConfigArn !== null
            ? output.EndpointConfigArn
            : undefined,
        EndpointConfigName: output.EndpointConfigName !== undefined && output.EndpointConfigName !== null
            ? output.EndpointConfigName
            : undefined,
        KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
        ProductionVariants: output.ProductionVariants !== undefined && output.ProductionVariants !== null
            ? deserializeAws_json1_1ProductionVariantList(output.ProductionVariants, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeEndpointOutput = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        DataCaptureConfig: output.DataCaptureConfig !== undefined && output.DataCaptureConfig !== null
            ? deserializeAws_json1_1DataCaptureConfigSummary(output.DataCaptureConfig, context)
            : undefined,
        EndpointArn: output.EndpointArn !== undefined && output.EndpointArn !== null ? output.EndpointArn : undefined,
        EndpointConfigName: output.EndpointConfigName !== undefined && output.EndpointConfigName !== null
            ? output.EndpointConfigName
            : undefined,
        EndpointName: output.EndpointName !== undefined && output.EndpointName !== null ? output.EndpointName : undefined,
        EndpointStatus: output.EndpointStatus !== undefined && output.EndpointStatus !== null ? output.EndpointStatus : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        LastDeploymentConfig: output.LastDeploymentConfig !== undefined && output.LastDeploymentConfig !== null
            ? deserializeAws_json1_1DeploymentConfig(output.LastDeploymentConfig, context)
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        ProductionVariants: output.ProductionVariants !== undefined && output.ProductionVariants !== null
            ? deserializeAws_json1_1ProductionVariantSummaryList(output.ProductionVariants, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeExperimentResponse = (output, context) => {
    return {
        CreatedBy: output.CreatedBy !== undefined && output.CreatedBy !== null
            ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
        DisplayName: output.DisplayName !== undefined && output.DisplayName !== null ? output.DisplayName : undefined,
        ExperimentArn: output.ExperimentArn !== undefined && output.ExperimentArn !== null ? output.ExperimentArn : undefined,
        ExperimentName: output.ExperimentName !== undefined && output.ExperimentName !== null ? output.ExperimentName : undefined,
        LastModifiedBy: output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
            ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        Source: output.Source !== undefined && output.Source !== null
            ? deserializeAws_json1_1ExperimentSource(output.Source, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeFeatureGroupResponse = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
        EventTimeFeatureName: output.EventTimeFeatureName !== undefined && output.EventTimeFeatureName !== null
            ? output.EventTimeFeatureName
            : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        FeatureDefinitions: output.FeatureDefinitions !== undefined && output.FeatureDefinitions !== null
            ? deserializeAws_json1_1FeatureDefinitions(output.FeatureDefinitions, context)
            : undefined,
        FeatureGroupArn: output.FeatureGroupArn !== undefined && output.FeatureGroupArn !== null ? output.FeatureGroupArn : undefined,
        FeatureGroupName: output.FeatureGroupName !== undefined && output.FeatureGroupName !== null ? output.FeatureGroupName : undefined,
        FeatureGroupStatus: output.FeatureGroupStatus !== undefined && output.FeatureGroupStatus !== null
            ? output.FeatureGroupStatus
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
        OfflineStoreConfig: output.OfflineStoreConfig !== undefined && output.OfflineStoreConfig !== null
            ? deserializeAws_json1_1OfflineStoreConfig(output.OfflineStoreConfig, context)
            : undefined,
        OfflineStoreStatus: output.OfflineStoreStatus !== undefined && output.OfflineStoreStatus !== null
            ? deserializeAws_json1_1OfflineStoreStatus(output.OfflineStoreStatus, context)
            : undefined,
        OnlineStoreConfig: output.OnlineStoreConfig !== undefined && output.OnlineStoreConfig !== null
            ? deserializeAws_json1_1OnlineStoreConfig(output.OnlineStoreConfig, context)
            : undefined,
        RecordIdentifierFeatureName: output.RecordIdentifierFeatureName !== undefined && output.RecordIdentifierFeatureName !== null
            ? output.RecordIdentifierFeatureName
            : undefined,
        RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
    };
};
const deserializeAws_json1_1DescribeFlowDefinitionResponse = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        FlowDefinitionArn: output.FlowDefinitionArn !== undefined && output.FlowDefinitionArn !== null
            ? output.FlowDefinitionArn
            : undefined,
        FlowDefinitionName: output.FlowDefinitionName !== undefined && output.FlowDefinitionName !== null
            ? output.FlowDefinitionName
            : undefined,
        FlowDefinitionStatus: output.FlowDefinitionStatus !== undefined && output.FlowDefinitionStatus !== null
            ? output.FlowDefinitionStatus
            : undefined,
        HumanLoopActivationConfig: output.HumanLoopActivationConfig !== undefined && output.HumanLoopActivationConfig !== null
            ? deserializeAws_json1_1HumanLoopActivationConfig(output.HumanLoopActivationConfig, context)
            : undefined,
        HumanLoopConfig: output.HumanLoopConfig !== undefined && output.HumanLoopConfig !== null
            ? deserializeAws_json1_1HumanLoopConfig(output.HumanLoopConfig, context)
            : undefined,
        HumanLoopRequestSource: output.HumanLoopRequestSource !== undefined && output.HumanLoopRequestSource !== null
            ? deserializeAws_json1_1HumanLoopRequestSource(output.HumanLoopRequestSource, context)
            : undefined,
        OutputConfig: output.OutputConfig !== undefined && output.OutputConfig !== null
            ? deserializeAws_json1_1FlowDefinitionOutputConfig(output.OutputConfig, context)
            : undefined,
        RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
    };
};
const deserializeAws_json1_1DescribeHumanTaskUiResponse = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        HumanTaskUiArn: output.HumanTaskUiArn !== undefined && output.HumanTaskUiArn !== null ? output.HumanTaskUiArn : undefined,
        HumanTaskUiName: output.HumanTaskUiName !== undefined && output.HumanTaskUiName !== null ? output.HumanTaskUiName : undefined,
        HumanTaskUiStatus: output.HumanTaskUiStatus !== undefined && output.HumanTaskUiStatus !== null
            ? output.HumanTaskUiStatus
            : undefined,
        UiTemplate: output.UiTemplate !== undefined && output.UiTemplate !== null
            ? deserializeAws_json1_1UiTemplateInfo(output.UiTemplate, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeHyperParameterTuningJobResponse = (output, context) => {
    return {
        BestTrainingJob: output.BestTrainingJob !== undefined && output.BestTrainingJob !== null
            ? deserializeAws_json1_1HyperParameterTrainingJobSummary(output.BestTrainingJob, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        HyperParameterTuningEndTime: output.HyperParameterTuningEndTime !== undefined && output.HyperParameterTuningEndTime !== null
            ? new Date(Math.round(output.HyperParameterTuningEndTime * 1000))
            : undefined,
        HyperParameterTuningJobArn: output.HyperParameterTuningJobArn !== undefined && output.HyperParameterTuningJobArn !== null
            ? output.HyperParameterTuningJobArn
            : undefined,
        HyperParameterTuningJobConfig: output.HyperParameterTuningJobConfig !== undefined && output.HyperParameterTuningJobConfig !== null
            ? deserializeAws_json1_1HyperParameterTuningJobConfig(output.HyperParameterTuningJobConfig, context)
            : undefined,
        HyperParameterTuningJobName: output.HyperParameterTuningJobName !== undefined && output.HyperParameterTuningJobName !== null
            ? output.HyperParameterTuningJobName
            : undefined,
        HyperParameterTuningJobStatus: output.HyperParameterTuningJobStatus !== undefined && output.HyperParameterTuningJobStatus !== null
            ? output.HyperParameterTuningJobStatus
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        ObjectiveStatusCounters: output.ObjectiveStatusCounters !== undefined && output.ObjectiveStatusCounters !== null
            ? deserializeAws_json1_1ObjectiveStatusCounters(output.ObjectiveStatusCounters, context)
            : undefined,
        OverallBestTrainingJob: output.OverallBestTrainingJob !== undefined && output.OverallBestTrainingJob !== null
            ? deserializeAws_json1_1HyperParameterTrainingJobSummary(output.OverallBestTrainingJob, context)
            : undefined,
        TrainingJobDefinition: output.TrainingJobDefinition !== undefined && output.TrainingJobDefinition !== null
            ? deserializeAws_json1_1HyperParameterTrainingJobDefinition(output.TrainingJobDefinition, context)
            : undefined,
        TrainingJobDefinitions: output.TrainingJobDefinitions !== undefined && output.TrainingJobDefinitions !== null
            ? deserializeAws_json1_1HyperParameterTrainingJobDefinitions(output.TrainingJobDefinitions, context)
            : undefined,
        TrainingJobStatusCounters: output.TrainingJobStatusCounters !== undefined && output.TrainingJobStatusCounters !== null
            ? deserializeAws_json1_1TrainingJobStatusCounters(output.TrainingJobStatusCounters, context)
            : undefined,
        WarmStartConfig: output.WarmStartConfig !== undefined && output.WarmStartConfig !== null
            ? deserializeAws_json1_1HyperParameterTuningJobWarmStartConfig(output.WarmStartConfig, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeImageResponse = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
        DisplayName: output.DisplayName !== undefined && output.DisplayName !== null ? output.DisplayName : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        ImageArn: output.ImageArn !== undefined && output.ImageArn !== null ? output.ImageArn : undefined,
        ImageName: output.ImageName !== undefined && output.ImageName !== null ? output.ImageName : undefined,
        ImageStatus: output.ImageStatus !== undefined && output.ImageStatus !== null ? output.ImageStatus : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
    };
};
const deserializeAws_json1_1DescribeImageVersionResponse = (output, context) => {
    return {
        BaseImage: output.BaseImage !== undefined && output.BaseImage !== null ? output.BaseImage : undefined,
        ContainerImage: output.ContainerImage !== undefined && output.ContainerImage !== null ? output.ContainerImage : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        ImageArn: output.ImageArn !== undefined && output.ImageArn !== null ? output.ImageArn : undefined,
        ImageVersionArn: output.ImageVersionArn !== undefined && output.ImageVersionArn !== null ? output.ImageVersionArn : undefined,
        ImageVersionStatus: output.ImageVersionStatus !== undefined && output.ImageVersionStatus !== null
            ? output.ImageVersionStatus
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        Version: output.Version !== undefined && output.Version !== null ? output.Version : undefined,
    };
};
const deserializeAws_json1_1DescribeLabelingJobResponse = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        HumanTaskConfig: output.HumanTaskConfig !== undefined && output.HumanTaskConfig !== null
            ? deserializeAws_json1_1HumanTaskConfig(output.HumanTaskConfig, context)
            : undefined,
        InputConfig: output.InputConfig !== undefined && output.InputConfig !== null
            ? deserializeAws_json1_1LabelingJobInputConfig(output.InputConfig, context)
            : undefined,
        JobReferenceCode: output.JobReferenceCode !== undefined && output.JobReferenceCode !== null ? output.JobReferenceCode : undefined,
        LabelAttributeName: output.LabelAttributeName !== undefined && output.LabelAttributeName !== null
            ? output.LabelAttributeName
            : undefined,
        LabelCategoryConfigS3Uri: output.LabelCategoryConfigS3Uri !== undefined && output.LabelCategoryConfigS3Uri !== null
            ? output.LabelCategoryConfigS3Uri
            : undefined,
        LabelCounters: output.LabelCounters !== undefined && output.LabelCounters !== null
            ? deserializeAws_json1_1LabelCounters(output.LabelCounters, context)
            : undefined,
        LabelingJobAlgorithmsConfig: output.LabelingJobAlgorithmsConfig !== undefined && output.LabelingJobAlgorithmsConfig !== null
            ? deserializeAws_json1_1LabelingJobAlgorithmsConfig(output.LabelingJobAlgorithmsConfig, context)
            : undefined,
        LabelingJobArn: output.LabelingJobArn !== undefined && output.LabelingJobArn !== null ? output.LabelingJobArn : undefined,
        LabelingJobName: output.LabelingJobName !== undefined && output.LabelingJobName !== null ? output.LabelingJobName : undefined,
        LabelingJobOutput: output.LabelingJobOutput !== undefined && output.LabelingJobOutput !== null
            ? deserializeAws_json1_1LabelingJobOutput(output.LabelingJobOutput, context)
            : undefined,
        LabelingJobStatus: output.LabelingJobStatus !== undefined && output.LabelingJobStatus !== null
            ? output.LabelingJobStatus
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        OutputConfig: output.OutputConfig !== undefined && output.OutputConfig !== null
            ? deserializeAws_json1_1LabelingJobOutputConfig(output.OutputConfig, context)
            : undefined,
        RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
        StoppingConditions: output.StoppingConditions !== undefined && output.StoppingConditions !== null
            ? deserializeAws_json1_1LabelingJobStoppingConditions(output.StoppingConditions, context)
            : undefined,
        Tags: output.Tags !== undefined && output.Tags !== null
            ? deserializeAws_json1_1TagList(output.Tags, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeModelBiasJobDefinitionResponse = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        JobDefinitionArn: output.JobDefinitionArn !== undefined && output.JobDefinitionArn !== null ? output.JobDefinitionArn : undefined,
        JobDefinitionName: output.JobDefinitionName !== undefined && output.JobDefinitionName !== null
            ? output.JobDefinitionName
            : undefined,
        JobResources: output.JobResources !== undefined && output.JobResources !== null
            ? deserializeAws_json1_1MonitoringResources(output.JobResources, context)
            : undefined,
        ModelBiasAppSpecification: output.ModelBiasAppSpecification !== undefined && output.ModelBiasAppSpecification !== null
            ? deserializeAws_json1_1ModelBiasAppSpecification(output.ModelBiasAppSpecification, context)
            : undefined,
        ModelBiasBaselineConfig: output.ModelBiasBaselineConfig !== undefined && output.ModelBiasBaselineConfig !== null
            ? deserializeAws_json1_1ModelBiasBaselineConfig(output.ModelBiasBaselineConfig, context)
            : undefined,
        ModelBiasJobInput: output.ModelBiasJobInput !== undefined && output.ModelBiasJobInput !== null
            ? deserializeAws_json1_1ModelBiasJobInput(output.ModelBiasJobInput, context)
            : undefined,
        ModelBiasJobOutputConfig: output.ModelBiasJobOutputConfig !== undefined && output.ModelBiasJobOutputConfig !== null
            ? deserializeAws_json1_1MonitoringOutputConfig(output.ModelBiasJobOutputConfig, context)
            : undefined,
        NetworkConfig: output.NetworkConfig !== undefined && output.NetworkConfig !== null
            ? deserializeAws_json1_1MonitoringNetworkConfig(output.NetworkConfig, context)
            : undefined,
        RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
        StoppingCondition: output.StoppingCondition !== undefined && output.StoppingCondition !== null
            ? deserializeAws_json1_1MonitoringStoppingCondition(output.StoppingCondition, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeModelExplainabilityJobDefinitionResponse = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        JobDefinitionArn: output.JobDefinitionArn !== undefined && output.JobDefinitionArn !== null ? output.JobDefinitionArn : undefined,
        JobDefinitionName: output.JobDefinitionName !== undefined && output.JobDefinitionName !== null
            ? output.JobDefinitionName
            : undefined,
        JobResources: output.JobResources !== undefined && output.JobResources !== null
            ? deserializeAws_json1_1MonitoringResources(output.JobResources, context)
            : undefined,
        ModelExplainabilityAppSpecification: output.ModelExplainabilityAppSpecification !== undefined && output.ModelExplainabilityAppSpecification !== null
            ? deserializeAws_json1_1ModelExplainabilityAppSpecification(output.ModelExplainabilityAppSpecification, context)
            : undefined,
        ModelExplainabilityBaselineConfig: output.ModelExplainabilityBaselineConfig !== undefined && output.ModelExplainabilityBaselineConfig !== null
            ? deserializeAws_json1_1ModelExplainabilityBaselineConfig(output.ModelExplainabilityBaselineConfig, context)
            : undefined,
        ModelExplainabilityJobInput: output.ModelExplainabilityJobInput !== undefined && output.ModelExplainabilityJobInput !== null
            ? deserializeAws_json1_1ModelExplainabilityJobInput(output.ModelExplainabilityJobInput, context)
            : undefined,
        ModelExplainabilityJobOutputConfig: output.ModelExplainabilityJobOutputConfig !== undefined && output.ModelExplainabilityJobOutputConfig !== null
            ? deserializeAws_json1_1MonitoringOutputConfig(output.ModelExplainabilityJobOutputConfig, context)
            : undefined,
        NetworkConfig: output.NetworkConfig !== undefined && output.NetworkConfig !== null
            ? deserializeAws_json1_1MonitoringNetworkConfig(output.NetworkConfig, context)
            : undefined,
        RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
        StoppingCondition: output.StoppingCondition !== undefined && output.StoppingCondition !== null
            ? deserializeAws_json1_1MonitoringStoppingCondition(output.StoppingCondition, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeModelOutput = (output, context) => {
    return {
        Containers: output.Containers !== undefined && output.Containers !== null
            ? deserializeAws_json1_1ContainerDefinitionList(output.Containers, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        EnableNetworkIsolation: output.EnableNetworkIsolation !== undefined && output.EnableNetworkIsolation !== null
            ? output.EnableNetworkIsolation
            : undefined,
        ExecutionRoleArn: output.ExecutionRoleArn !== undefined && output.ExecutionRoleArn !== null ? output.ExecutionRoleArn : undefined,
        InferenceExecutionConfig: output.InferenceExecutionConfig !== undefined && output.InferenceExecutionConfig !== null
            ? deserializeAws_json1_1InferenceExecutionConfig(output.InferenceExecutionConfig, context)
            : undefined,
        ModelArn: output.ModelArn !== undefined && output.ModelArn !== null ? output.ModelArn : undefined,
        ModelName: output.ModelName !== undefined && output.ModelName !== null ? output.ModelName : undefined,
        PrimaryContainer: output.PrimaryContainer !== undefined && output.PrimaryContainer !== null
            ? deserializeAws_json1_1ContainerDefinition(output.PrimaryContainer, context)
            : undefined,
        VpcConfig: output.VpcConfig !== undefined && output.VpcConfig !== null
            ? deserializeAws_json1_1VpcConfig(output.VpcConfig, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeModelPackageGroupOutput = (output, context) => {
    return {
        CreatedBy: output.CreatedBy !== undefined && output.CreatedBy !== null
            ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        ModelPackageGroupArn: output.ModelPackageGroupArn !== undefined && output.ModelPackageGroupArn !== null
            ? output.ModelPackageGroupArn
            : undefined,
        ModelPackageGroupDescription: output.ModelPackageGroupDescription !== undefined && output.ModelPackageGroupDescription !== null
            ? output.ModelPackageGroupDescription
            : undefined,
        ModelPackageGroupName: output.ModelPackageGroupName !== undefined && output.ModelPackageGroupName !== null
            ? output.ModelPackageGroupName
            : undefined,
        ModelPackageGroupStatus: output.ModelPackageGroupStatus !== undefined && output.ModelPackageGroupStatus !== null
            ? output.ModelPackageGroupStatus
            : undefined,
    };
};
const deserializeAws_json1_1DescribeModelPackageOutput = (output, context) => {
    return {
        ApprovalDescription: output.ApprovalDescription !== undefined && output.ApprovalDescription !== null
            ? output.ApprovalDescription
            : undefined,
        CertifyForMarketplace: output.CertifyForMarketplace !== undefined && output.CertifyForMarketplace !== null
            ? output.CertifyForMarketplace
            : undefined,
        CreatedBy: output.CreatedBy !== undefined && output.CreatedBy !== null
            ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        InferenceSpecification: output.InferenceSpecification !== undefined && output.InferenceSpecification !== null
            ? deserializeAws_json1_1InferenceSpecification(output.InferenceSpecification, context)
            : undefined,
        LastModifiedBy: output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
            ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        MetadataProperties: output.MetadataProperties !== undefined && output.MetadataProperties !== null
            ? deserializeAws_json1_1MetadataProperties(output.MetadataProperties, context)
            : undefined,
        ModelApprovalStatus: output.ModelApprovalStatus !== undefined && output.ModelApprovalStatus !== null
            ? output.ModelApprovalStatus
            : undefined,
        ModelMetrics: output.ModelMetrics !== undefined && output.ModelMetrics !== null
            ? deserializeAws_json1_1ModelMetrics(output.ModelMetrics, context)
            : undefined,
        ModelPackageArn: output.ModelPackageArn !== undefined && output.ModelPackageArn !== null ? output.ModelPackageArn : undefined,
        ModelPackageDescription: output.ModelPackageDescription !== undefined && output.ModelPackageDescription !== null
            ? output.ModelPackageDescription
            : undefined,
        ModelPackageGroupName: output.ModelPackageGroupName !== undefined && output.ModelPackageGroupName !== null
            ? output.ModelPackageGroupName
            : undefined,
        ModelPackageName: output.ModelPackageName !== undefined && output.ModelPackageName !== null ? output.ModelPackageName : undefined,
        ModelPackageStatus: output.ModelPackageStatus !== undefined && output.ModelPackageStatus !== null
            ? output.ModelPackageStatus
            : undefined,
        ModelPackageStatusDetails: output.ModelPackageStatusDetails !== undefined && output.ModelPackageStatusDetails !== null
            ? deserializeAws_json1_1ModelPackageStatusDetails(output.ModelPackageStatusDetails, context)
            : undefined,
        ModelPackageVersion: output.ModelPackageVersion !== undefined && output.ModelPackageVersion !== null
            ? output.ModelPackageVersion
            : undefined,
        SourceAlgorithmSpecification: output.SourceAlgorithmSpecification !== undefined && output.SourceAlgorithmSpecification !== null
            ? deserializeAws_json1_1SourceAlgorithmSpecification(output.SourceAlgorithmSpecification, context)
            : undefined,
        ValidationSpecification: output.ValidationSpecification !== undefined && output.ValidationSpecification !== null
            ? deserializeAws_json1_1ModelPackageValidationSpecification(output.ValidationSpecification, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeModelQualityJobDefinitionResponse = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        JobDefinitionArn: output.JobDefinitionArn !== undefined && output.JobDefinitionArn !== null ? output.JobDefinitionArn : undefined,
        JobDefinitionName: output.JobDefinitionName !== undefined && output.JobDefinitionName !== null
            ? output.JobDefinitionName
            : undefined,
        JobResources: output.JobResources !== undefined && output.JobResources !== null
            ? deserializeAws_json1_1MonitoringResources(output.JobResources, context)
            : undefined,
        ModelQualityAppSpecification: output.ModelQualityAppSpecification !== undefined && output.ModelQualityAppSpecification !== null
            ? deserializeAws_json1_1ModelQualityAppSpecification(output.ModelQualityAppSpecification, context)
            : undefined,
        ModelQualityBaselineConfig: output.ModelQualityBaselineConfig !== undefined && output.ModelQualityBaselineConfig !== null
            ? deserializeAws_json1_1ModelQualityBaselineConfig(output.ModelQualityBaselineConfig, context)
            : undefined,
        ModelQualityJobInput: output.ModelQualityJobInput !== undefined && output.ModelQualityJobInput !== null
            ? deserializeAws_json1_1ModelQualityJobInput(output.ModelQualityJobInput, context)
            : undefined,
        ModelQualityJobOutputConfig: output.ModelQualityJobOutputConfig !== undefined && output.ModelQualityJobOutputConfig !== null
            ? deserializeAws_json1_1MonitoringOutputConfig(output.ModelQualityJobOutputConfig, context)
            : undefined,
        NetworkConfig: output.NetworkConfig !== undefined && output.NetworkConfig !== null
            ? deserializeAws_json1_1MonitoringNetworkConfig(output.NetworkConfig, context)
            : undefined,
        RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
        StoppingCondition: output.StoppingCondition !== undefined && output.StoppingCondition !== null
            ? deserializeAws_json1_1MonitoringStoppingCondition(output.StoppingCondition, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeMonitoringScheduleResponse = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        EndpointName: output.EndpointName !== undefined && output.EndpointName !== null ? output.EndpointName : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        LastMonitoringExecutionSummary: output.LastMonitoringExecutionSummary !== undefined && output.LastMonitoringExecutionSummary !== null
            ? deserializeAws_json1_1MonitoringExecutionSummary(output.LastMonitoringExecutionSummary, context)
            : undefined,
        MonitoringScheduleArn: output.MonitoringScheduleArn !== undefined && output.MonitoringScheduleArn !== null
            ? output.MonitoringScheduleArn
            : undefined,
        MonitoringScheduleConfig: output.MonitoringScheduleConfig !== undefined && output.MonitoringScheduleConfig !== null
            ? deserializeAws_json1_1MonitoringScheduleConfig(output.MonitoringScheduleConfig, context)
            : undefined,
        MonitoringScheduleName: output.MonitoringScheduleName !== undefined && output.MonitoringScheduleName !== null
            ? output.MonitoringScheduleName
            : undefined,
        MonitoringScheduleStatus: output.MonitoringScheduleStatus !== undefined && output.MonitoringScheduleStatus !== null
            ? output.MonitoringScheduleStatus
            : undefined,
        MonitoringType: output.MonitoringType !== undefined && output.MonitoringType !== null ? output.MonitoringType : undefined,
    };
};
const deserializeAws_json1_1DescribeNotebookInstanceLifecycleConfigOutput = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        NotebookInstanceLifecycleConfigArn: output.NotebookInstanceLifecycleConfigArn !== undefined && output.NotebookInstanceLifecycleConfigArn !== null
            ? output.NotebookInstanceLifecycleConfigArn
            : undefined,
        NotebookInstanceLifecycleConfigName: output.NotebookInstanceLifecycleConfigName !== undefined && output.NotebookInstanceLifecycleConfigName !== null
            ? output.NotebookInstanceLifecycleConfigName
            : undefined,
        OnCreate: output.OnCreate !== undefined && output.OnCreate !== null
            ? deserializeAws_json1_1NotebookInstanceLifecycleConfigList(output.OnCreate, context)
            : undefined,
        OnStart: output.OnStart !== undefined && output.OnStart !== null
            ? deserializeAws_json1_1NotebookInstanceLifecycleConfigList(output.OnStart, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeNotebookInstanceOutput = (output, context) => {
    return {
        AcceleratorTypes: output.AcceleratorTypes !== undefined && output.AcceleratorTypes !== null
            ? deserializeAws_json1_1NotebookInstanceAcceleratorTypes(output.AcceleratorTypes, context)
            : undefined,
        AdditionalCodeRepositories: output.AdditionalCodeRepositories !== undefined && output.AdditionalCodeRepositories !== null
            ? deserializeAws_json1_1AdditionalCodeRepositoryNamesOrUrls(output.AdditionalCodeRepositories, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        DefaultCodeRepository: output.DefaultCodeRepository !== undefined && output.DefaultCodeRepository !== null
            ? output.DefaultCodeRepository
            : undefined,
        DirectInternetAccess: output.DirectInternetAccess !== undefined && output.DirectInternetAccess !== null
            ? output.DirectInternetAccess
            : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        InstanceType: output.InstanceType !== undefined && output.InstanceType !== null ? output.InstanceType : undefined,
        KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        NetworkInterfaceId: output.NetworkInterfaceId !== undefined && output.NetworkInterfaceId !== null
            ? output.NetworkInterfaceId
            : undefined,
        NotebookInstanceArn: output.NotebookInstanceArn !== undefined && output.NotebookInstanceArn !== null
            ? output.NotebookInstanceArn
            : undefined,
        NotebookInstanceLifecycleConfigName: output.NotebookInstanceLifecycleConfigName !== undefined && output.NotebookInstanceLifecycleConfigName !== null
            ? output.NotebookInstanceLifecycleConfigName
            : undefined,
        NotebookInstanceName: output.NotebookInstanceName !== undefined && output.NotebookInstanceName !== null
            ? output.NotebookInstanceName
            : undefined,
        NotebookInstanceStatus: output.NotebookInstanceStatus !== undefined && output.NotebookInstanceStatus !== null
            ? output.NotebookInstanceStatus
            : undefined,
        RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
        RootAccess: output.RootAccess !== undefined && output.RootAccess !== null ? output.RootAccess : undefined,
        SecurityGroups: output.SecurityGroups !== undefined && output.SecurityGroups !== null
            ? deserializeAws_json1_1SecurityGroupIds(output.SecurityGroups, context)
            : undefined,
        SubnetId: output.SubnetId !== undefined && output.SubnetId !== null ? output.SubnetId : undefined,
        Url: output.Url !== undefined && output.Url !== null ? output.Url : undefined,
        VolumeSizeInGB: output.VolumeSizeInGB !== undefined && output.VolumeSizeInGB !== null ? output.VolumeSizeInGB : undefined,
    };
};
const deserializeAws_json1_1DescribePipelineDefinitionForExecutionResponse = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        PipelineDefinition: output.PipelineDefinition !== undefined && output.PipelineDefinition !== null
            ? output.PipelineDefinition
            : undefined,
    };
};
const deserializeAws_json1_1DescribePipelineExecutionResponse = (output, context) => {
    return {
        CreatedBy: output.CreatedBy !== undefined && output.CreatedBy !== null
            ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        LastModifiedBy: output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
            ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        PipelineArn: output.PipelineArn !== undefined && output.PipelineArn !== null ? output.PipelineArn : undefined,
        PipelineExecutionArn: output.PipelineExecutionArn !== undefined && output.PipelineExecutionArn !== null
            ? output.PipelineExecutionArn
            : undefined,
        PipelineExecutionDescription: output.PipelineExecutionDescription !== undefined && output.PipelineExecutionDescription !== null
            ? output.PipelineExecutionDescription
            : undefined,
        PipelineExecutionDisplayName: output.PipelineExecutionDisplayName !== undefined && output.PipelineExecutionDisplayName !== null
            ? output.PipelineExecutionDisplayName
            : undefined,
        PipelineExecutionStatus: output.PipelineExecutionStatus !== undefined && output.PipelineExecutionStatus !== null
            ? output.PipelineExecutionStatus
            : undefined,
    };
};
const deserializeAws_json1_1DescribePipelineResponse = (output, context) => {
    return {
        CreatedBy: output.CreatedBy !== undefined && output.CreatedBy !== null
            ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        LastModifiedBy: output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
            ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        LastRunTime: output.LastRunTime !== undefined && output.LastRunTime !== null
            ? new Date(Math.round(output.LastRunTime * 1000))
            : undefined,
        PipelineArn: output.PipelineArn !== undefined && output.PipelineArn !== null ? output.PipelineArn : undefined,
        PipelineDefinition: output.PipelineDefinition !== undefined && output.PipelineDefinition !== null
            ? output.PipelineDefinition
            : undefined,
        PipelineDescription: output.PipelineDescription !== undefined && output.PipelineDescription !== null
            ? output.PipelineDescription
            : undefined,
        PipelineDisplayName: output.PipelineDisplayName !== undefined && output.PipelineDisplayName !== null
            ? output.PipelineDisplayName
            : undefined,
        PipelineName: output.PipelineName !== undefined && output.PipelineName !== null ? output.PipelineName : undefined,
        PipelineStatus: output.PipelineStatus !== undefined && output.PipelineStatus !== null ? output.PipelineStatus : undefined,
        RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
    };
};
const deserializeAws_json1_1DescribeProcessingJobResponse = (output, context) => {
    return {
        AppSpecification: output.AppSpecification !== undefined && output.AppSpecification !== null
            ? deserializeAws_json1_1AppSpecification(output.AppSpecification, context)
            : undefined,
        AutoMLJobArn: output.AutoMLJobArn !== undefined && output.AutoMLJobArn !== null ? output.AutoMLJobArn : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        Environment: output.Environment !== undefined && output.Environment !== null
            ? deserializeAws_json1_1ProcessingEnvironmentMap(output.Environment, context)
            : undefined,
        ExitMessage: output.ExitMessage !== undefined && output.ExitMessage !== null ? output.ExitMessage : undefined,
        ExperimentConfig: output.ExperimentConfig !== undefined && output.ExperimentConfig !== null
            ? deserializeAws_json1_1ExperimentConfig(output.ExperimentConfig, context)
            : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        MonitoringScheduleArn: output.MonitoringScheduleArn !== undefined && output.MonitoringScheduleArn !== null
            ? output.MonitoringScheduleArn
            : undefined,
        NetworkConfig: output.NetworkConfig !== undefined && output.NetworkConfig !== null
            ? deserializeAws_json1_1NetworkConfig(output.NetworkConfig, context)
            : undefined,
        ProcessingEndTime: output.ProcessingEndTime !== undefined && output.ProcessingEndTime !== null
            ? new Date(Math.round(output.ProcessingEndTime * 1000))
            : undefined,
        ProcessingInputs: output.ProcessingInputs !== undefined && output.ProcessingInputs !== null
            ? deserializeAws_json1_1ProcessingInputs(output.ProcessingInputs, context)
            : undefined,
        ProcessingJobArn: output.ProcessingJobArn !== undefined && output.ProcessingJobArn !== null ? output.ProcessingJobArn : undefined,
        ProcessingJobName: output.ProcessingJobName !== undefined && output.ProcessingJobName !== null
            ? output.ProcessingJobName
            : undefined,
        ProcessingJobStatus: output.ProcessingJobStatus !== undefined && output.ProcessingJobStatus !== null
            ? output.ProcessingJobStatus
            : undefined,
        ProcessingOutputConfig: output.ProcessingOutputConfig !== undefined && output.ProcessingOutputConfig !== null
            ? deserializeAws_json1_1ProcessingOutputConfig(output.ProcessingOutputConfig, context)
            : undefined,
        ProcessingResources: output.ProcessingResources !== undefined && output.ProcessingResources !== null
            ? deserializeAws_json1_1ProcessingResources(output.ProcessingResources, context)
            : undefined,
        ProcessingStartTime: output.ProcessingStartTime !== undefined && output.ProcessingStartTime !== null
            ? new Date(Math.round(output.ProcessingStartTime * 1000))
            : undefined,
        RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
        StoppingCondition: output.StoppingCondition !== undefined && output.StoppingCondition !== null
            ? deserializeAws_json1_1ProcessingStoppingCondition(output.StoppingCondition, context)
            : undefined,
        TrainingJobArn: output.TrainingJobArn !== undefined && output.TrainingJobArn !== null ? output.TrainingJobArn : undefined,
    };
};
const deserializeAws_json1_1DescribeProjectOutput = (output, context) => {
    return {
        CreatedBy: output.CreatedBy !== undefined && output.CreatedBy !== null
            ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        ProjectArn: output.ProjectArn !== undefined && output.ProjectArn !== null ? output.ProjectArn : undefined,
        ProjectDescription: output.ProjectDescription !== undefined && output.ProjectDescription !== null
            ? output.ProjectDescription
            : undefined,
        ProjectId: output.ProjectId !== undefined && output.ProjectId !== null ? output.ProjectId : undefined,
        ProjectName: output.ProjectName !== undefined && output.ProjectName !== null ? output.ProjectName : undefined,
        ProjectStatus: output.ProjectStatus !== undefined && output.ProjectStatus !== null ? output.ProjectStatus : undefined,
        ServiceCatalogProvisionedProductDetails: output.ServiceCatalogProvisionedProductDetails !== undefined &&
            output.ServiceCatalogProvisionedProductDetails !== null
            ? deserializeAws_json1_1ServiceCatalogProvisionedProductDetails(output.ServiceCatalogProvisionedProductDetails, context)
            : undefined,
        ServiceCatalogProvisioningDetails: output.ServiceCatalogProvisioningDetails !== undefined && output.ServiceCatalogProvisioningDetails !== null
            ? deserializeAws_json1_1ServiceCatalogProvisioningDetails(output.ServiceCatalogProvisioningDetails, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeSubscribedWorkteamResponse = (output, context) => {
    return {
        SubscribedWorkteam: output.SubscribedWorkteam !== undefined && output.SubscribedWorkteam !== null
            ? deserializeAws_json1_1SubscribedWorkteam(output.SubscribedWorkteam, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeTrainingJobResponse = (output, context) => {
    return {
        AlgorithmSpecification: output.AlgorithmSpecification !== undefined && output.AlgorithmSpecification !== null
            ? deserializeAws_json1_1AlgorithmSpecification(output.AlgorithmSpecification, context)
            : undefined,
        AutoMLJobArn: output.AutoMLJobArn !== undefined && output.AutoMLJobArn !== null ? output.AutoMLJobArn : undefined,
        BillableTimeInSeconds: output.BillableTimeInSeconds !== undefined && output.BillableTimeInSeconds !== null
            ? output.BillableTimeInSeconds
            : undefined,
        CheckpointConfig: output.CheckpointConfig !== undefined && output.CheckpointConfig !== null
            ? deserializeAws_json1_1CheckpointConfig(output.CheckpointConfig, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        DebugHookConfig: output.DebugHookConfig !== undefined && output.DebugHookConfig !== null
            ? deserializeAws_json1_1DebugHookConfig(output.DebugHookConfig, context)
            : undefined,
        DebugRuleConfigurations: output.DebugRuleConfigurations !== undefined && output.DebugRuleConfigurations !== null
            ? deserializeAws_json1_1DebugRuleConfigurations(output.DebugRuleConfigurations, context)
            : undefined,
        DebugRuleEvaluationStatuses: output.DebugRuleEvaluationStatuses !== undefined && output.DebugRuleEvaluationStatuses !== null
            ? deserializeAws_json1_1DebugRuleEvaluationStatuses(output.DebugRuleEvaluationStatuses, context)
            : undefined,
        EnableInterContainerTrafficEncryption: output.EnableInterContainerTrafficEncryption !== undefined &&
            output.EnableInterContainerTrafficEncryption !== null
            ? output.EnableInterContainerTrafficEncryption
            : undefined,
        EnableManagedSpotTraining: output.EnableManagedSpotTraining !== undefined && output.EnableManagedSpotTraining !== null
            ? output.EnableManagedSpotTraining
            : undefined,
        EnableNetworkIsolation: output.EnableNetworkIsolation !== undefined && output.EnableNetworkIsolation !== null
            ? output.EnableNetworkIsolation
            : undefined,
        Environment: output.Environment !== undefined && output.Environment !== null
            ? deserializeAws_json1_1TrainingEnvironmentMap(output.Environment, context)
            : undefined,
        ExperimentConfig: output.ExperimentConfig !== undefined && output.ExperimentConfig !== null
            ? deserializeAws_json1_1ExperimentConfig(output.ExperimentConfig, context)
            : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        FinalMetricDataList: output.FinalMetricDataList !== undefined && output.FinalMetricDataList !== null
            ? deserializeAws_json1_1FinalMetricDataList(output.FinalMetricDataList, context)
            : undefined,
        HyperParameters: output.HyperParameters !== undefined && output.HyperParameters !== null
            ? deserializeAws_json1_1HyperParameters(output.HyperParameters, context)
            : undefined,
        InputDataConfig: output.InputDataConfig !== undefined && output.InputDataConfig !== null
            ? deserializeAws_json1_1InputDataConfig(output.InputDataConfig, context)
            : undefined,
        LabelingJobArn: output.LabelingJobArn !== undefined && output.LabelingJobArn !== null ? output.LabelingJobArn : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        ModelArtifacts: output.ModelArtifacts !== undefined && output.ModelArtifacts !== null
            ? deserializeAws_json1_1ModelArtifacts(output.ModelArtifacts, context)
            : undefined,
        OutputDataConfig: output.OutputDataConfig !== undefined && output.OutputDataConfig !== null
            ? deserializeAws_json1_1OutputDataConfig(output.OutputDataConfig, context)
            : undefined,
        ProfilerConfig: output.ProfilerConfig !== undefined && output.ProfilerConfig !== null
            ? deserializeAws_json1_1ProfilerConfig(output.ProfilerConfig, context)
            : undefined,
        ProfilerRuleConfigurations: output.ProfilerRuleConfigurations !== undefined && output.ProfilerRuleConfigurations !== null
            ? deserializeAws_json1_1ProfilerRuleConfigurations(output.ProfilerRuleConfigurations, context)
            : undefined,
        ProfilerRuleEvaluationStatuses: output.ProfilerRuleEvaluationStatuses !== undefined && output.ProfilerRuleEvaluationStatuses !== null
            ? deserializeAws_json1_1ProfilerRuleEvaluationStatuses(output.ProfilerRuleEvaluationStatuses, context)
            : undefined,
        ProfilingStatus: output.ProfilingStatus !== undefined && output.ProfilingStatus !== null ? output.ProfilingStatus : undefined,
        ResourceConfig: output.ResourceConfig !== undefined && output.ResourceConfig !== null
            ? deserializeAws_json1_1ResourceConfig(output.ResourceConfig, context)
            : undefined,
        RetryStrategy: output.RetryStrategy !== undefined && output.RetryStrategy !== null
            ? deserializeAws_json1_1RetryStrategy(output.RetryStrategy, context)
            : undefined,
        RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
        SecondaryStatus: output.SecondaryStatus !== undefined && output.SecondaryStatus !== null ? output.SecondaryStatus : undefined,
        SecondaryStatusTransitions: output.SecondaryStatusTransitions !== undefined && output.SecondaryStatusTransitions !== null
            ? deserializeAws_json1_1SecondaryStatusTransitions(output.SecondaryStatusTransitions, context)
            : undefined,
        StoppingCondition: output.StoppingCondition !== undefined && output.StoppingCondition !== null
            ? deserializeAws_json1_1StoppingCondition(output.StoppingCondition, context)
            : undefined,
        TensorBoardOutputConfig: output.TensorBoardOutputConfig !== undefined && output.TensorBoardOutputConfig !== null
            ? deserializeAws_json1_1TensorBoardOutputConfig(output.TensorBoardOutputConfig, context)
            : undefined,
        TrainingEndTime: output.TrainingEndTime !== undefined && output.TrainingEndTime !== null
            ? new Date(Math.round(output.TrainingEndTime * 1000))
            : undefined,
        TrainingJobArn: output.TrainingJobArn !== undefined && output.TrainingJobArn !== null ? output.TrainingJobArn : undefined,
        TrainingJobName: output.TrainingJobName !== undefined && output.TrainingJobName !== null ? output.TrainingJobName : undefined,
        TrainingJobStatus: output.TrainingJobStatus !== undefined && output.TrainingJobStatus !== null
            ? output.TrainingJobStatus
            : undefined,
        TrainingStartTime: output.TrainingStartTime !== undefined && output.TrainingStartTime !== null
            ? new Date(Math.round(output.TrainingStartTime * 1000))
            : undefined,
        TrainingTimeInSeconds: output.TrainingTimeInSeconds !== undefined && output.TrainingTimeInSeconds !== null
            ? output.TrainingTimeInSeconds
            : undefined,
        TuningJobArn: output.TuningJobArn !== undefined && output.TuningJobArn !== null ? output.TuningJobArn : undefined,
        VpcConfig: output.VpcConfig !== undefined && output.VpcConfig !== null
            ? deserializeAws_json1_1VpcConfig(output.VpcConfig, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeTransformJobResponse = (output, context) => {
    return {
        AutoMLJobArn: output.AutoMLJobArn !== undefined && output.AutoMLJobArn !== null ? output.AutoMLJobArn : undefined,
        BatchStrategy: output.BatchStrategy !== undefined && output.BatchStrategy !== null ? output.BatchStrategy : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        DataProcessing: output.DataProcessing !== undefined && output.DataProcessing !== null
            ? deserializeAws_json1_1DataProcessing(output.DataProcessing, context)
            : undefined,
        Environment: output.Environment !== undefined && output.Environment !== null
            ? deserializeAws_json1_1TransformEnvironmentMap(output.Environment, context)
            : undefined,
        ExperimentConfig: output.ExperimentConfig !== undefined && output.ExperimentConfig !== null
            ? deserializeAws_json1_1ExperimentConfig(output.ExperimentConfig, context)
            : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        LabelingJobArn: output.LabelingJobArn !== undefined && output.LabelingJobArn !== null ? output.LabelingJobArn : undefined,
        MaxConcurrentTransforms: output.MaxConcurrentTransforms !== undefined && output.MaxConcurrentTransforms !== null
            ? output.MaxConcurrentTransforms
            : undefined,
        MaxPayloadInMB: output.MaxPayloadInMB !== undefined && output.MaxPayloadInMB !== null ? output.MaxPayloadInMB : undefined,
        ModelClientConfig: output.ModelClientConfig !== undefined && output.ModelClientConfig !== null
            ? deserializeAws_json1_1ModelClientConfig(output.ModelClientConfig, context)
            : undefined,
        ModelName: output.ModelName !== undefined && output.ModelName !== null ? output.ModelName : undefined,
        TransformEndTime: output.TransformEndTime !== undefined && output.TransformEndTime !== null
            ? new Date(Math.round(output.TransformEndTime * 1000))
            : undefined,
        TransformInput: output.TransformInput !== undefined && output.TransformInput !== null
            ? deserializeAws_json1_1TransformInput(output.TransformInput, context)
            : undefined,
        TransformJobArn: output.TransformJobArn !== undefined && output.TransformJobArn !== null ? output.TransformJobArn : undefined,
        TransformJobName: output.TransformJobName !== undefined && output.TransformJobName !== null ? output.TransformJobName : undefined,
        TransformJobStatus: output.TransformJobStatus !== undefined && output.TransformJobStatus !== null
            ? output.TransformJobStatus
            : undefined,
        TransformOutput: output.TransformOutput !== undefined && output.TransformOutput !== null
            ? deserializeAws_json1_1TransformOutput(output.TransformOutput, context)
            : undefined,
        TransformResources: output.TransformResources !== undefined && output.TransformResources !== null
            ? deserializeAws_json1_1TransformResources(output.TransformResources, context)
            : undefined,
        TransformStartTime: output.TransformStartTime !== undefined && output.TransformStartTime !== null
            ? new Date(Math.round(output.TransformStartTime * 1000))
            : undefined,
    };
};
const deserializeAws_json1_1DescribeTrialComponentResponse = (output, context) => {
    return {
        CreatedBy: output.CreatedBy !== undefined && output.CreatedBy !== null
            ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        DisplayName: output.DisplayName !== undefined && output.DisplayName !== null ? output.DisplayName : undefined,
        EndTime: output.EndTime !== undefined && output.EndTime !== null ? new Date(Math.round(output.EndTime * 1000)) : undefined,
        InputArtifacts: output.InputArtifacts !== undefined && output.InputArtifacts !== null
            ? deserializeAws_json1_1TrialComponentArtifacts(output.InputArtifacts, context)
            : undefined,
        LastModifiedBy: output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
            ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        MetadataProperties: output.MetadataProperties !== undefined && output.MetadataProperties !== null
            ? deserializeAws_json1_1MetadataProperties(output.MetadataProperties, context)
            : undefined,
        Metrics: output.Metrics !== undefined && output.Metrics !== null
            ? deserializeAws_json1_1TrialComponentMetricSummaries(output.Metrics, context)
            : undefined,
        OutputArtifacts: output.OutputArtifacts !== undefined && output.OutputArtifacts !== null
            ? deserializeAws_json1_1TrialComponentArtifacts(output.OutputArtifacts, context)
            : undefined,
        Parameters: output.Parameters !== undefined && output.Parameters !== null
            ? deserializeAws_json1_1TrialComponentParameters(output.Parameters, context)
            : undefined,
        Source: output.Source !== undefined && output.Source !== null
            ? deserializeAws_json1_1TrialComponentSource(output.Source, context)
            : undefined,
        StartTime: output.StartTime !== undefined && output.StartTime !== null
            ? new Date(Math.round(output.StartTime * 1000))
            : undefined,
        Status: output.Status !== undefined && output.Status !== null
            ? deserializeAws_json1_1TrialComponentStatus(output.Status, context)
            : undefined,
        TrialComponentArn: output.TrialComponentArn !== undefined && output.TrialComponentArn !== null
            ? output.TrialComponentArn
            : undefined,
        TrialComponentName: output.TrialComponentName !== undefined && output.TrialComponentName !== null
            ? output.TrialComponentName
            : undefined,
    };
};
const deserializeAws_json1_1DescribeTrialResponse = (output, context) => {
    return {
        CreatedBy: output.CreatedBy !== undefined && output.CreatedBy !== null
            ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        DisplayName: output.DisplayName !== undefined && output.DisplayName !== null ? output.DisplayName : undefined,
        ExperimentName: output.ExperimentName !== undefined && output.ExperimentName !== null ? output.ExperimentName : undefined,
        LastModifiedBy: output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
            ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        MetadataProperties: output.MetadataProperties !== undefined && output.MetadataProperties !== null
            ? deserializeAws_json1_1MetadataProperties(output.MetadataProperties, context)
            : undefined,
        Source: output.Source !== undefined && output.Source !== null
            ? deserializeAws_json1_1TrialSource(output.Source, context)
            : undefined,
        TrialArn: output.TrialArn !== undefined && output.TrialArn !== null ? output.TrialArn : undefined,
        TrialName: output.TrialName !== undefined && output.TrialName !== null ? output.TrialName : undefined,
    };
};
const deserializeAws_json1_1DescribeUserProfileResponse = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        DomainId: output.DomainId !== undefined && output.DomainId !== null ? output.DomainId : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        HomeEfsFileSystemUid: output.HomeEfsFileSystemUid !== undefined && output.HomeEfsFileSystemUid !== null
            ? output.HomeEfsFileSystemUid
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        SingleSignOnUserIdentifier: output.SingleSignOnUserIdentifier !== undefined && output.SingleSignOnUserIdentifier !== null
            ? output.SingleSignOnUserIdentifier
            : undefined,
        SingleSignOnUserValue: output.SingleSignOnUserValue !== undefined && output.SingleSignOnUserValue !== null
            ? output.SingleSignOnUserValue
            : undefined,
        Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
        UserProfileArn: output.UserProfileArn !== undefined && output.UserProfileArn !== null ? output.UserProfileArn : undefined,
        UserProfileName: output.UserProfileName !== undefined && output.UserProfileName !== null ? output.UserProfileName : undefined,
        UserSettings: output.UserSettings !== undefined && output.UserSettings !== null
            ? deserializeAws_json1_1UserSettings(output.UserSettings, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeWorkforceResponse = (output, context) => {
    return {
        Workforce: output.Workforce !== undefined && output.Workforce !== null
            ? deserializeAws_json1_1Workforce(output.Workforce, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeWorkteamResponse = (output, context) => {
    return {
        Workteam: output.Workteam !== undefined && output.Workteam !== null
            ? deserializeAws_json1_1Workteam(output.Workteam, context)
            : undefined,
    };
};
const deserializeAws_json1_1DeviceFleetSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1DeviceFleetSummary(entry, context);
    });
};
const deserializeAws_json1_1DeviceFleetSummary = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        DeviceFleetArn: output.DeviceFleetArn !== undefined && output.DeviceFleetArn !== null ? output.DeviceFleetArn : undefined,
        DeviceFleetName: output.DeviceFleetName !== undefined && output.DeviceFleetName !== null ? output.DeviceFleetName : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
    };
};
const deserializeAws_json1_1DeviceStats = (output, context) => {
    return {
        ConnectedDeviceCount: output.ConnectedDeviceCount !== undefined && output.ConnectedDeviceCount !== null
            ? output.ConnectedDeviceCount
            : undefined,
        RegisteredDeviceCount: output.RegisteredDeviceCount !== undefined && output.RegisteredDeviceCount !== null
            ? output.RegisteredDeviceCount
            : undefined,
    };
};
const deserializeAws_json1_1DeviceSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1DeviceSummary(entry, context);
    });
};
const deserializeAws_json1_1DeviceSummary = (output, context) => {
    return {
        Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
        DeviceArn: output.DeviceArn !== undefined && output.DeviceArn !== null ? output.DeviceArn : undefined,
        DeviceFleetName: output.DeviceFleetName !== undefined && output.DeviceFleetName !== null ? output.DeviceFleetName : undefined,
        DeviceName: output.DeviceName !== undefined && output.DeviceName !== null ? output.DeviceName : undefined,
        IotThingName: output.IotThingName !== undefined && output.IotThingName !== null ? output.IotThingName : undefined,
        LatestHeartbeat: output.LatestHeartbeat !== undefined && output.LatestHeartbeat !== null
            ? new Date(Math.round(output.LatestHeartbeat * 1000))
            : undefined,
        Models: output.Models !== undefined && output.Models !== null
            ? deserializeAws_json1_1EdgeModelSummaries(output.Models, context)
            : undefined,
        RegistrationTime: output.RegistrationTime !== undefined && output.RegistrationTime !== null
            ? new Date(Math.round(output.RegistrationTime * 1000))
            : undefined,
    };
};
const deserializeAws_json1_1DisableSagemakerServicecatalogPortfolioOutput = (output, context) => {
    return {};
};
const deserializeAws_json1_1DisassociateTrialComponentResponse = (output, context) => {
    return {
        TrialArn: output.TrialArn !== undefined && output.TrialArn !== null ? output.TrialArn : undefined,
        TrialComponentArn: output.TrialComponentArn !== undefined && output.TrialComponentArn !== null
            ? output.TrialComponentArn
            : undefined,
    };
};
const deserializeAws_json1_1DomainDetails = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        DomainArn: output.DomainArn !== undefined && output.DomainArn !== null ? output.DomainArn : undefined,
        DomainId: output.DomainId !== undefined && output.DomainId !== null ? output.DomainId : undefined,
        DomainName: output.DomainName !== undefined && output.DomainName !== null ? output.DomainName : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
        Url: output.Url !== undefined && output.Url !== null ? output.Url : undefined,
    };
};
const deserializeAws_json1_1DomainList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1DomainDetails(entry, context);
    });
};
const deserializeAws_json1_1EdgeModel = (output, context) => {
    return {
        LatestInference: output.LatestInference !== undefined && output.LatestInference !== null
            ? new Date(Math.round(output.LatestInference * 1000))
            : undefined,
        LatestSampleTime: output.LatestSampleTime !== undefined && output.LatestSampleTime !== null
            ? new Date(Math.round(output.LatestSampleTime * 1000))
            : undefined,
        ModelName: output.ModelName !== undefined && output.ModelName !== null ? output.ModelName : undefined,
        ModelVersion: output.ModelVersion !== undefined && output.ModelVersion !== null ? output.ModelVersion : undefined,
    };
};
const deserializeAws_json1_1EdgeModels = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1EdgeModel(entry, context);
    });
};
const deserializeAws_json1_1EdgeModelStat = (output, context) => {
    return {
        ActiveDeviceCount: output.ActiveDeviceCount !== undefined && output.ActiveDeviceCount !== null
            ? output.ActiveDeviceCount
            : undefined,
        ConnectedDeviceCount: output.ConnectedDeviceCount !== undefined && output.ConnectedDeviceCount !== null
            ? output.ConnectedDeviceCount
            : undefined,
        ModelName: output.ModelName !== undefined && output.ModelName !== null ? output.ModelName : undefined,
        ModelVersion: output.ModelVersion !== undefined && output.ModelVersion !== null ? output.ModelVersion : undefined,
        OfflineDeviceCount: output.OfflineDeviceCount !== undefined && output.OfflineDeviceCount !== null
            ? output.OfflineDeviceCount
            : undefined,
        SamplingDeviceCount: output.SamplingDeviceCount !== undefined && output.SamplingDeviceCount !== null
            ? output.SamplingDeviceCount
            : undefined,
    };
};
const deserializeAws_json1_1EdgeModelStats = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1EdgeModelStat(entry, context);
    });
};
const deserializeAws_json1_1EdgeModelSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1EdgeModelSummary(entry, context);
    });
};
const deserializeAws_json1_1EdgeModelSummary = (output, context) => {
    return {
        ModelName: output.ModelName !== undefined && output.ModelName !== null ? output.ModelName : undefined,
        ModelVersion: output.ModelVersion !== undefined && output.ModelVersion !== null ? output.ModelVersion : undefined,
    };
};
const deserializeAws_json1_1EdgeOutputConfig = (output, context) => {
    return {
        KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
        S3OutputLocation: output.S3OutputLocation !== undefined && output.S3OutputLocation !== null ? output.S3OutputLocation : undefined,
    };
};
const deserializeAws_json1_1EdgePackagingJobSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1EdgePackagingJobSummary(entry, context);
    });
};
const deserializeAws_json1_1EdgePackagingJobSummary = (output, context) => {
    return {
        CompilationJobName: output.CompilationJobName !== undefined && output.CompilationJobName !== null
            ? output.CompilationJobName
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        EdgePackagingJobArn: output.EdgePackagingJobArn !== undefined && output.EdgePackagingJobArn !== null
            ? output.EdgePackagingJobArn
            : undefined,
        EdgePackagingJobName: output.EdgePackagingJobName !== undefined && output.EdgePackagingJobName !== null
            ? output.EdgePackagingJobName
            : undefined,
        EdgePackagingJobStatus: output.EdgePackagingJobStatus !== undefined && output.EdgePackagingJobStatus !== null
            ? output.EdgePackagingJobStatus
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        ModelName: output.ModelName !== undefined && output.ModelName !== null ? output.ModelName : undefined,
        ModelVersion: output.ModelVersion !== undefined && output.ModelVersion !== null ? output.ModelVersion : undefined,
    };
};
const deserializeAws_json1_1EnableSagemakerServicecatalogPortfolioOutput = (output, context) => {
    return {};
};
const deserializeAws_json1_1Endpoint = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        DataCaptureConfig: output.DataCaptureConfig !== undefined && output.DataCaptureConfig !== null
            ? deserializeAws_json1_1DataCaptureConfigSummary(output.DataCaptureConfig, context)
            : undefined,
        EndpointArn: output.EndpointArn !== undefined && output.EndpointArn !== null ? output.EndpointArn : undefined,
        EndpointConfigName: output.EndpointConfigName !== undefined && output.EndpointConfigName !== null
            ? output.EndpointConfigName
            : undefined,
        EndpointName: output.EndpointName !== undefined && output.EndpointName !== null ? output.EndpointName : undefined,
        EndpointStatus: output.EndpointStatus !== undefined && output.EndpointStatus !== null ? output.EndpointStatus : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        MonitoringSchedules: output.MonitoringSchedules !== undefined && output.MonitoringSchedules !== null
            ? deserializeAws_json1_1MonitoringScheduleList(output.MonitoringSchedules, context)
            : undefined,
        ProductionVariants: output.ProductionVariants !== undefined && output.ProductionVariants !== null
            ? deserializeAws_json1_1ProductionVariantSummaryList(output.ProductionVariants, context)
            : undefined,
        Tags: output.Tags !== undefined && output.Tags !== null
            ? deserializeAws_json1_1TagList(output.Tags, context)
            : undefined,
    };
};
const deserializeAws_json1_1EndpointConfigSummary = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        EndpointConfigArn: output.EndpointConfigArn !== undefined && output.EndpointConfigArn !== null
            ? output.EndpointConfigArn
            : undefined,
        EndpointConfigName: output.EndpointConfigName !== undefined && output.EndpointConfigName !== null
            ? output.EndpointConfigName
            : undefined,
    };
};
const deserializeAws_json1_1EndpointConfigSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1EndpointConfigSummary(entry, context);
    });
};
const deserializeAws_json1_1EndpointInput = (output, context) => {
    return {
        EndTimeOffset: output.EndTimeOffset !== undefined && output.EndTimeOffset !== null ? output.EndTimeOffset : undefined,
        EndpointName: output.EndpointName !== undefined && output.EndpointName !== null ? output.EndpointName : undefined,
        FeaturesAttribute: output.FeaturesAttribute !== undefined && output.FeaturesAttribute !== null
            ? output.FeaturesAttribute
            : undefined,
        InferenceAttribute: output.InferenceAttribute !== undefined && output.InferenceAttribute !== null
            ? output.InferenceAttribute
            : undefined,
        LocalPath: output.LocalPath !== undefined && output.LocalPath !== null ? output.LocalPath : undefined,
        ProbabilityAttribute: output.ProbabilityAttribute !== undefined && output.ProbabilityAttribute !== null
            ? output.ProbabilityAttribute
            : undefined,
        ProbabilityThresholdAttribute: output.ProbabilityThresholdAttribute !== undefined && output.ProbabilityThresholdAttribute !== null
            ? output.ProbabilityThresholdAttribute
            : undefined,
        S3DataDistributionType: output.S3DataDistributionType !== undefined && output.S3DataDistributionType !== null
            ? output.S3DataDistributionType
            : undefined,
        S3InputMode: output.S3InputMode !== undefined && output.S3InputMode !== null ? output.S3InputMode : undefined,
        StartTimeOffset: output.StartTimeOffset !== undefined && output.StartTimeOffset !== null ? output.StartTimeOffset : undefined,
    };
};
const deserializeAws_json1_1EndpointSummary = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        EndpointArn: output.EndpointArn !== undefined && output.EndpointArn !== null ? output.EndpointArn : undefined,
        EndpointName: output.EndpointName !== undefined && output.EndpointName !== null ? output.EndpointName : undefined,
        EndpointStatus: output.EndpointStatus !== undefined && output.EndpointStatus !== null ? output.EndpointStatus : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
    };
};
const deserializeAws_json1_1EndpointSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1EndpointSummary(entry, context);
    });
};
const deserializeAws_json1_1EnvironmentMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const deserializeAws_json1_1Experiment = (output, context) => {
    return {
        CreatedBy: output.CreatedBy !== undefined && output.CreatedBy !== null
            ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
        DisplayName: output.DisplayName !== undefined && output.DisplayName !== null ? output.DisplayName : undefined,
        ExperimentArn: output.ExperimentArn !== undefined && output.ExperimentArn !== null ? output.ExperimentArn : undefined,
        ExperimentName: output.ExperimentName !== undefined && output.ExperimentName !== null ? output.ExperimentName : undefined,
        LastModifiedBy: output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
            ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        Source: output.Source !== undefined && output.Source !== null
            ? deserializeAws_json1_1ExperimentSource(output.Source, context)
            : undefined,
        Tags: output.Tags !== undefined && output.Tags !== null
            ? deserializeAws_json1_1TagList(output.Tags, context)
            : undefined,
    };
};
const deserializeAws_json1_1ExperimentConfig = (output, context) => {
    return {
        ExperimentName: output.ExperimentName !== undefined && output.ExperimentName !== null ? output.ExperimentName : undefined,
        TrialComponentDisplayName: output.TrialComponentDisplayName !== undefined && output.TrialComponentDisplayName !== null
            ? output.TrialComponentDisplayName
            : undefined,
        TrialName: output.TrialName !== undefined && output.TrialName !== null ? output.TrialName : undefined,
    };
};
const deserializeAws_json1_1ExperimentSource = (output, context) => {
    return {
        SourceArn: output.SourceArn !== undefined && output.SourceArn !== null ? output.SourceArn : undefined,
        SourceType: output.SourceType !== undefined && output.SourceType !== null ? output.SourceType : undefined,
    };
};
const deserializeAws_json1_1ExperimentSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ExperimentSummary(entry, context);
    });
};
const deserializeAws_json1_1ExperimentSummary = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        DisplayName: output.DisplayName !== undefined && output.DisplayName !== null ? output.DisplayName : undefined,
        ExperimentArn: output.ExperimentArn !== undefined && output.ExperimentArn !== null ? output.ExperimentArn : undefined,
        ExperimentName: output.ExperimentName !== undefined && output.ExperimentName !== null ? output.ExperimentName : undefined,
        ExperimentSource: output.ExperimentSource !== undefined && output.ExperimentSource !== null
            ? deserializeAws_json1_1ExperimentSource(output.ExperimentSource, context)
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
    };
};
const deserializeAws_json1_1Explainability = (output, context) => {
    return {
        Report: output.Report !== undefined && output.Report !== null
            ? deserializeAws_json1_1MetricsSource(output.Report, context)
            : undefined,
    };
};
const deserializeAws_json1_1FeatureDefinition = (output, context) => {
    return {
        FeatureName: output.FeatureName !== undefined && output.FeatureName !== null ? output.FeatureName : undefined,
        FeatureType: output.FeatureType !== undefined && output.FeatureType !== null ? output.FeatureType : undefined,
    };
};
const deserializeAws_json1_1FeatureDefinitions = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1FeatureDefinition(entry, context);
    });
};
const deserializeAws_json1_1FeatureGroup = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
        EventTimeFeatureName: output.EventTimeFeatureName !== undefined && output.EventTimeFeatureName !== null
            ? output.EventTimeFeatureName
            : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        FeatureDefinitions: output.FeatureDefinitions !== undefined && output.FeatureDefinitions !== null
            ? deserializeAws_json1_1FeatureDefinitions(output.FeatureDefinitions, context)
            : undefined,
        FeatureGroupArn: output.FeatureGroupArn !== undefined && output.FeatureGroupArn !== null ? output.FeatureGroupArn : undefined,
        FeatureGroupName: output.FeatureGroupName !== undefined && output.FeatureGroupName !== null ? output.FeatureGroupName : undefined,
        FeatureGroupStatus: output.FeatureGroupStatus !== undefined && output.FeatureGroupStatus !== null
            ? output.FeatureGroupStatus
            : undefined,
        OfflineStoreConfig: output.OfflineStoreConfig !== undefined && output.OfflineStoreConfig !== null
            ? deserializeAws_json1_1OfflineStoreConfig(output.OfflineStoreConfig, context)
            : undefined,
        OfflineStoreStatus: output.OfflineStoreStatus !== undefined && output.OfflineStoreStatus !== null
            ? deserializeAws_json1_1OfflineStoreStatus(output.OfflineStoreStatus, context)
            : undefined,
        OnlineStoreConfig: output.OnlineStoreConfig !== undefined && output.OnlineStoreConfig !== null
            ? deserializeAws_json1_1OnlineStoreConfig(output.OnlineStoreConfig, context)
            : undefined,
        RecordIdentifierFeatureName: output.RecordIdentifierFeatureName !== undefined && output.RecordIdentifierFeatureName !== null
            ? output.RecordIdentifierFeatureName
            : undefined,
        RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
        Tags: output.Tags !== undefined && output.Tags !== null
            ? deserializeAws_json1_1TagList(output.Tags, context)
            : undefined,
    };
};
const deserializeAws_json1_1FeatureGroupSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1FeatureGroupSummary(entry, context);
    });
};
const deserializeAws_json1_1FeatureGroupSummary = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        FeatureGroupArn: output.FeatureGroupArn !== undefined && output.FeatureGroupArn !== null ? output.FeatureGroupArn : undefined,
        FeatureGroupName: output.FeatureGroupName !== undefined && output.FeatureGroupName !== null ? output.FeatureGroupName : undefined,
        FeatureGroupStatus: output.FeatureGroupStatus !== undefined && output.FeatureGroupStatus !== null
            ? output.FeatureGroupStatus
            : undefined,
        OfflineStoreStatus: output.OfflineStoreStatus !== undefined && output.OfflineStoreStatus !== null
            ? deserializeAws_json1_1OfflineStoreStatus(output.OfflineStoreStatus, context)
            : undefined,
    };
};
const deserializeAws_json1_1FileSystemConfig = (output, context) => {
    return {
        DefaultGid: output.DefaultGid !== undefined && output.DefaultGid !== null ? output.DefaultGid : undefined,
        DefaultUid: output.DefaultUid !== undefined && output.DefaultUid !== null ? output.DefaultUid : undefined,
        MountPath: output.MountPath !== undefined && output.MountPath !== null ? output.MountPath : undefined,
    };
};
const deserializeAws_json1_1FileSystemDataSource = (output, context) => {
    return {
        DirectoryPath: output.DirectoryPath !== undefined && output.DirectoryPath !== null ? output.DirectoryPath : undefined,
        FileSystemAccessMode: output.FileSystemAccessMode !== undefined && output.FileSystemAccessMode !== null
            ? output.FileSystemAccessMode
            : undefined,
        FileSystemId: output.FileSystemId !== undefined && output.FileSystemId !== null ? output.FileSystemId : undefined,
        FileSystemType: output.FileSystemType !== undefined && output.FileSystemType !== null ? output.FileSystemType : undefined,
    };
};
const deserializeAws_json1_1FinalAutoMLJobObjectiveMetric = (output, context) => {
    return {
        MetricName: output.MetricName !== undefined && output.MetricName !== null ? output.MetricName : undefined,
        Type: output.Type !== undefined && output.Type !== null ? output.Type : undefined,
        Value: output.Value !== undefined && output.Value !== null ? output.Value : undefined,
    };
};
const deserializeAws_json1_1FinalHyperParameterTuningJobObjectiveMetric = (output, context) => {
    return {
        MetricName: output.MetricName !== undefined && output.MetricName !== null ? output.MetricName : undefined,
        Type: output.Type !== undefined && output.Type !== null ? output.Type : undefined,
        Value: output.Value !== undefined && output.Value !== null ? output.Value : undefined,
    };
};
const deserializeAws_json1_1FinalMetricDataList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1MetricData(entry, context);
    });
};
const deserializeAws_json1_1FlowDefinitionOutputConfig = (output, context) => {
    return {
        KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
        S3OutputPath: output.S3OutputPath !== undefined && output.S3OutputPath !== null ? output.S3OutputPath : undefined,
    };
};
const deserializeAws_json1_1FlowDefinitionSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1FlowDefinitionSummary(entry, context);
    });
};
const deserializeAws_json1_1FlowDefinitionSummary = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        FlowDefinitionArn: output.FlowDefinitionArn !== undefined && output.FlowDefinitionArn !== null
            ? output.FlowDefinitionArn
            : undefined,
        FlowDefinitionName: output.FlowDefinitionName !== undefined && output.FlowDefinitionName !== null
            ? output.FlowDefinitionName
            : undefined,
        FlowDefinitionStatus: output.FlowDefinitionStatus !== undefined && output.FlowDefinitionStatus !== null
            ? output.FlowDefinitionStatus
            : undefined,
    };
};
const deserializeAws_json1_1FlowDefinitionTaskKeywords = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1GetDeviceFleetReportResponse = (output, context) => {
    return {
        AgentVersions: output.AgentVersions !== undefined && output.AgentVersions !== null
            ? deserializeAws_json1_1AgentVersions(output.AgentVersions, context)
            : undefined,
        Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
        DeviceFleetArn: output.DeviceFleetArn !== undefined && output.DeviceFleetArn !== null ? output.DeviceFleetArn : undefined,
        DeviceFleetName: output.DeviceFleetName !== undefined && output.DeviceFleetName !== null ? output.DeviceFleetName : undefined,
        DeviceStats: output.DeviceStats !== undefined && output.DeviceStats !== null
            ? deserializeAws_json1_1DeviceStats(output.DeviceStats, context)
            : undefined,
        ModelStats: output.ModelStats !== undefined && output.ModelStats !== null
            ? deserializeAws_json1_1EdgeModelStats(output.ModelStats, context)
            : undefined,
        OutputConfig: output.OutputConfig !== undefined && output.OutputConfig !== null
            ? deserializeAws_json1_1EdgeOutputConfig(output.OutputConfig, context)
            : undefined,
        ReportGenerated: output.ReportGenerated !== undefined && output.ReportGenerated !== null
            ? new Date(Math.round(output.ReportGenerated * 1000))
            : undefined,
    };
};
const deserializeAws_json1_1GetModelPackageGroupPolicyOutput = (output, context) => {
    return {
        ResourcePolicy: output.ResourcePolicy !== undefined && output.ResourcePolicy !== null ? output.ResourcePolicy : undefined,
    };
};
const deserializeAws_json1_1GetSagemakerServicecatalogPortfolioStatusOutput = (output, context) => {
    return {
        Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
    };
};
const deserializeAws_json1_1GetSearchSuggestionsResponse = (output, context) => {
    return {
        PropertyNameSuggestions: output.PropertyNameSuggestions !== undefined && output.PropertyNameSuggestions !== null
            ? deserializeAws_json1_1PropertyNameSuggestionList(output.PropertyNameSuggestions, context)
            : undefined,
    };
};
const deserializeAws_json1_1GitConfig = (output, context) => {
    return {
        Branch: output.Branch !== undefined && output.Branch !== null ? output.Branch : undefined,
        RepositoryUrl: output.RepositoryUrl !== undefined && output.RepositoryUrl !== null ? output.RepositoryUrl : undefined,
        SecretArn: output.SecretArn !== undefined && output.SecretArn !== null ? output.SecretArn : undefined,
    };
};
const deserializeAws_json1_1Groups = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1HookParameters = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const deserializeAws_json1_1HumanLoopActivationConditionsConfig = (output, context) => {
    return {
        HumanLoopActivationConditions: output.HumanLoopActivationConditions !== undefined && output.HumanLoopActivationConditions !== null
            ? new smithy_client_1.LazyJsonString(output.HumanLoopActivationConditions)
            : undefined,
    };
};
const deserializeAws_json1_1HumanLoopActivationConfig = (output, context) => {
    return {
        HumanLoopActivationConditionsConfig: output.HumanLoopActivationConditionsConfig !== undefined && output.HumanLoopActivationConditionsConfig !== null
            ? deserializeAws_json1_1HumanLoopActivationConditionsConfig(output.HumanLoopActivationConditionsConfig, context)
            : undefined,
    };
};
const deserializeAws_json1_1HumanLoopConfig = (output, context) => {
    return {
        HumanTaskUiArn: output.HumanTaskUiArn !== undefined && output.HumanTaskUiArn !== null ? output.HumanTaskUiArn : undefined,
        PublicWorkforceTaskPrice: output.PublicWorkforceTaskPrice !== undefined && output.PublicWorkforceTaskPrice !== null
            ? deserializeAws_json1_1PublicWorkforceTaskPrice(output.PublicWorkforceTaskPrice, context)
            : undefined,
        TaskAvailabilityLifetimeInSeconds: output.TaskAvailabilityLifetimeInSeconds !== undefined && output.TaskAvailabilityLifetimeInSeconds !== null
            ? output.TaskAvailabilityLifetimeInSeconds
            : undefined,
        TaskCount: output.TaskCount !== undefined && output.TaskCount !== null ? output.TaskCount : undefined,
        TaskDescription: output.TaskDescription !== undefined && output.TaskDescription !== null ? output.TaskDescription : undefined,
        TaskKeywords: output.TaskKeywords !== undefined && output.TaskKeywords !== null
            ? deserializeAws_json1_1FlowDefinitionTaskKeywords(output.TaskKeywords, context)
            : undefined,
        TaskTimeLimitInSeconds: output.TaskTimeLimitInSeconds !== undefined && output.TaskTimeLimitInSeconds !== null
            ? output.TaskTimeLimitInSeconds
            : undefined,
        TaskTitle: output.TaskTitle !== undefined && output.TaskTitle !== null ? output.TaskTitle : undefined,
        WorkteamArn: output.WorkteamArn !== undefined && output.WorkteamArn !== null ? output.WorkteamArn : undefined,
    };
};
const deserializeAws_json1_1HumanLoopRequestSource = (output, context) => {
    return {
        AwsManagedHumanLoopRequestSource: output.AwsManagedHumanLoopRequestSource !== undefined && output.AwsManagedHumanLoopRequestSource !== null
            ? output.AwsManagedHumanLoopRequestSource
            : undefined,
    };
};
const deserializeAws_json1_1HumanTaskConfig = (output, context) => {
    return {
        AnnotationConsolidationConfig: output.AnnotationConsolidationConfig !== undefined && output.AnnotationConsolidationConfig !== null
            ? deserializeAws_json1_1AnnotationConsolidationConfig(output.AnnotationConsolidationConfig, context)
            : undefined,
        MaxConcurrentTaskCount: output.MaxConcurrentTaskCount !== undefined && output.MaxConcurrentTaskCount !== null
            ? output.MaxConcurrentTaskCount
            : undefined,
        NumberOfHumanWorkersPerDataObject: output.NumberOfHumanWorkersPerDataObject !== undefined && output.NumberOfHumanWorkersPerDataObject !== null
            ? output.NumberOfHumanWorkersPerDataObject
            : undefined,
        PreHumanTaskLambdaArn: output.PreHumanTaskLambdaArn !== undefined && output.PreHumanTaskLambdaArn !== null
            ? output.PreHumanTaskLambdaArn
            : undefined,
        PublicWorkforceTaskPrice: output.PublicWorkforceTaskPrice !== undefined && output.PublicWorkforceTaskPrice !== null
            ? deserializeAws_json1_1PublicWorkforceTaskPrice(output.PublicWorkforceTaskPrice, context)
            : undefined,
        TaskAvailabilityLifetimeInSeconds: output.TaskAvailabilityLifetimeInSeconds !== undefined && output.TaskAvailabilityLifetimeInSeconds !== null
            ? output.TaskAvailabilityLifetimeInSeconds
            : undefined,
        TaskDescription: output.TaskDescription !== undefined && output.TaskDescription !== null ? output.TaskDescription : undefined,
        TaskKeywords: output.TaskKeywords !== undefined && output.TaskKeywords !== null
            ? deserializeAws_json1_1TaskKeywords(output.TaskKeywords, context)
            : undefined,
        TaskTimeLimitInSeconds: output.TaskTimeLimitInSeconds !== undefined && output.TaskTimeLimitInSeconds !== null
            ? output.TaskTimeLimitInSeconds
            : undefined,
        TaskTitle: output.TaskTitle !== undefined && output.TaskTitle !== null ? output.TaskTitle : undefined,
        UiConfig: output.UiConfig !== undefined && output.UiConfig !== null
            ? deserializeAws_json1_1UiConfig(output.UiConfig, context)
            : undefined,
        WorkteamArn: output.WorkteamArn !== undefined && output.WorkteamArn !== null ? output.WorkteamArn : undefined,
    };
};
const deserializeAws_json1_1HumanTaskUiSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1HumanTaskUiSummary(entry, context);
    });
};
const deserializeAws_json1_1HumanTaskUiSummary = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        HumanTaskUiArn: output.HumanTaskUiArn !== undefined && output.HumanTaskUiArn !== null ? output.HumanTaskUiArn : undefined,
        HumanTaskUiName: output.HumanTaskUiName !== undefined && output.HumanTaskUiName !== null ? output.HumanTaskUiName : undefined,
    };
};
const deserializeAws_json1_1HyperParameterAlgorithmSpecification = (output, context) => {
    return {
        AlgorithmName: output.AlgorithmName !== undefined && output.AlgorithmName !== null ? output.AlgorithmName : undefined,
        MetricDefinitions: output.MetricDefinitions !== undefined && output.MetricDefinitions !== null
            ? deserializeAws_json1_1MetricDefinitionList(output.MetricDefinitions, context)
            : undefined,
        TrainingImage: output.TrainingImage !== undefined && output.TrainingImage !== null ? output.TrainingImage : undefined,
        TrainingInputMode: output.TrainingInputMode !== undefined && output.TrainingInputMode !== null
            ? output.TrainingInputMode
            : undefined,
    };
};
const deserializeAws_json1_1HyperParameters = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const deserializeAws_json1_1HyperParameterSpecification = (output, context) => {
    return {
        DefaultValue: output.DefaultValue !== undefined && output.DefaultValue !== null ? output.DefaultValue : undefined,
        Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
        IsRequired: output.IsRequired !== undefined && output.IsRequired !== null ? output.IsRequired : undefined,
        IsTunable: output.IsTunable !== undefined && output.IsTunable !== null ? output.IsTunable : undefined,
        Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,
        Range: output.Range !== undefined && output.Range !== null
            ? deserializeAws_json1_1ParameterRange(output.Range, context)
            : undefined,
        Type: output.Type !== undefined && output.Type !== null ? output.Type : undefined,
    };
};
const deserializeAws_json1_1HyperParameterSpecifications = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1HyperParameterSpecification(entry, context);
    });
};
const deserializeAws_json1_1HyperParameterTrainingJobDefinition = (output, context) => {
    return {
        AlgorithmSpecification: output.AlgorithmSpecification !== undefined && output.AlgorithmSpecification !== null
            ? deserializeAws_json1_1HyperParameterAlgorithmSpecification(output.AlgorithmSpecification, context)
            : undefined,
        CheckpointConfig: output.CheckpointConfig !== undefined && output.CheckpointConfig !== null
            ? deserializeAws_json1_1CheckpointConfig(output.CheckpointConfig, context)
            : undefined,
        DefinitionName: output.DefinitionName !== undefined && output.DefinitionName !== null ? output.DefinitionName : undefined,
        EnableInterContainerTrafficEncryption: output.EnableInterContainerTrafficEncryption !== undefined &&
            output.EnableInterContainerTrafficEncryption !== null
            ? output.EnableInterContainerTrafficEncryption
            : undefined,
        EnableManagedSpotTraining: output.EnableManagedSpotTraining !== undefined && output.EnableManagedSpotTraining !== null
            ? output.EnableManagedSpotTraining
            : undefined,
        EnableNetworkIsolation: output.EnableNetworkIsolation !== undefined && output.EnableNetworkIsolation !== null
            ? output.EnableNetworkIsolation
            : undefined,
        HyperParameterRanges: output.HyperParameterRanges !== undefined && output.HyperParameterRanges !== null
            ? deserializeAws_json1_1ParameterRanges(output.HyperParameterRanges, context)
            : undefined,
        InputDataConfig: output.InputDataConfig !== undefined && output.InputDataConfig !== null
            ? deserializeAws_json1_1InputDataConfig(output.InputDataConfig, context)
            : undefined,
        OutputDataConfig: output.OutputDataConfig !== undefined && output.OutputDataConfig !== null
            ? deserializeAws_json1_1OutputDataConfig(output.OutputDataConfig, context)
            : undefined,
        ResourceConfig: output.ResourceConfig !== undefined && output.ResourceConfig !== null
            ? deserializeAws_json1_1ResourceConfig(output.ResourceConfig, context)
            : undefined,
        RetryStrategy: output.RetryStrategy !== undefined && output.RetryStrategy !== null
            ? deserializeAws_json1_1RetryStrategy(output.RetryStrategy, context)
            : undefined,
        RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
        StaticHyperParameters: output.StaticHyperParameters !== undefined && output.StaticHyperParameters !== null
            ? deserializeAws_json1_1HyperParameters(output.StaticHyperParameters, context)
            : undefined,
        StoppingCondition: output.StoppingCondition !== undefined && output.StoppingCondition !== null
            ? deserializeAws_json1_1StoppingCondition(output.StoppingCondition, context)
            : undefined,
        TuningObjective: output.TuningObjective !== undefined && output.TuningObjective !== null
            ? deserializeAws_json1_1HyperParameterTuningJobObjective(output.TuningObjective, context)
            : undefined,
        VpcConfig: output.VpcConfig !== undefined && output.VpcConfig !== null
            ? deserializeAws_json1_1VpcConfig(output.VpcConfig, context)
            : undefined,
    };
};
const deserializeAws_json1_1HyperParameterTrainingJobDefinitions = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1HyperParameterTrainingJobDefinition(entry, context);
    });
};
const deserializeAws_json1_1HyperParameterTrainingJobSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1HyperParameterTrainingJobSummary(entry, context);
    });
};
const deserializeAws_json1_1HyperParameterTrainingJobSummary = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        FinalHyperParameterTuningJobObjectiveMetric: output.FinalHyperParameterTuningJobObjectiveMetric !== undefined &&
            output.FinalHyperParameterTuningJobObjectiveMetric !== null
            ? deserializeAws_json1_1FinalHyperParameterTuningJobObjectiveMetric(output.FinalHyperParameterTuningJobObjectiveMetric, context)
            : undefined,
        ObjectiveStatus: output.ObjectiveStatus !== undefined && output.ObjectiveStatus !== null ? output.ObjectiveStatus : undefined,
        TrainingEndTime: output.TrainingEndTime !== undefined && output.TrainingEndTime !== null
            ? new Date(Math.round(output.TrainingEndTime * 1000))
            : undefined,
        TrainingJobArn: output.TrainingJobArn !== undefined && output.TrainingJobArn !== null ? output.TrainingJobArn : undefined,
        TrainingJobDefinitionName: output.TrainingJobDefinitionName !== undefined && output.TrainingJobDefinitionName !== null
            ? output.TrainingJobDefinitionName
            : undefined,
        TrainingJobName: output.TrainingJobName !== undefined && output.TrainingJobName !== null ? output.TrainingJobName : undefined,
        TrainingJobStatus: output.TrainingJobStatus !== undefined && output.TrainingJobStatus !== null
            ? output.TrainingJobStatus
            : undefined,
        TrainingStartTime: output.TrainingStartTime !== undefined && output.TrainingStartTime !== null
            ? new Date(Math.round(output.TrainingStartTime * 1000))
            : undefined,
        TunedHyperParameters: output.TunedHyperParameters !== undefined && output.TunedHyperParameters !== null
            ? deserializeAws_json1_1HyperParameters(output.TunedHyperParameters, context)
            : undefined,
        TuningJobName: output.TuningJobName !== undefined && output.TuningJobName !== null ? output.TuningJobName : undefined,
    };
};
const deserializeAws_json1_1HyperParameterTuningJobConfig = (output, context) => {
    return {
        HyperParameterTuningJobObjective: output.HyperParameterTuningJobObjective !== undefined && output.HyperParameterTuningJobObjective !== null
            ? deserializeAws_json1_1HyperParameterTuningJobObjective(output.HyperParameterTuningJobObjective, context)
            : undefined,
        ParameterRanges: output.ParameterRanges !== undefined && output.ParameterRanges !== null
            ? deserializeAws_json1_1ParameterRanges(output.ParameterRanges, context)
            : undefined,
        ResourceLimits: output.ResourceLimits !== undefined && output.ResourceLimits !== null
            ? deserializeAws_json1_1ResourceLimits(output.ResourceLimits, context)
            : undefined,
        Strategy: output.Strategy !== undefined && output.Strategy !== null ? output.Strategy : undefined,
        TrainingJobEarlyStoppingType: output.TrainingJobEarlyStoppingType !== undefined && output.TrainingJobEarlyStoppingType !== null
            ? output.TrainingJobEarlyStoppingType
            : undefined,
        TuningJobCompletionCriteria: output.TuningJobCompletionCriteria !== undefined && output.TuningJobCompletionCriteria !== null
            ? deserializeAws_json1_1TuningJobCompletionCriteria(output.TuningJobCompletionCriteria, context)
            : undefined,
    };
};
const deserializeAws_json1_1HyperParameterTuningJobObjective = (output, context) => {
    return {
        MetricName: output.MetricName !== undefined && output.MetricName !== null ? output.MetricName : undefined,
        Type: output.Type !== undefined && output.Type !== null ? output.Type : undefined,
    };
};
const deserializeAws_json1_1HyperParameterTuningJobObjectives = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1HyperParameterTuningJobObjective(entry, context);
    });
};
const deserializeAws_json1_1HyperParameterTuningJobSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1HyperParameterTuningJobSummary(entry, context);
    });
};
const deserializeAws_json1_1HyperParameterTuningJobSummary = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        HyperParameterTuningEndTime: output.HyperParameterTuningEndTime !== undefined && output.HyperParameterTuningEndTime !== null
            ? new Date(Math.round(output.HyperParameterTuningEndTime * 1000))
            : undefined,
        HyperParameterTuningJobArn: output.HyperParameterTuningJobArn !== undefined && output.HyperParameterTuningJobArn !== null
            ? output.HyperParameterTuningJobArn
            : undefined,
        HyperParameterTuningJobName: output.HyperParameterTuningJobName !== undefined && output.HyperParameterTuningJobName !== null
            ? output.HyperParameterTuningJobName
            : undefined,
        HyperParameterTuningJobStatus: output.HyperParameterTuningJobStatus !== undefined && output.HyperParameterTuningJobStatus !== null
            ? output.HyperParameterTuningJobStatus
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        ObjectiveStatusCounters: output.ObjectiveStatusCounters !== undefined && output.ObjectiveStatusCounters !== null
            ? deserializeAws_json1_1ObjectiveStatusCounters(output.ObjectiveStatusCounters, context)
            : undefined,
        ResourceLimits: output.ResourceLimits !== undefined && output.ResourceLimits !== null
            ? deserializeAws_json1_1ResourceLimits(output.ResourceLimits, context)
            : undefined,
        Strategy: output.Strategy !== undefined && output.Strategy !== null ? output.Strategy : undefined,
        TrainingJobStatusCounters: output.TrainingJobStatusCounters !== undefined && output.TrainingJobStatusCounters !== null
            ? deserializeAws_json1_1TrainingJobStatusCounters(output.TrainingJobStatusCounters, context)
            : undefined,
    };
};
const deserializeAws_json1_1HyperParameterTuningJobWarmStartConfig = (output, context) => {
    return {
        ParentHyperParameterTuningJobs: output.ParentHyperParameterTuningJobs !== undefined && output.ParentHyperParameterTuningJobs !== null
            ? deserializeAws_json1_1ParentHyperParameterTuningJobs(output.ParentHyperParameterTuningJobs, context)
            : undefined,
        WarmStartType: output.WarmStartType !== undefined && output.WarmStartType !== null ? output.WarmStartType : undefined,
    };
};
const deserializeAws_json1_1Image = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
        DisplayName: output.DisplayName !== undefined && output.DisplayName !== null ? output.DisplayName : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        ImageArn: output.ImageArn !== undefined && output.ImageArn !== null ? output.ImageArn : undefined,
        ImageName: output.ImageName !== undefined && output.ImageName !== null ? output.ImageName : undefined,
        ImageStatus: output.ImageStatus !== undefined && output.ImageStatus !== null ? output.ImageStatus : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
    };
};
const deserializeAws_json1_1ImageConfig = (output, context) => {
    return {
        RepositoryAccessMode: output.RepositoryAccessMode !== undefined && output.RepositoryAccessMode !== null
            ? output.RepositoryAccessMode
            : undefined,
        RepositoryAuthConfig: output.RepositoryAuthConfig !== undefined && output.RepositoryAuthConfig !== null
            ? deserializeAws_json1_1RepositoryAuthConfig(output.RepositoryAuthConfig, context)
            : undefined,
    };
};
const deserializeAws_json1_1Images = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Image(entry, context);
    });
};
const deserializeAws_json1_1ImageVersion = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        ImageArn: output.ImageArn !== undefined && output.ImageArn !== null ? output.ImageArn : undefined,
        ImageVersionArn: output.ImageVersionArn !== undefined && output.ImageVersionArn !== null ? output.ImageVersionArn : undefined,
        ImageVersionStatus: output.ImageVersionStatus !== undefined && output.ImageVersionStatus !== null
            ? output.ImageVersionStatus
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        Version: output.Version !== undefined && output.Version !== null ? output.Version : undefined,
    };
};
const deserializeAws_json1_1ImageVersions = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ImageVersion(entry, context);
    });
};
const deserializeAws_json1_1InferenceExecutionConfig = (output, context) => {
    return {
        Mode: output.Mode !== undefined && output.Mode !== null ? output.Mode : undefined,
    };
};
const deserializeAws_json1_1InferenceSpecification = (output, context) => {
    return {
        Containers: output.Containers !== undefined && output.Containers !== null
            ? deserializeAws_json1_1ModelPackageContainerDefinitionList(output.Containers, context)
            : undefined,
        SupportedContentTypes: output.SupportedContentTypes !== undefined && output.SupportedContentTypes !== null
            ? deserializeAws_json1_1ContentTypes(output.SupportedContentTypes, context)
            : undefined,
        SupportedRealtimeInferenceInstanceTypes: output.SupportedRealtimeInferenceInstanceTypes !== undefined &&
            output.SupportedRealtimeInferenceInstanceTypes !== null
            ? deserializeAws_json1_1RealtimeInferenceInstanceTypes(output.SupportedRealtimeInferenceInstanceTypes, context)
            : undefined,
        SupportedResponseMIMETypes: output.SupportedResponseMIMETypes !== undefined && output.SupportedResponseMIMETypes !== null
            ? deserializeAws_json1_1ResponseMIMETypes(output.SupportedResponseMIMETypes, context)
            : undefined,
        SupportedTransformInstanceTypes: output.SupportedTransformInstanceTypes !== undefined && output.SupportedTransformInstanceTypes !== null
            ? deserializeAws_json1_1TransformInstanceTypes(output.SupportedTransformInstanceTypes, context)
            : undefined,
    };
};
const deserializeAws_json1_1InputConfig = (output, context) => {
    return {
        DataInputConfig: output.DataInputConfig !== undefined && output.DataInputConfig !== null ? output.DataInputConfig : undefined,
        Framework: output.Framework !== undefined && output.Framework !== null ? output.Framework : undefined,
        FrameworkVersion: output.FrameworkVersion !== undefined && output.FrameworkVersion !== null ? output.FrameworkVersion : undefined,
        S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
    };
};
const deserializeAws_json1_1InputDataConfig = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Channel(entry, context);
    });
};
const deserializeAws_json1_1InputModes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1IntegerParameterRange = (output, context) => {
    return {
        MaxValue: output.MaxValue !== undefined && output.MaxValue !== null ? output.MaxValue : undefined,
        MinValue: output.MinValue !== undefined && output.MinValue !== null ? output.MinValue : undefined,
        Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,
        ScalingType: output.ScalingType !== undefined && output.ScalingType !== null ? output.ScalingType : undefined,
    };
};
const deserializeAws_json1_1IntegerParameterRanges = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1IntegerParameterRange(entry, context);
    });
};
const deserializeAws_json1_1IntegerParameterRangeSpecification = (output, context) => {
    return {
        MaxValue: output.MaxValue !== undefined && output.MaxValue !== null ? output.MaxValue : undefined,
        MinValue: output.MinValue !== undefined && output.MinValue !== null ? output.MinValue : undefined,
    };
};
const deserializeAws_json1_1JsonContentTypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1JupyterServerAppSettings = (output, context) => {
    return {
        DefaultResourceSpec: output.DefaultResourceSpec !== undefined && output.DefaultResourceSpec !== null
            ? deserializeAws_json1_1ResourceSpec(output.DefaultResourceSpec, context)
            : undefined,
    };
};
const deserializeAws_json1_1KernelGatewayAppSettings = (output, context) => {
    return {
        CustomImages: output.CustomImages !== undefined && output.CustomImages !== null
            ? deserializeAws_json1_1CustomImages(output.CustomImages, context)
            : undefined,
        DefaultResourceSpec: output.DefaultResourceSpec !== undefined && output.DefaultResourceSpec !== null
            ? deserializeAws_json1_1ResourceSpec(output.DefaultResourceSpec, context)
            : undefined,
    };
};
const deserializeAws_json1_1KernelGatewayImageConfig = (output, context) => {
    return {
        FileSystemConfig: output.FileSystemConfig !== undefined && output.FileSystemConfig !== null
            ? deserializeAws_json1_1FileSystemConfig(output.FileSystemConfig, context)
            : undefined,
        KernelSpecs: output.KernelSpecs !== undefined && output.KernelSpecs !== null
            ? deserializeAws_json1_1KernelSpecs(output.KernelSpecs, context)
            : undefined,
    };
};
const deserializeAws_json1_1KernelSpec = (output, context) => {
    return {
        DisplayName: output.DisplayName !== undefined && output.DisplayName !== null ? output.DisplayName : undefined,
        Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,
    };
};
const deserializeAws_json1_1KernelSpecs = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1KernelSpec(entry, context);
    });
};
const deserializeAws_json1_1LabelCounters = (output, context) => {
    return {
        FailedNonRetryableError: output.FailedNonRetryableError !== undefined && output.FailedNonRetryableError !== null
            ? output.FailedNonRetryableError
            : undefined,
        HumanLabeled: output.HumanLabeled !== undefined && output.HumanLabeled !== null ? output.HumanLabeled : undefined,
        MachineLabeled: output.MachineLabeled !== undefined && output.MachineLabeled !== null ? output.MachineLabeled : undefined,
        TotalLabeled: output.TotalLabeled !== undefined && output.TotalLabeled !== null ? output.TotalLabeled : undefined,
        Unlabeled: output.Unlabeled !== undefined && output.Unlabeled !== null ? output.Unlabeled : undefined,
    };
};
const deserializeAws_json1_1LabelCountersForWorkteam = (output, context) => {
    return {
        HumanLabeled: output.HumanLabeled !== undefined && output.HumanLabeled !== null ? output.HumanLabeled : undefined,
        PendingHuman: output.PendingHuman !== undefined && output.PendingHuman !== null ? output.PendingHuman : undefined,
        Total: output.Total !== undefined && output.Total !== null ? output.Total : undefined,
    };
};
const deserializeAws_json1_1LabelingJobAlgorithmsConfig = (output, context) => {
    return {
        InitialActiveLearningModelArn: output.InitialActiveLearningModelArn !== undefined && output.InitialActiveLearningModelArn !== null
            ? output.InitialActiveLearningModelArn
            : undefined,
        LabelingJobAlgorithmSpecificationArn: output.LabelingJobAlgorithmSpecificationArn !== undefined && output.LabelingJobAlgorithmSpecificationArn !== null
            ? output.LabelingJobAlgorithmSpecificationArn
            : undefined,
        LabelingJobResourceConfig: output.LabelingJobResourceConfig !== undefined && output.LabelingJobResourceConfig !== null
            ? deserializeAws_json1_1LabelingJobResourceConfig(output.LabelingJobResourceConfig, context)
            : undefined,
    };
};
const deserializeAws_json1_1LabelingJobDataAttributes = (output, context) => {
    return {
        ContentClassifiers: output.ContentClassifiers !== undefined && output.ContentClassifiers !== null
            ? deserializeAws_json1_1ContentClassifiers(output.ContentClassifiers, context)
            : undefined,
    };
};
const deserializeAws_json1_1LabelingJobDataSource = (output, context) => {
    return {
        S3DataSource: output.S3DataSource !== undefined && output.S3DataSource !== null
            ? deserializeAws_json1_1LabelingJobS3DataSource(output.S3DataSource, context)
            : undefined,
        SnsDataSource: output.SnsDataSource !== undefined && output.SnsDataSource !== null
            ? deserializeAws_json1_1LabelingJobSnsDataSource(output.SnsDataSource, context)
            : undefined,
    };
};
const deserializeAws_json1_1LabelingJobForWorkteamSummary = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        JobReferenceCode: output.JobReferenceCode !== undefined && output.JobReferenceCode !== null ? output.JobReferenceCode : undefined,
        LabelCounters: output.LabelCounters !== undefined && output.LabelCounters !== null
            ? deserializeAws_json1_1LabelCountersForWorkteam(output.LabelCounters, context)
            : undefined,
        LabelingJobName: output.LabelingJobName !== undefined && output.LabelingJobName !== null ? output.LabelingJobName : undefined,
        NumberOfHumanWorkersPerDataObject: output.NumberOfHumanWorkersPerDataObject !== undefined && output.NumberOfHumanWorkersPerDataObject !== null
            ? output.NumberOfHumanWorkersPerDataObject
            : undefined,
        WorkRequesterAccountId: output.WorkRequesterAccountId !== undefined && output.WorkRequesterAccountId !== null
            ? output.WorkRequesterAccountId
            : undefined,
    };
};
const deserializeAws_json1_1LabelingJobForWorkteamSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1LabelingJobForWorkteamSummary(entry, context);
    });
};
const deserializeAws_json1_1LabelingJobInputConfig = (output, context) => {
    return {
        DataAttributes: output.DataAttributes !== undefined && output.DataAttributes !== null
            ? deserializeAws_json1_1LabelingJobDataAttributes(output.DataAttributes, context)
            : undefined,
        DataSource: output.DataSource !== undefined && output.DataSource !== null
            ? deserializeAws_json1_1LabelingJobDataSource(output.DataSource, context)
            : undefined,
    };
};
const deserializeAws_json1_1LabelingJobOutput = (output, context) => {
    return {
        FinalActiveLearningModelArn: output.FinalActiveLearningModelArn !== undefined && output.FinalActiveLearningModelArn !== null
            ? output.FinalActiveLearningModelArn
            : undefined,
        OutputDatasetS3Uri: output.OutputDatasetS3Uri !== undefined && output.OutputDatasetS3Uri !== null
            ? output.OutputDatasetS3Uri
            : undefined,
    };
};
const deserializeAws_json1_1LabelingJobOutputConfig = (output, context) => {
    return {
        KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
        S3OutputPath: output.S3OutputPath !== undefined && output.S3OutputPath !== null ? output.S3OutputPath : undefined,
        SnsTopicArn: output.SnsTopicArn !== undefined && output.SnsTopicArn !== null ? output.SnsTopicArn : undefined,
    };
};
const deserializeAws_json1_1LabelingJobResourceConfig = (output, context) => {
    return {
        VolumeKmsKeyId: output.VolumeKmsKeyId !== undefined && output.VolumeKmsKeyId !== null ? output.VolumeKmsKeyId : undefined,
    };
};
const deserializeAws_json1_1LabelingJobS3DataSource = (output, context) => {
    return {
        ManifestS3Uri: output.ManifestS3Uri !== undefined && output.ManifestS3Uri !== null ? output.ManifestS3Uri : undefined,
    };
};
const deserializeAws_json1_1LabelingJobSnsDataSource = (output, context) => {
    return {
        SnsTopicArn: output.SnsTopicArn !== undefined && output.SnsTopicArn !== null ? output.SnsTopicArn : undefined,
    };
};
const deserializeAws_json1_1LabelingJobStoppingConditions = (output, context) => {
    return {
        MaxHumanLabeledObjectCount: output.MaxHumanLabeledObjectCount !== undefined && output.MaxHumanLabeledObjectCount !== null
            ? output.MaxHumanLabeledObjectCount
            : undefined,
        MaxPercentageOfInputDatasetLabeled: output.MaxPercentageOfInputDatasetLabeled !== undefined && output.MaxPercentageOfInputDatasetLabeled !== null
            ? output.MaxPercentageOfInputDatasetLabeled
            : undefined,
    };
};
const deserializeAws_json1_1LabelingJobSummary = (output, context) => {
    return {
        AnnotationConsolidationLambdaArn: output.AnnotationConsolidationLambdaArn !== undefined && output.AnnotationConsolidationLambdaArn !== null
            ? output.AnnotationConsolidationLambdaArn
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        InputConfig: output.InputConfig !== undefined && output.InputConfig !== null
            ? deserializeAws_json1_1LabelingJobInputConfig(output.InputConfig, context)
            : undefined,
        LabelCounters: output.LabelCounters !== undefined && output.LabelCounters !== null
            ? deserializeAws_json1_1LabelCounters(output.LabelCounters, context)
            : undefined,
        LabelingJobArn: output.LabelingJobArn !== undefined && output.LabelingJobArn !== null ? output.LabelingJobArn : undefined,
        LabelingJobName: output.LabelingJobName !== undefined && output.LabelingJobName !== null ? output.LabelingJobName : undefined,
        LabelingJobOutput: output.LabelingJobOutput !== undefined && output.LabelingJobOutput !== null
            ? deserializeAws_json1_1LabelingJobOutput(output.LabelingJobOutput, context)
            : undefined,
        LabelingJobStatus: output.LabelingJobStatus !== undefined && output.LabelingJobStatus !== null
            ? output.LabelingJobStatus
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        PreHumanTaskLambdaArn: output.PreHumanTaskLambdaArn !== undefined && output.PreHumanTaskLambdaArn !== null
            ? output.PreHumanTaskLambdaArn
            : undefined,
        WorkteamArn: output.WorkteamArn !== undefined && output.WorkteamArn !== null ? output.WorkteamArn : undefined,
    };
};
const deserializeAws_json1_1LabelingJobSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1LabelingJobSummary(entry, context);
    });
};
const deserializeAws_json1_1LineageEntityParameters = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const deserializeAws_json1_1ListActionsResponse = (output, context) => {
    return {
        ActionSummaries: output.ActionSummaries !== undefined && output.ActionSummaries !== null
            ? deserializeAws_json1_1ActionSummaries(output.ActionSummaries, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListAlgorithmsOutput = (output, context) => {
    return {
        AlgorithmSummaryList: output.AlgorithmSummaryList !== undefined && output.AlgorithmSummaryList !== null
            ? deserializeAws_json1_1AlgorithmSummaryList(output.AlgorithmSummaryList, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListAppImageConfigsResponse = (output, context) => {
    return {
        AppImageConfigs: output.AppImageConfigs !== undefined && output.AppImageConfigs !== null
            ? deserializeAws_json1_1AppImageConfigList(output.AppImageConfigs, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListAppsResponse = (output, context) => {
    return {
        Apps: output.Apps !== undefined && output.Apps !== null
            ? deserializeAws_json1_1AppList(output.Apps, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListArtifactsResponse = (output, context) => {
    return {
        ArtifactSummaries: output.ArtifactSummaries !== undefined && output.ArtifactSummaries !== null
            ? deserializeAws_json1_1ArtifactSummaries(output.ArtifactSummaries, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListAssociationsResponse = (output, context) => {
    return {
        AssociationSummaries: output.AssociationSummaries !== undefined && output.AssociationSummaries !== null
            ? deserializeAws_json1_1AssociationSummaries(output.AssociationSummaries, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListAutoMLJobsResponse = (output, context) => {
    return {
        AutoMLJobSummaries: output.AutoMLJobSummaries !== undefined && output.AutoMLJobSummaries !== null
            ? deserializeAws_json1_1AutoMLJobSummaries(output.AutoMLJobSummaries, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListCandidatesForAutoMLJobResponse = (output, context) => {
    return {
        Candidates: output.Candidates !== undefined && output.Candidates !== null
            ? deserializeAws_json1_1AutoMLCandidates(output.Candidates, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListCodeRepositoriesOutput = (output, context) => {
    return {
        CodeRepositorySummaryList: output.CodeRepositorySummaryList !== undefined && output.CodeRepositorySummaryList !== null
            ? deserializeAws_json1_1CodeRepositorySummaryList(output.CodeRepositorySummaryList, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListCompilationJobsResponse = (output, context) => {
    return {
        CompilationJobSummaries: output.CompilationJobSummaries !== undefined && output.CompilationJobSummaries !== null
            ? deserializeAws_json1_1CompilationJobSummaries(output.CompilationJobSummaries, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListContextsResponse = (output, context) => {
    return {
        ContextSummaries: output.ContextSummaries !== undefined && output.ContextSummaries !== null
            ? deserializeAws_json1_1ContextSummaries(output.ContextSummaries, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListDataQualityJobDefinitionsResponse = (output, context) => {
    return {
        JobDefinitionSummaries: output.JobDefinitionSummaries !== undefined && output.JobDefinitionSummaries !== null
            ? deserializeAws_json1_1MonitoringJobDefinitionSummaryList(output.JobDefinitionSummaries, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListDeviceFleetsResponse = (output, context) => {
    return {
        DeviceFleetSummaries: output.DeviceFleetSummaries !== undefined && output.DeviceFleetSummaries !== null
            ? deserializeAws_json1_1DeviceFleetSummaries(output.DeviceFleetSummaries, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListDevicesResponse = (output, context) => {
    return {
        DeviceSummaries: output.DeviceSummaries !== undefined && output.DeviceSummaries !== null
            ? deserializeAws_json1_1DeviceSummaries(output.DeviceSummaries, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListDomainsResponse = (output, context) => {
    return {
        Domains: output.Domains !== undefined && output.Domains !== null
            ? deserializeAws_json1_1DomainList(output.Domains, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListEdgePackagingJobsResponse = (output, context) => {
    return {
        EdgePackagingJobSummaries: output.EdgePackagingJobSummaries !== undefined && output.EdgePackagingJobSummaries !== null
            ? deserializeAws_json1_1EdgePackagingJobSummaries(output.EdgePackagingJobSummaries, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListEndpointConfigsOutput = (output, context) => {
    return {
        EndpointConfigs: output.EndpointConfigs !== undefined && output.EndpointConfigs !== null
            ? deserializeAws_json1_1EndpointConfigSummaryList(output.EndpointConfigs, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListEndpointsOutput = (output, context) => {
    return {
        Endpoints: output.Endpoints !== undefined && output.Endpoints !== null
            ? deserializeAws_json1_1EndpointSummaryList(output.Endpoints, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListExperimentsResponse = (output, context) => {
    return {
        ExperimentSummaries: output.ExperimentSummaries !== undefined && output.ExperimentSummaries !== null
            ? deserializeAws_json1_1ExperimentSummaries(output.ExperimentSummaries, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListFeatureGroupsResponse = (output, context) => {
    return {
        FeatureGroupSummaries: output.FeatureGroupSummaries !== undefined && output.FeatureGroupSummaries !== null
            ? deserializeAws_json1_1FeatureGroupSummaries(output.FeatureGroupSummaries, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListFlowDefinitionsResponse = (output, context) => {
    return {
        FlowDefinitionSummaries: output.FlowDefinitionSummaries !== undefined && output.FlowDefinitionSummaries !== null
            ? deserializeAws_json1_1FlowDefinitionSummaries(output.FlowDefinitionSummaries, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListHumanTaskUisResponse = (output, context) => {
    return {
        HumanTaskUiSummaries: output.HumanTaskUiSummaries !== undefined && output.HumanTaskUiSummaries !== null
            ? deserializeAws_json1_1HumanTaskUiSummaries(output.HumanTaskUiSummaries, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListHyperParameterTuningJobsResponse = (output, context) => {
    return {
        HyperParameterTuningJobSummaries: output.HyperParameterTuningJobSummaries !== undefined && output.HyperParameterTuningJobSummaries !== null
            ? deserializeAws_json1_1HyperParameterTuningJobSummaries(output.HyperParameterTuningJobSummaries, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListImagesResponse = (output, context) => {
    return {
        Images: output.Images !== undefined && output.Images !== null
            ? deserializeAws_json1_1Images(output.Images, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListImageVersionsResponse = (output, context) => {
    return {
        ImageVersions: output.ImageVersions !== undefined && output.ImageVersions !== null
            ? deserializeAws_json1_1ImageVersions(output.ImageVersions, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListLabelingJobsForWorkteamResponse = (output, context) => {
    return {
        LabelingJobSummaryList: output.LabelingJobSummaryList !== undefined && output.LabelingJobSummaryList !== null
            ? deserializeAws_json1_1LabelingJobForWorkteamSummaryList(output.LabelingJobSummaryList, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListLabelingJobsResponse = (output, context) => {
    return {
        LabelingJobSummaryList: output.LabelingJobSummaryList !== undefined && output.LabelingJobSummaryList !== null
            ? deserializeAws_json1_1LabelingJobSummaryList(output.LabelingJobSummaryList, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListModelBiasJobDefinitionsResponse = (output, context) => {
    return {
        JobDefinitionSummaries: output.JobDefinitionSummaries !== undefined && output.JobDefinitionSummaries !== null
            ? deserializeAws_json1_1MonitoringJobDefinitionSummaryList(output.JobDefinitionSummaries, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListModelExplainabilityJobDefinitionsResponse = (output, context) => {
    return {
        JobDefinitionSummaries: output.JobDefinitionSummaries !== undefined && output.JobDefinitionSummaries !== null
            ? deserializeAws_json1_1MonitoringJobDefinitionSummaryList(output.JobDefinitionSummaries, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListModelPackageGroupsOutput = (output, context) => {
    return {
        ModelPackageGroupSummaryList: output.ModelPackageGroupSummaryList !== undefined && output.ModelPackageGroupSummaryList !== null
            ? deserializeAws_json1_1ModelPackageGroupSummaryList(output.ModelPackageGroupSummaryList, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListModelPackagesOutput = (output, context) => {
    return {
        ModelPackageSummaryList: output.ModelPackageSummaryList !== undefined && output.ModelPackageSummaryList !== null
            ? deserializeAws_json1_1ModelPackageSummaryList(output.ModelPackageSummaryList, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListModelQualityJobDefinitionsResponse = (output, context) => {
    return {
        JobDefinitionSummaries: output.JobDefinitionSummaries !== undefined && output.JobDefinitionSummaries !== null
            ? deserializeAws_json1_1MonitoringJobDefinitionSummaryList(output.JobDefinitionSummaries, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListModelsOutput = (output, context) => {
    return {
        Models: output.Models !== undefined && output.Models !== null
            ? deserializeAws_json1_1ModelSummaryList(output.Models, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListMonitoringExecutionsResponse = (output, context) => {
    return {
        MonitoringExecutionSummaries: output.MonitoringExecutionSummaries !== undefined && output.MonitoringExecutionSummaries !== null
            ? deserializeAws_json1_1MonitoringExecutionSummaryList(output.MonitoringExecutionSummaries, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListMonitoringSchedulesResponse = (output, context) => {
    return {
        MonitoringScheduleSummaries: output.MonitoringScheduleSummaries !== undefined && output.MonitoringScheduleSummaries !== null
            ? deserializeAws_json1_1MonitoringScheduleSummaryList(output.MonitoringScheduleSummaries, context)
            : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    };
};
const deserializeAws_json1_1ListNotebookInstanceLifecycleConfigsOutput = (output, context) => {
    return {
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
        NotebookInstanceLifecycleConfigs: output.NotebookInstanceLifecycleConfigs !== undefined && output.NotebookInstanceLifecycleConfigs !== null
            ? deserializeAws_json1_1NotebookInstanceLifecycleConfigSummaryList(output.NotebookInstanceLifecycleConfigs, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListNotebookInstancesOutput = (output, context) => {
    return {
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
        NotebookInstances: output.NotebookInstances !== undefined && output.NotebookInstances !== null
            ? deserializeAws_json1_1NotebookInstanceSummaryList(output.NotebookInstances, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListPipelineExecutionsResponse = (output, context) => {
    return {
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
        PipelineExecutionSummaries: output.PipelineExecutionSummaries !== undefined && output.PipelineExecutionSummaries !== null
            ? deserializeAws_json1_1PipelineExecutionSummaryList(output.PipelineExecutionSummaries, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListPipelineExecutionStepsResponse = (output, context) => {
    return {
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
        PipelineExecutionSteps: output.PipelineExecutionSteps !== undefined && output.PipelineExecutionSteps !== null
            ? deserializeAws_json1_1PipelineExecutionStepList(output.PipelineExecutionSteps, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListPipelineParametersForExecutionResponse = (output, context) => {
    return {
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
        PipelineParameters: output.PipelineParameters !== undefined && output.PipelineParameters !== null
            ? deserializeAws_json1_1ParameterList(output.PipelineParameters, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListPipelinesResponse = (output, context) => {
    return {
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
        PipelineSummaries: output.PipelineSummaries !== undefined && output.PipelineSummaries !== null
            ? deserializeAws_json1_1PipelineSummaryList(output.PipelineSummaries, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListProcessingJobsResponse = (output, context) => {
    return {
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
        ProcessingJobSummaries: output.ProcessingJobSummaries !== undefined && output.ProcessingJobSummaries !== null
            ? deserializeAws_json1_1ProcessingJobSummaries(output.ProcessingJobSummaries, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListProjectsOutput = (output, context) => {
    return {
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
        ProjectSummaryList: output.ProjectSummaryList !== undefined && output.ProjectSummaryList !== null
            ? deserializeAws_json1_1ProjectSummaryList(output.ProjectSummaryList, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListSubscribedWorkteamsResponse = (output, context) => {
    return {
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
        SubscribedWorkteams: output.SubscribedWorkteams !== undefined && output.SubscribedWorkteams !== null
            ? deserializeAws_json1_1SubscribedWorkteams(output.SubscribedWorkteams, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListTagsOutput = (output, context) => {
    return {
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
        Tags: output.Tags !== undefined && output.Tags !== null
            ? deserializeAws_json1_1TagList(output.Tags, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListTrainingJobsForHyperParameterTuningJobResponse = (output, context) => {
    return {
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
        TrainingJobSummaries: output.TrainingJobSummaries !== undefined && output.TrainingJobSummaries !== null
            ? deserializeAws_json1_1HyperParameterTrainingJobSummaries(output.TrainingJobSummaries, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListTrainingJobsResponse = (output, context) => {
    return {
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
        TrainingJobSummaries: output.TrainingJobSummaries !== undefined && output.TrainingJobSummaries !== null
            ? deserializeAws_json1_1TrainingJobSummaries(output.TrainingJobSummaries, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListTransformJobsResponse = (output, context) => {
    return {
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
        TransformJobSummaries: output.TransformJobSummaries !== undefined && output.TransformJobSummaries !== null
            ? deserializeAws_json1_1TransformJobSummaries(output.TransformJobSummaries, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListTrialComponentsResponse = (output, context) => {
    return {
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
        TrialComponentSummaries: output.TrialComponentSummaries !== undefined && output.TrialComponentSummaries !== null
            ? deserializeAws_json1_1TrialComponentSummaries(output.TrialComponentSummaries, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListTrialsResponse = (output, context) => {
    return {
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
        TrialSummaries: output.TrialSummaries !== undefined && output.TrialSummaries !== null
            ? deserializeAws_json1_1TrialSummaries(output.TrialSummaries, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListUserProfilesResponse = (output, context) => {
    return {
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
        UserProfiles: output.UserProfiles !== undefined && output.UserProfiles !== null
            ? deserializeAws_json1_1UserProfileList(output.UserProfiles, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListWorkforcesResponse = (output, context) => {
    return {
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
        Workforces: output.Workforces !== undefined && output.Workforces !== null
            ? deserializeAws_json1_1Workforces(output.Workforces, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListWorkteamsResponse = (output, context) => {
    return {
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
        Workteams: output.Workteams !== undefined && output.Workteams !== null
            ? deserializeAws_json1_1Workteams(output.Workteams, context)
            : undefined,
    };
};
const deserializeAws_json1_1MemberDefinition = (output, context) => {
    return {
        CognitoMemberDefinition: output.CognitoMemberDefinition !== undefined && output.CognitoMemberDefinition !== null
            ? deserializeAws_json1_1CognitoMemberDefinition(output.CognitoMemberDefinition, context)
            : undefined,
        OidcMemberDefinition: output.OidcMemberDefinition !== undefined && output.OidcMemberDefinition !== null
            ? deserializeAws_json1_1OidcMemberDefinition(output.OidcMemberDefinition, context)
            : undefined,
    };
};
const deserializeAws_json1_1MemberDefinitions = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1MemberDefinition(entry, context);
    });
};
const deserializeAws_json1_1MetadataProperties = (output, context) => {
    return {
        CommitId: output.CommitId !== undefined && output.CommitId !== null ? output.CommitId : undefined,
        GeneratedBy: output.GeneratedBy !== undefined && output.GeneratedBy !== null ? output.GeneratedBy : undefined,
        ProjectId: output.ProjectId !== undefined && output.ProjectId !== null ? output.ProjectId : undefined,
        Repository: output.Repository !== undefined && output.Repository !== null ? output.Repository : undefined,
    };
};
const deserializeAws_json1_1MetricData = (output, context) => {
    return {
        MetricName: output.MetricName !== undefined && output.MetricName !== null ? output.MetricName : undefined,
        Timestamp: output.Timestamp !== undefined && output.Timestamp !== null
            ? new Date(Math.round(output.Timestamp * 1000))
            : undefined,
        Value: output.Value !== undefined && output.Value !== null ? output.Value : undefined,
    };
};
const deserializeAws_json1_1MetricDefinition = (output, context) => {
    return {
        Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,
        Regex: output.Regex !== undefined && output.Regex !== null ? output.Regex : undefined,
    };
};
const deserializeAws_json1_1MetricDefinitionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1MetricDefinition(entry, context);
    });
};
const deserializeAws_json1_1MetricsSource = (output, context) => {
    return {
        ContentDigest: output.ContentDigest !== undefined && output.ContentDigest !== null ? output.ContentDigest : undefined,
        ContentType: output.ContentType !== undefined && output.ContentType !== null ? output.ContentType : undefined,
        S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
    };
};
const deserializeAws_json1_1ModelArtifacts = (output, context) => {
    return {
        S3ModelArtifacts: output.S3ModelArtifacts !== undefined && output.S3ModelArtifacts !== null ? output.S3ModelArtifacts : undefined,
    };
};
const deserializeAws_json1_1ModelBiasAppSpecification = (output, context) => {
    return {
        ConfigUri: output.ConfigUri !== undefined && output.ConfigUri !== null ? output.ConfigUri : undefined,
        Environment: output.Environment !== undefined && output.Environment !== null
            ? deserializeAws_json1_1MonitoringEnvironmentMap(output.Environment, context)
            : undefined,
        ImageUri: output.ImageUri !== undefined && output.ImageUri !== null ? output.ImageUri : undefined,
    };
};
const deserializeAws_json1_1ModelBiasBaselineConfig = (output, context) => {
    return {
        BaseliningJobName: output.BaseliningJobName !== undefined && output.BaseliningJobName !== null
            ? output.BaseliningJobName
            : undefined,
        ConstraintsResource: output.ConstraintsResource !== undefined && output.ConstraintsResource !== null
            ? deserializeAws_json1_1MonitoringConstraintsResource(output.ConstraintsResource, context)
            : undefined,
    };
};
const deserializeAws_json1_1ModelBiasJobInput = (output, context) => {
    return {
        EndpointInput: output.EndpointInput !== undefined && output.EndpointInput !== null
            ? deserializeAws_json1_1EndpointInput(output.EndpointInput, context)
            : undefined,
        GroundTruthS3Input: output.GroundTruthS3Input !== undefined && output.GroundTruthS3Input !== null
            ? deserializeAws_json1_1MonitoringGroundTruthS3Input(output.GroundTruthS3Input, context)
            : undefined,
    };
};
const deserializeAws_json1_1ModelClientConfig = (output, context) => {
    return {
        InvocationsMaxRetries: output.InvocationsMaxRetries !== undefined && output.InvocationsMaxRetries !== null
            ? output.InvocationsMaxRetries
            : undefined,
        InvocationsTimeoutInSeconds: output.InvocationsTimeoutInSeconds !== undefined && output.InvocationsTimeoutInSeconds !== null
            ? output.InvocationsTimeoutInSeconds
            : undefined,
    };
};
const deserializeAws_json1_1ModelDataQuality = (output, context) => {
    return {
        Constraints: output.Constraints !== undefined && output.Constraints !== null
            ? deserializeAws_json1_1MetricsSource(output.Constraints, context)
            : undefined,
        Statistics: output.Statistics !== undefined && output.Statistics !== null
            ? deserializeAws_json1_1MetricsSource(output.Statistics, context)
            : undefined,
    };
};
const deserializeAws_json1_1ModelDeployConfig = (output, context) => {
    return {
        AutoGenerateEndpointName: output.AutoGenerateEndpointName !== undefined && output.AutoGenerateEndpointName !== null
            ? output.AutoGenerateEndpointName
            : undefined,
        EndpointName: output.EndpointName !== undefined && output.EndpointName !== null ? output.EndpointName : undefined,
    };
};
const deserializeAws_json1_1ModelDeployResult = (output, context) => {
    return {
        EndpointName: output.EndpointName !== undefined && output.EndpointName !== null ? output.EndpointName : undefined,
    };
};
const deserializeAws_json1_1ModelDigests = (output, context) => {
    return {
        ArtifactDigest: output.ArtifactDigest !== undefined && output.ArtifactDigest !== null ? output.ArtifactDigest : undefined,
    };
};
const deserializeAws_json1_1ModelExplainabilityAppSpecification = (output, context) => {
    return {
        ConfigUri: output.ConfigUri !== undefined && output.ConfigUri !== null ? output.ConfigUri : undefined,
        Environment: output.Environment !== undefined && output.Environment !== null
            ? deserializeAws_json1_1MonitoringEnvironmentMap(output.Environment, context)
            : undefined,
        ImageUri: output.ImageUri !== undefined && output.ImageUri !== null ? output.ImageUri : undefined,
    };
};
const deserializeAws_json1_1ModelExplainabilityBaselineConfig = (output, context) => {
    return {
        BaseliningJobName: output.BaseliningJobName !== undefined && output.BaseliningJobName !== null
            ? output.BaseliningJobName
            : undefined,
        ConstraintsResource: output.ConstraintsResource !== undefined && output.ConstraintsResource !== null
            ? deserializeAws_json1_1MonitoringConstraintsResource(output.ConstraintsResource, context)
            : undefined,
    };
};
const deserializeAws_json1_1ModelExplainabilityJobInput = (output, context) => {
    return {
        EndpointInput: output.EndpointInput !== undefined && output.EndpointInput !== null
            ? deserializeAws_json1_1EndpointInput(output.EndpointInput, context)
            : undefined,
    };
};
const deserializeAws_json1_1ModelMetrics = (output, context) => {
    return {
        Bias: output.Bias !== undefined && output.Bias !== null ? deserializeAws_json1_1Bias(output.Bias, context) : undefined,
        Explainability: output.Explainability !== undefined && output.Explainability !== null
            ? deserializeAws_json1_1Explainability(output.Explainability, context)
            : undefined,
        ModelDataQuality: output.ModelDataQuality !== undefined && output.ModelDataQuality !== null
            ? deserializeAws_json1_1ModelDataQuality(output.ModelDataQuality, context)
            : undefined,
        ModelQuality: output.ModelQuality !== undefined && output.ModelQuality !== null
            ? deserializeAws_json1_1ModelQuality(output.ModelQuality, context)
            : undefined,
    };
};
const deserializeAws_json1_1ModelPackage = (output, context) => {
    return {
        ApprovalDescription: output.ApprovalDescription !== undefined && output.ApprovalDescription !== null
            ? output.ApprovalDescription
            : undefined,
        CertifyForMarketplace: output.CertifyForMarketplace !== undefined && output.CertifyForMarketplace !== null
            ? output.CertifyForMarketplace
            : undefined,
        CreatedBy: output.CreatedBy !== undefined && output.CreatedBy !== null
            ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        InferenceSpecification: output.InferenceSpecification !== undefined && output.InferenceSpecification !== null
            ? deserializeAws_json1_1InferenceSpecification(output.InferenceSpecification, context)
            : undefined,
        LastModifiedBy: output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
            ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        MetadataProperties: output.MetadataProperties !== undefined && output.MetadataProperties !== null
            ? deserializeAws_json1_1MetadataProperties(output.MetadataProperties, context)
            : undefined,
        ModelApprovalStatus: output.ModelApprovalStatus !== undefined && output.ModelApprovalStatus !== null
            ? output.ModelApprovalStatus
            : undefined,
        ModelMetrics: output.ModelMetrics !== undefined && output.ModelMetrics !== null
            ? deserializeAws_json1_1ModelMetrics(output.ModelMetrics, context)
            : undefined,
        ModelPackageArn: output.ModelPackageArn !== undefined && output.ModelPackageArn !== null ? output.ModelPackageArn : undefined,
        ModelPackageDescription: output.ModelPackageDescription !== undefined && output.ModelPackageDescription !== null
            ? output.ModelPackageDescription
            : undefined,
        ModelPackageGroupName: output.ModelPackageGroupName !== undefined && output.ModelPackageGroupName !== null
            ? output.ModelPackageGroupName
            : undefined,
        ModelPackageName: output.ModelPackageName !== undefined && output.ModelPackageName !== null ? output.ModelPackageName : undefined,
        ModelPackageStatus: output.ModelPackageStatus !== undefined && output.ModelPackageStatus !== null
            ? output.ModelPackageStatus
            : undefined,
        ModelPackageStatusDetails: output.ModelPackageStatusDetails !== undefined && output.ModelPackageStatusDetails !== null
            ? deserializeAws_json1_1ModelPackageStatusDetails(output.ModelPackageStatusDetails, context)
            : undefined,
        ModelPackageVersion: output.ModelPackageVersion !== undefined && output.ModelPackageVersion !== null
            ? output.ModelPackageVersion
            : undefined,
        SourceAlgorithmSpecification: output.SourceAlgorithmSpecification !== undefined && output.SourceAlgorithmSpecification !== null
            ? deserializeAws_json1_1SourceAlgorithmSpecification(output.SourceAlgorithmSpecification, context)
            : undefined,
        Tags: output.Tags !== undefined && output.Tags !== null
            ? deserializeAws_json1_1TagList(output.Tags, context)
            : undefined,
        ValidationSpecification: output.ValidationSpecification !== undefined && output.ValidationSpecification !== null
            ? deserializeAws_json1_1ModelPackageValidationSpecification(output.ValidationSpecification, context)
            : undefined,
    };
};
const deserializeAws_json1_1ModelPackageContainerDefinition = (output, context) => {
    return {
        ContainerHostname: output.ContainerHostname !== undefined && output.ContainerHostname !== null
            ? output.ContainerHostname
            : undefined,
        Image: output.Image !== undefined && output.Image !== null ? output.Image : undefined,
        ImageDigest: output.ImageDigest !== undefined && output.ImageDigest !== null ? output.ImageDigest : undefined,
        ModelDataUrl: output.ModelDataUrl !== undefined && output.ModelDataUrl !== null ? output.ModelDataUrl : undefined,
        ProductId: output.ProductId !== undefined && output.ProductId !== null ? output.ProductId : undefined,
    };
};
const deserializeAws_json1_1ModelPackageContainerDefinitionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ModelPackageContainerDefinition(entry, context);
    });
};
const deserializeAws_json1_1ModelPackageGroup = (output, context) => {
    return {
        CreatedBy: output.CreatedBy !== undefined && output.CreatedBy !== null
            ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        ModelPackageGroupArn: output.ModelPackageGroupArn !== undefined && output.ModelPackageGroupArn !== null
            ? output.ModelPackageGroupArn
            : undefined,
        ModelPackageGroupDescription: output.ModelPackageGroupDescription !== undefined && output.ModelPackageGroupDescription !== null
            ? output.ModelPackageGroupDescription
            : undefined,
        ModelPackageGroupName: output.ModelPackageGroupName !== undefined && output.ModelPackageGroupName !== null
            ? output.ModelPackageGroupName
            : undefined,
        ModelPackageGroupStatus: output.ModelPackageGroupStatus !== undefined && output.ModelPackageGroupStatus !== null
            ? output.ModelPackageGroupStatus
            : undefined,
        Tags: output.Tags !== undefined && output.Tags !== null
            ? deserializeAws_json1_1TagList(output.Tags, context)
            : undefined,
    };
};
const deserializeAws_json1_1ModelPackageGroupSummary = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        ModelPackageGroupArn: output.ModelPackageGroupArn !== undefined && output.ModelPackageGroupArn !== null
            ? output.ModelPackageGroupArn
            : undefined,
        ModelPackageGroupDescription: output.ModelPackageGroupDescription !== undefined && output.ModelPackageGroupDescription !== null
            ? output.ModelPackageGroupDescription
            : undefined,
        ModelPackageGroupName: output.ModelPackageGroupName !== undefined && output.ModelPackageGroupName !== null
            ? output.ModelPackageGroupName
            : undefined,
        ModelPackageGroupStatus: output.ModelPackageGroupStatus !== undefined && output.ModelPackageGroupStatus !== null
            ? output.ModelPackageGroupStatus
            : undefined,
    };
};
const deserializeAws_json1_1ModelPackageGroupSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ModelPackageGroupSummary(entry, context);
    });
};
const deserializeAws_json1_1ModelPackageStatusDetails = (output, context) => {
    return {
        ImageScanStatuses: output.ImageScanStatuses !== undefined && output.ImageScanStatuses !== null
            ? deserializeAws_json1_1ModelPackageStatusItemList(output.ImageScanStatuses, context)
            : undefined,
        ValidationStatuses: output.ValidationStatuses !== undefined && output.ValidationStatuses !== null
            ? deserializeAws_json1_1ModelPackageStatusItemList(output.ValidationStatuses, context)
            : undefined,
    };
};
const deserializeAws_json1_1ModelPackageStatusItem = (output, context) => {
    return {
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,
        Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
    };
};
const deserializeAws_json1_1ModelPackageStatusItemList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ModelPackageStatusItem(entry, context);
    });
};
const deserializeAws_json1_1ModelPackageSummary = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        ModelApprovalStatus: output.ModelApprovalStatus !== undefined && output.ModelApprovalStatus !== null
            ? output.ModelApprovalStatus
            : undefined,
        ModelPackageArn: output.ModelPackageArn !== undefined && output.ModelPackageArn !== null ? output.ModelPackageArn : undefined,
        ModelPackageDescription: output.ModelPackageDescription !== undefined && output.ModelPackageDescription !== null
            ? output.ModelPackageDescription
            : undefined,
        ModelPackageGroupName: output.ModelPackageGroupName !== undefined && output.ModelPackageGroupName !== null
            ? output.ModelPackageGroupName
            : undefined,
        ModelPackageName: output.ModelPackageName !== undefined && output.ModelPackageName !== null ? output.ModelPackageName : undefined,
        ModelPackageStatus: output.ModelPackageStatus !== undefined && output.ModelPackageStatus !== null
            ? output.ModelPackageStatus
            : undefined,
        ModelPackageVersion: output.ModelPackageVersion !== undefined && output.ModelPackageVersion !== null
            ? output.ModelPackageVersion
            : undefined,
    };
};
const deserializeAws_json1_1ModelPackageSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ModelPackageSummary(entry, context);
    });
};
const deserializeAws_json1_1ModelPackageValidationProfile = (output, context) => {
    return {
        ProfileName: output.ProfileName !== undefined && output.ProfileName !== null ? output.ProfileName : undefined,
        TransformJobDefinition: output.TransformJobDefinition !== undefined && output.TransformJobDefinition !== null
            ? deserializeAws_json1_1TransformJobDefinition(output.TransformJobDefinition, context)
            : undefined,
    };
};
const deserializeAws_json1_1ModelPackageValidationProfiles = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ModelPackageValidationProfile(entry, context);
    });
};
const deserializeAws_json1_1ModelPackageValidationSpecification = (output, context) => {
    return {
        ValidationProfiles: output.ValidationProfiles !== undefined && output.ValidationProfiles !== null
            ? deserializeAws_json1_1ModelPackageValidationProfiles(output.ValidationProfiles, context)
            : undefined,
        ValidationRole: output.ValidationRole !== undefined && output.ValidationRole !== null ? output.ValidationRole : undefined,
    };
};
const deserializeAws_json1_1ModelQuality = (output, context) => {
    return {
        Constraints: output.Constraints !== undefined && output.Constraints !== null
            ? deserializeAws_json1_1MetricsSource(output.Constraints, context)
            : undefined,
        Statistics: output.Statistics !== undefined && output.Statistics !== null
            ? deserializeAws_json1_1MetricsSource(output.Statistics, context)
            : undefined,
    };
};
const deserializeAws_json1_1ModelQualityAppSpecification = (output, context) => {
    return {
        ContainerArguments: output.ContainerArguments !== undefined && output.ContainerArguments !== null
            ? deserializeAws_json1_1MonitoringContainerArguments(output.ContainerArguments, context)
            : undefined,
        ContainerEntrypoint: output.ContainerEntrypoint !== undefined && output.ContainerEntrypoint !== null
            ? deserializeAws_json1_1ContainerEntrypoint(output.ContainerEntrypoint, context)
            : undefined,
        Environment: output.Environment !== undefined && output.Environment !== null
            ? deserializeAws_json1_1MonitoringEnvironmentMap(output.Environment, context)
            : undefined,
        ImageUri: output.ImageUri !== undefined && output.ImageUri !== null ? output.ImageUri : undefined,
        PostAnalyticsProcessorSourceUri: output.PostAnalyticsProcessorSourceUri !== undefined && output.PostAnalyticsProcessorSourceUri !== null
            ? output.PostAnalyticsProcessorSourceUri
            : undefined,
        ProblemType: output.ProblemType !== undefined && output.ProblemType !== null ? output.ProblemType : undefined,
        RecordPreprocessorSourceUri: output.RecordPreprocessorSourceUri !== undefined && output.RecordPreprocessorSourceUri !== null
            ? output.RecordPreprocessorSourceUri
            : undefined,
    };
};
const deserializeAws_json1_1ModelQualityBaselineConfig = (output, context) => {
    return {
        BaseliningJobName: output.BaseliningJobName !== undefined && output.BaseliningJobName !== null
            ? output.BaseliningJobName
            : undefined,
        ConstraintsResource: output.ConstraintsResource !== undefined && output.ConstraintsResource !== null
            ? deserializeAws_json1_1MonitoringConstraintsResource(output.ConstraintsResource, context)
            : undefined,
    };
};
const deserializeAws_json1_1ModelQualityJobInput = (output, context) => {
    return {
        EndpointInput: output.EndpointInput !== undefined && output.EndpointInput !== null
            ? deserializeAws_json1_1EndpointInput(output.EndpointInput, context)
            : undefined,
        GroundTruthS3Input: output.GroundTruthS3Input !== undefined && output.GroundTruthS3Input !== null
            ? deserializeAws_json1_1MonitoringGroundTruthS3Input(output.GroundTruthS3Input, context)
            : undefined,
    };
};
const deserializeAws_json1_1ModelStepMetadata = (output, context) => {
    return {
        Arn: output.Arn !== undefined && output.Arn !== null ? output.Arn : undefined,
    };
};
const deserializeAws_json1_1ModelSummary = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        ModelArn: output.ModelArn !== undefined && output.ModelArn !== null ? output.ModelArn : undefined,
        ModelName: output.ModelName !== undefined && output.ModelName !== null ? output.ModelName : undefined,
    };
};
const deserializeAws_json1_1ModelSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ModelSummary(entry, context);
    });
};
const deserializeAws_json1_1MonitoringAppSpecification = (output, context) => {
    return {
        ContainerArguments: output.ContainerArguments !== undefined && output.ContainerArguments !== null
            ? deserializeAws_json1_1MonitoringContainerArguments(output.ContainerArguments, context)
            : undefined,
        ContainerEntrypoint: output.ContainerEntrypoint !== undefined && output.ContainerEntrypoint !== null
            ? deserializeAws_json1_1ContainerEntrypoint(output.ContainerEntrypoint, context)
            : undefined,
        ImageUri: output.ImageUri !== undefined && output.ImageUri !== null ? output.ImageUri : undefined,
        PostAnalyticsProcessorSourceUri: output.PostAnalyticsProcessorSourceUri !== undefined && output.PostAnalyticsProcessorSourceUri !== null
            ? output.PostAnalyticsProcessorSourceUri
            : undefined,
        RecordPreprocessorSourceUri: output.RecordPreprocessorSourceUri !== undefined && output.RecordPreprocessorSourceUri !== null
            ? output.RecordPreprocessorSourceUri
            : undefined,
    };
};
const deserializeAws_json1_1MonitoringBaselineConfig = (output, context) => {
    return {
        BaseliningJobName: output.BaseliningJobName !== undefined && output.BaseliningJobName !== null
            ? output.BaseliningJobName
            : undefined,
        ConstraintsResource: output.ConstraintsResource !== undefined && output.ConstraintsResource !== null
            ? deserializeAws_json1_1MonitoringConstraintsResource(output.ConstraintsResource, context)
            : undefined,
        StatisticsResource: output.StatisticsResource !== undefined && output.StatisticsResource !== null
            ? deserializeAws_json1_1MonitoringStatisticsResource(output.StatisticsResource, context)
            : undefined,
    };
};
const deserializeAws_json1_1MonitoringClusterConfig = (output, context) => {
    return {
        InstanceCount: output.InstanceCount !== undefined && output.InstanceCount !== null ? output.InstanceCount : undefined,
        InstanceType: output.InstanceType !== undefined && output.InstanceType !== null ? output.InstanceType : undefined,
        VolumeKmsKeyId: output.VolumeKmsKeyId !== undefined && output.VolumeKmsKeyId !== null ? output.VolumeKmsKeyId : undefined,
        VolumeSizeInGB: output.VolumeSizeInGB !== undefined && output.VolumeSizeInGB !== null ? output.VolumeSizeInGB : undefined,
    };
};
const deserializeAws_json1_1MonitoringConstraintsResource = (output, context) => {
    return {
        S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
    };
};
const deserializeAws_json1_1MonitoringContainerArguments = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1MonitoringEnvironmentMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const deserializeAws_json1_1MonitoringExecutionSummary = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        EndpointName: output.EndpointName !== undefined && output.EndpointName !== null ? output.EndpointName : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        MonitoringExecutionStatus: output.MonitoringExecutionStatus !== undefined && output.MonitoringExecutionStatus !== null
            ? output.MonitoringExecutionStatus
            : undefined,
        MonitoringJobDefinitionName: output.MonitoringJobDefinitionName !== undefined && output.MonitoringJobDefinitionName !== null
            ? output.MonitoringJobDefinitionName
            : undefined,
        MonitoringScheduleName: output.MonitoringScheduleName !== undefined && output.MonitoringScheduleName !== null
            ? output.MonitoringScheduleName
            : undefined,
        MonitoringType: output.MonitoringType !== undefined && output.MonitoringType !== null ? output.MonitoringType : undefined,
        ProcessingJobArn: output.ProcessingJobArn !== undefined && output.ProcessingJobArn !== null ? output.ProcessingJobArn : undefined,
        ScheduledTime: output.ScheduledTime !== undefined && output.ScheduledTime !== null
            ? new Date(Math.round(output.ScheduledTime * 1000))
            : undefined,
    };
};
const deserializeAws_json1_1MonitoringExecutionSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1MonitoringExecutionSummary(entry, context);
    });
};
const deserializeAws_json1_1MonitoringGroundTruthS3Input = (output, context) => {
    return {
        S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
    };
};
const deserializeAws_json1_1MonitoringInput = (output, context) => {
    return {
        EndpointInput: output.EndpointInput !== undefined && output.EndpointInput !== null
            ? deserializeAws_json1_1EndpointInput(output.EndpointInput, context)
            : undefined,
    };
};
const deserializeAws_json1_1MonitoringInputs = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1MonitoringInput(entry, context);
    });
};
const deserializeAws_json1_1MonitoringJobDefinition = (output, context) => {
    return {
        BaselineConfig: output.BaselineConfig !== undefined && output.BaselineConfig !== null
            ? deserializeAws_json1_1MonitoringBaselineConfig(output.BaselineConfig, context)
            : undefined,
        Environment: output.Environment !== undefined && output.Environment !== null
            ? deserializeAws_json1_1MonitoringEnvironmentMap(output.Environment, context)
            : undefined,
        MonitoringAppSpecification: output.MonitoringAppSpecification !== undefined && output.MonitoringAppSpecification !== null
            ? deserializeAws_json1_1MonitoringAppSpecification(output.MonitoringAppSpecification, context)
            : undefined,
        MonitoringInputs: output.MonitoringInputs !== undefined && output.MonitoringInputs !== null
            ? deserializeAws_json1_1MonitoringInputs(output.MonitoringInputs, context)
            : undefined,
        MonitoringOutputConfig: output.MonitoringOutputConfig !== undefined && output.MonitoringOutputConfig !== null
            ? deserializeAws_json1_1MonitoringOutputConfig(output.MonitoringOutputConfig, context)
            : undefined,
        MonitoringResources: output.MonitoringResources !== undefined && output.MonitoringResources !== null
            ? deserializeAws_json1_1MonitoringResources(output.MonitoringResources, context)
            : undefined,
        NetworkConfig: output.NetworkConfig !== undefined && output.NetworkConfig !== null
            ? deserializeAws_json1_1NetworkConfig(output.NetworkConfig, context)
            : undefined,
        RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
        StoppingCondition: output.StoppingCondition !== undefined && output.StoppingCondition !== null
            ? deserializeAws_json1_1MonitoringStoppingCondition(output.StoppingCondition, context)
            : undefined,
    };
};
const deserializeAws_json1_1MonitoringJobDefinitionSummary = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        EndpointName: output.EndpointName !== undefined && output.EndpointName !== null ? output.EndpointName : undefined,
        MonitoringJobDefinitionArn: output.MonitoringJobDefinitionArn !== undefined && output.MonitoringJobDefinitionArn !== null
            ? output.MonitoringJobDefinitionArn
            : undefined,
        MonitoringJobDefinitionName: output.MonitoringJobDefinitionName !== undefined && output.MonitoringJobDefinitionName !== null
            ? output.MonitoringJobDefinitionName
            : undefined,
    };
};
const deserializeAws_json1_1MonitoringJobDefinitionSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1MonitoringJobDefinitionSummary(entry, context);
    });
};
const deserializeAws_json1_1MonitoringNetworkConfig = (output, context) => {
    return {
        EnableInterContainerTrafficEncryption: output.EnableInterContainerTrafficEncryption !== undefined &&
            output.EnableInterContainerTrafficEncryption !== null
            ? output.EnableInterContainerTrafficEncryption
            : undefined,
        EnableNetworkIsolation: output.EnableNetworkIsolation !== undefined && output.EnableNetworkIsolation !== null
            ? output.EnableNetworkIsolation
            : undefined,
        VpcConfig: output.VpcConfig !== undefined && output.VpcConfig !== null
            ? deserializeAws_json1_1VpcConfig(output.VpcConfig, context)
            : undefined,
    };
};
const deserializeAws_json1_1MonitoringOutput = (output, context) => {
    return {
        S3Output: output.S3Output !== undefined && output.S3Output !== null
            ? deserializeAws_json1_1MonitoringS3Output(output.S3Output, context)
            : undefined,
    };
};
const deserializeAws_json1_1MonitoringOutputConfig = (output, context) => {
    return {
        KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
        MonitoringOutputs: output.MonitoringOutputs !== undefined && output.MonitoringOutputs !== null
            ? deserializeAws_json1_1MonitoringOutputs(output.MonitoringOutputs, context)
            : undefined,
    };
};
const deserializeAws_json1_1MonitoringOutputs = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1MonitoringOutput(entry, context);
    });
};
const deserializeAws_json1_1MonitoringResources = (output, context) => {
    return {
        ClusterConfig: output.ClusterConfig !== undefined && output.ClusterConfig !== null
            ? deserializeAws_json1_1MonitoringClusterConfig(output.ClusterConfig, context)
            : undefined,
    };
};
const deserializeAws_json1_1MonitoringS3Output = (output, context) => {
    return {
        LocalPath: output.LocalPath !== undefined && output.LocalPath !== null ? output.LocalPath : undefined,
        S3UploadMode: output.S3UploadMode !== undefined && output.S3UploadMode !== null ? output.S3UploadMode : undefined,
        S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
    };
};
const deserializeAws_json1_1MonitoringSchedule = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        EndpointName: output.EndpointName !== undefined && output.EndpointName !== null ? output.EndpointName : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        LastMonitoringExecutionSummary: output.LastMonitoringExecutionSummary !== undefined && output.LastMonitoringExecutionSummary !== null
            ? deserializeAws_json1_1MonitoringExecutionSummary(output.LastMonitoringExecutionSummary, context)
            : undefined,
        MonitoringScheduleArn: output.MonitoringScheduleArn !== undefined && output.MonitoringScheduleArn !== null
            ? output.MonitoringScheduleArn
            : undefined,
        MonitoringScheduleConfig: output.MonitoringScheduleConfig !== undefined && output.MonitoringScheduleConfig !== null
            ? deserializeAws_json1_1MonitoringScheduleConfig(output.MonitoringScheduleConfig, context)
            : undefined,
        MonitoringScheduleName: output.MonitoringScheduleName !== undefined && output.MonitoringScheduleName !== null
            ? output.MonitoringScheduleName
            : undefined,
        MonitoringScheduleStatus: output.MonitoringScheduleStatus !== undefined && output.MonitoringScheduleStatus !== null
            ? output.MonitoringScheduleStatus
            : undefined,
        MonitoringType: output.MonitoringType !== undefined && output.MonitoringType !== null ? output.MonitoringType : undefined,
        Tags: output.Tags !== undefined && output.Tags !== null
            ? deserializeAws_json1_1TagList(output.Tags, context)
            : undefined,
    };
};
const deserializeAws_json1_1MonitoringScheduleConfig = (output, context) => {
    return {
        MonitoringJobDefinition: output.MonitoringJobDefinition !== undefined && output.MonitoringJobDefinition !== null
            ? deserializeAws_json1_1MonitoringJobDefinition(output.MonitoringJobDefinition, context)
            : undefined,
        MonitoringJobDefinitionName: output.MonitoringJobDefinitionName !== undefined && output.MonitoringJobDefinitionName !== null
            ? output.MonitoringJobDefinitionName
            : undefined,
        MonitoringType: output.MonitoringType !== undefined && output.MonitoringType !== null ? output.MonitoringType : undefined,
        ScheduleConfig: output.ScheduleConfig !== undefined && output.ScheduleConfig !== null
            ? deserializeAws_json1_1ScheduleConfig(output.ScheduleConfig, context)
            : undefined,
    };
};
const deserializeAws_json1_1MonitoringScheduleList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1MonitoringSchedule(entry, context);
    });
};
const deserializeAws_json1_1MonitoringScheduleSummary = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        EndpointName: output.EndpointName !== undefined && output.EndpointName !== null ? output.EndpointName : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        MonitoringJobDefinitionName: output.MonitoringJobDefinitionName !== undefined && output.MonitoringJobDefinitionName !== null
            ? output.MonitoringJobDefinitionName
            : undefined,
        MonitoringScheduleArn: output.MonitoringScheduleArn !== undefined && output.MonitoringScheduleArn !== null
            ? output.MonitoringScheduleArn
            : undefined,
        MonitoringScheduleName: output.MonitoringScheduleName !== undefined && output.MonitoringScheduleName !== null
            ? output.MonitoringScheduleName
            : undefined,
        MonitoringScheduleStatus: output.MonitoringScheduleStatus !== undefined && output.MonitoringScheduleStatus !== null
            ? output.MonitoringScheduleStatus
            : undefined,
        MonitoringType: output.MonitoringType !== undefined && output.MonitoringType !== null ? output.MonitoringType : undefined,
    };
};
const deserializeAws_json1_1MonitoringScheduleSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1MonitoringScheduleSummary(entry, context);
    });
};
const deserializeAws_json1_1MonitoringStatisticsResource = (output, context) => {
    return {
        S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
    };
};
const deserializeAws_json1_1MonitoringStoppingCondition = (output, context) => {
    return {
        MaxRuntimeInSeconds: output.MaxRuntimeInSeconds !== undefined && output.MaxRuntimeInSeconds !== null
            ? output.MaxRuntimeInSeconds
            : undefined,
    };
};
const deserializeAws_json1_1MultiModelConfig = (output, context) => {
    return {
        ModelCacheSetting: output.ModelCacheSetting !== undefined && output.ModelCacheSetting !== null
            ? output.ModelCacheSetting
            : undefined,
    };
};
const deserializeAws_json1_1NetworkConfig = (output, context) => {
    return {
        EnableInterContainerTrafficEncryption: output.EnableInterContainerTrafficEncryption !== undefined &&
            output.EnableInterContainerTrafficEncryption !== null
            ? output.EnableInterContainerTrafficEncryption
            : undefined,
        EnableNetworkIsolation: output.EnableNetworkIsolation !== undefined && output.EnableNetworkIsolation !== null
            ? output.EnableNetworkIsolation
            : undefined,
        VpcConfig: output.VpcConfig !== undefined && output.VpcConfig !== null
            ? deserializeAws_json1_1VpcConfig(output.VpcConfig, context)
            : undefined,
    };
};
const deserializeAws_json1_1NotebookInstanceAcceleratorTypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1NotebookInstanceLifecycleConfigList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1NotebookInstanceLifecycleHook(entry, context);
    });
};
const deserializeAws_json1_1NotebookInstanceLifecycleConfigSummary = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        NotebookInstanceLifecycleConfigArn: output.NotebookInstanceLifecycleConfigArn !== undefined && output.NotebookInstanceLifecycleConfigArn !== null
            ? output.NotebookInstanceLifecycleConfigArn
            : undefined,
        NotebookInstanceLifecycleConfigName: output.NotebookInstanceLifecycleConfigName !== undefined && output.NotebookInstanceLifecycleConfigName !== null
            ? output.NotebookInstanceLifecycleConfigName
            : undefined,
    };
};
const deserializeAws_json1_1NotebookInstanceLifecycleConfigSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1NotebookInstanceLifecycleConfigSummary(entry, context);
    });
};
const deserializeAws_json1_1NotebookInstanceLifecycleHook = (output, context) => {
    return {
        Content: output.Content !== undefined && output.Content !== null ? output.Content : undefined,
    };
};
const deserializeAws_json1_1NotebookInstanceSummary = (output, context) => {
    return {
        AdditionalCodeRepositories: output.AdditionalCodeRepositories !== undefined && output.AdditionalCodeRepositories !== null
            ? deserializeAws_json1_1AdditionalCodeRepositoryNamesOrUrls(output.AdditionalCodeRepositories, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        DefaultCodeRepository: output.DefaultCodeRepository !== undefined && output.DefaultCodeRepository !== null
            ? output.DefaultCodeRepository
            : undefined,
        InstanceType: output.InstanceType !== undefined && output.InstanceType !== null ? output.InstanceType : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        NotebookInstanceArn: output.NotebookInstanceArn !== undefined && output.NotebookInstanceArn !== null
            ? output.NotebookInstanceArn
            : undefined,
        NotebookInstanceLifecycleConfigName: output.NotebookInstanceLifecycleConfigName !== undefined && output.NotebookInstanceLifecycleConfigName !== null
            ? output.NotebookInstanceLifecycleConfigName
            : undefined,
        NotebookInstanceName: output.NotebookInstanceName !== undefined && output.NotebookInstanceName !== null
            ? output.NotebookInstanceName
            : undefined,
        NotebookInstanceStatus: output.NotebookInstanceStatus !== undefined && output.NotebookInstanceStatus !== null
            ? output.NotebookInstanceStatus
            : undefined,
        Url: output.Url !== undefined && output.Url !== null ? output.Url : undefined,
    };
};
const deserializeAws_json1_1NotebookInstanceSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1NotebookInstanceSummary(entry, context);
    });
};
const deserializeAws_json1_1NotificationConfiguration = (output, context) => {
    return {
        NotificationTopicArn: output.NotificationTopicArn !== undefined && output.NotificationTopicArn !== null
            ? output.NotificationTopicArn
            : undefined,
    };
};
const deserializeAws_json1_1ObjectiveStatusCounters = (output, context) => {
    return {
        Failed: output.Failed !== undefined && output.Failed !== null ? output.Failed : undefined,
        Pending: output.Pending !== undefined && output.Pending !== null ? output.Pending : undefined,
        Succeeded: output.Succeeded !== undefined && output.Succeeded !== null ? output.Succeeded : undefined,
    };
};
const deserializeAws_json1_1OfflineStoreConfig = (output, context) => {
    return {
        DataCatalogConfig: output.DataCatalogConfig !== undefined && output.DataCatalogConfig !== null
            ? deserializeAws_json1_1DataCatalogConfig(output.DataCatalogConfig, context)
            : undefined,
        DisableGlueTableCreation: output.DisableGlueTableCreation !== undefined && output.DisableGlueTableCreation !== null
            ? output.DisableGlueTableCreation
            : undefined,
        S3StorageConfig: output.S3StorageConfig !== undefined && output.S3StorageConfig !== null
            ? deserializeAws_json1_1S3StorageConfig(output.S3StorageConfig, context)
            : undefined,
    };
};
const deserializeAws_json1_1OfflineStoreStatus = (output, context) => {
    return {
        BlockedReason: output.BlockedReason !== undefined && output.BlockedReason !== null ? output.BlockedReason : undefined,
        Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
    };
};
const deserializeAws_json1_1OidcConfigForResponse = (output, context) => {
    return {
        AuthorizationEndpoint: output.AuthorizationEndpoint !== undefined && output.AuthorizationEndpoint !== null
            ? output.AuthorizationEndpoint
            : undefined,
        ClientId: output.ClientId !== undefined && output.ClientId !== null ? output.ClientId : undefined,
        Issuer: output.Issuer !== undefined && output.Issuer !== null ? output.Issuer : undefined,
        JwksUri: output.JwksUri !== undefined && output.JwksUri !== null ? output.JwksUri : undefined,
        LogoutEndpoint: output.LogoutEndpoint !== undefined && output.LogoutEndpoint !== null ? output.LogoutEndpoint : undefined,
        TokenEndpoint: output.TokenEndpoint !== undefined && output.TokenEndpoint !== null ? output.TokenEndpoint : undefined,
        UserInfoEndpoint: output.UserInfoEndpoint !== undefined && output.UserInfoEndpoint !== null ? output.UserInfoEndpoint : undefined,
    };
};
const deserializeAws_json1_1OidcMemberDefinition = (output, context) => {
    return {
        Groups: output.Groups !== undefined && output.Groups !== null
            ? deserializeAws_json1_1Groups(output.Groups, context)
            : undefined,
    };
};
const deserializeAws_json1_1OnlineStoreConfig = (output, context) => {
    return {
        EnableOnlineStore: output.EnableOnlineStore !== undefined && output.EnableOnlineStore !== null
            ? output.EnableOnlineStore
            : undefined,
        SecurityConfig: output.SecurityConfig !== undefined && output.SecurityConfig !== null
            ? deserializeAws_json1_1OnlineStoreSecurityConfig(output.SecurityConfig, context)
            : undefined,
    };
};
const deserializeAws_json1_1OnlineStoreSecurityConfig = (output, context) => {
    return {
        KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
    };
};
const deserializeAws_json1_1OutputConfig = (output, context) => {
    return {
        CompilerOptions: output.CompilerOptions !== undefined && output.CompilerOptions !== null ? output.CompilerOptions : undefined,
        KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
        S3OutputLocation: output.S3OutputLocation !== undefined && output.S3OutputLocation !== null ? output.S3OutputLocation : undefined,
        TargetDevice: output.TargetDevice !== undefined && output.TargetDevice !== null ? output.TargetDevice : undefined,
        TargetPlatform: output.TargetPlatform !== undefined && output.TargetPlatform !== null
            ? deserializeAws_json1_1TargetPlatform(output.TargetPlatform, context)
            : undefined,
    };
};
const deserializeAws_json1_1OutputDataConfig = (output, context) => {
    return {
        KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
        S3OutputPath: output.S3OutputPath !== undefined && output.S3OutputPath !== null ? output.S3OutputPath : undefined,
    };
};
const deserializeAws_json1_1Parameter = (output, context) => {
    return {
        Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,
        Value: output.Value !== undefined && output.Value !== null ? output.Value : undefined,
    };
};
const deserializeAws_json1_1ParameterList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Parameter(entry, context);
    });
};
const deserializeAws_json1_1ParameterRange = (output, context) => {
    return {
        CategoricalParameterRangeSpecification: output.CategoricalParameterRangeSpecification !== undefined &&
            output.CategoricalParameterRangeSpecification !== null
            ? deserializeAws_json1_1CategoricalParameterRangeSpecification(output.CategoricalParameterRangeSpecification, context)
            : undefined,
        ContinuousParameterRangeSpecification: output.ContinuousParameterRangeSpecification !== undefined &&
            output.ContinuousParameterRangeSpecification !== null
            ? deserializeAws_json1_1ContinuousParameterRangeSpecification(output.ContinuousParameterRangeSpecification, context)
            : undefined,
        IntegerParameterRangeSpecification: output.IntegerParameterRangeSpecification !== undefined && output.IntegerParameterRangeSpecification !== null
            ? deserializeAws_json1_1IntegerParameterRangeSpecification(output.IntegerParameterRangeSpecification, context)
            : undefined,
    };
};
const deserializeAws_json1_1ParameterRanges = (output, context) => {
    return {
        CategoricalParameterRanges: output.CategoricalParameterRanges !== undefined && output.CategoricalParameterRanges !== null
            ? deserializeAws_json1_1CategoricalParameterRanges(output.CategoricalParameterRanges, context)
            : undefined,
        ContinuousParameterRanges: output.ContinuousParameterRanges !== undefined && output.ContinuousParameterRanges !== null
            ? deserializeAws_json1_1ContinuousParameterRanges(output.ContinuousParameterRanges, context)
            : undefined,
        IntegerParameterRanges: output.IntegerParameterRanges !== undefined && output.IntegerParameterRanges !== null
            ? deserializeAws_json1_1IntegerParameterRanges(output.IntegerParameterRanges, context)
            : undefined,
    };
};
const deserializeAws_json1_1ParameterValues = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1Parent = (output, context) => {
    return {
        ExperimentName: output.ExperimentName !== undefined && output.ExperimentName !== null ? output.ExperimentName : undefined,
        TrialName: output.TrialName !== undefined && output.TrialName !== null ? output.TrialName : undefined,
    };
};
const deserializeAws_json1_1ParentHyperParameterTuningJob = (output, context) => {
    return {
        HyperParameterTuningJobName: output.HyperParameterTuningJobName !== undefined && output.HyperParameterTuningJobName !== null
            ? output.HyperParameterTuningJobName
            : undefined,
    };
};
const deserializeAws_json1_1ParentHyperParameterTuningJobs = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ParentHyperParameterTuningJob(entry, context);
    });
};
const deserializeAws_json1_1Parents = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Parent(entry, context);
    });
};
const deserializeAws_json1_1Pipeline = (output, context) => {
    return {
        CreatedBy: output.CreatedBy !== undefined && output.CreatedBy !== null
            ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        LastModifiedBy: output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
            ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        LastRunTime: output.LastRunTime !== undefined && output.LastRunTime !== null
            ? new Date(Math.round(output.LastRunTime * 1000))
            : undefined,
        PipelineArn: output.PipelineArn !== undefined && output.PipelineArn !== null ? output.PipelineArn : undefined,
        PipelineDescription: output.PipelineDescription !== undefined && output.PipelineDescription !== null
            ? output.PipelineDescription
            : undefined,
        PipelineDisplayName: output.PipelineDisplayName !== undefined && output.PipelineDisplayName !== null
            ? output.PipelineDisplayName
            : undefined,
        PipelineName: output.PipelineName !== undefined && output.PipelineName !== null ? output.PipelineName : undefined,
        PipelineStatus: output.PipelineStatus !== undefined && output.PipelineStatus !== null ? output.PipelineStatus : undefined,
        RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
        Tags: output.Tags !== undefined && output.Tags !== null
            ? deserializeAws_json1_1TagList(output.Tags, context)
            : undefined,
    };
};
const deserializeAws_json1_1PipelineExecution = (output, context) => {
    return {
        CreatedBy: output.CreatedBy !== undefined && output.CreatedBy !== null
            ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        LastModifiedBy: output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
            ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        PipelineArn: output.PipelineArn !== undefined && output.PipelineArn !== null ? output.PipelineArn : undefined,
        PipelineExecutionArn: output.PipelineExecutionArn !== undefined && output.PipelineExecutionArn !== null
            ? output.PipelineExecutionArn
            : undefined,
        PipelineExecutionDescription: output.PipelineExecutionDescription !== undefined && output.PipelineExecutionDescription !== null
            ? output.PipelineExecutionDescription
            : undefined,
        PipelineExecutionDisplayName: output.PipelineExecutionDisplayName !== undefined && output.PipelineExecutionDisplayName !== null
            ? output.PipelineExecutionDisplayName
            : undefined,
        PipelineExecutionStatus: output.PipelineExecutionStatus !== undefined && output.PipelineExecutionStatus !== null
            ? output.PipelineExecutionStatus
            : undefined,
        PipelineParameters: output.PipelineParameters !== undefined && output.PipelineParameters !== null
            ? deserializeAws_json1_1ParameterList(output.PipelineParameters, context)
            : undefined,
    };
};
const deserializeAws_json1_1PipelineExecutionStep = (output, context) => {
    return {
        CacheHitResult: output.CacheHitResult !== undefined && output.CacheHitResult !== null
            ? deserializeAws_json1_1CacheHitResult(output.CacheHitResult, context)
            : undefined,
        EndTime: output.EndTime !== undefined && output.EndTime !== null ? new Date(Math.round(output.EndTime * 1000)) : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        Metadata: output.Metadata !== undefined && output.Metadata !== null
            ? deserializeAws_json1_1PipelineExecutionStepMetadata(output.Metadata, context)
            : undefined,
        StartTime: output.StartTime !== undefined && output.StartTime !== null
            ? new Date(Math.round(output.StartTime * 1000))
            : undefined,
        StepName: output.StepName !== undefined && output.StepName !== null ? output.StepName : undefined,
        StepStatus: output.StepStatus !== undefined && output.StepStatus !== null ? output.StepStatus : undefined,
    };
};
const deserializeAws_json1_1PipelineExecutionStepList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1PipelineExecutionStep(entry, context);
    });
};
const deserializeAws_json1_1PipelineExecutionStepMetadata = (output, context) => {
    return {
        Condition: output.Condition !== undefined && output.Condition !== null
            ? deserializeAws_json1_1ConditionStepMetadata(output.Condition, context)
            : undefined,
        Model: output.Model !== undefined && output.Model !== null
            ? deserializeAws_json1_1ModelStepMetadata(output.Model, context)
            : undefined,
        ProcessingJob: output.ProcessingJob !== undefined && output.ProcessingJob !== null
            ? deserializeAws_json1_1ProcessingJobStepMetadata(output.ProcessingJob, context)
            : undefined,
        RegisterModel: output.RegisterModel !== undefined && output.RegisterModel !== null
            ? deserializeAws_json1_1RegisterModelStepMetadata(output.RegisterModel, context)
            : undefined,
        TrainingJob: output.TrainingJob !== undefined && output.TrainingJob !== null
            ? deserializeAws_json1_1TrainingJobStepMetadata(output.TrainingJob, context)
            : undefined,
        TransformJob: output.TransformJob !== undefined && output.TransformJob !== null
            ? deserializeAws_json1_1TransformJobStepMetadata(output.TransformJob, context)
            : undefined,
    };
};
const deserializeAws_json1_1PipelineExecutionSummary = (output, context) => {
    return {
        PipelineExecutionArn: output.PipelineExecutionArn !== undefined && output.PipelineExecutionArn !== null
            ? output.PipelineExecutionArn
            : undefined,
        PipelineExecutionDescription: output.PipelineExecutionDescription !== undefined && output.PipelineExecutionDescription !== null
            ? output.PipelineExecutionDescription
            : undefined,
        PipelineExecutionDisplayName: output.PipelineExecutionDisplayName !== undefined && output.PipelineExecutionDisplayName !== null
            ? output.PipelineExecutionDisplayName
            : undefined,
        PipelineExecutionStatus: output.PipelineExecutionStatus !== undefined && output.PipelineExecutionStatus !== null
            ? output.PipelineExecutionStatus
            : undefined,
        StartTime: output.StartTime !== undefined && output.StartTime !== null
            ? new Date(Math.round(output.StartTime * 1000))
            : undefined,
    };
};
const deserializeAws_json1_1PipelineExecutionSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1PipelineExecutionSummary(entry, context);
    });
};
const deserializeAws_json1_1PipelineSummary = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        LastExecutionTime: output.LastExecutionTime !== undefined && output.LastExecutionTime !== null
            ? new Date(Math.round(output.LastExecutionTime * 1000))
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        PipelineArn: output.PipelineArn !== undefined && output.PipelineArn !== null ? output.PipelineArn : undefined,
        PipelineDescription: output.PipelineDescription !== undefined && output.PipelineDescription !== null
            ? output.PipelineDescription
            : undefined,
        PipelineDisplayName: output.PipelineDisplayName !== undefined && output.PipelineDisplayName !== null
            ? output.PipelineDisplayName
            : undefined,
        PipelineName: output.PipelineName !== undefined && output.PipelineName !== null ? output.PipelineName : undefined,
        RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
    };
};
const deserializeAws_json1_1PipelineSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1PipelineSummary(entry, context);
    });
};
const deserializeAws_json1_1ProcessingClusterConfig = (output, context) => {
    return {
        InstanceCount: output.InstanceCount !== undefined && output.InstanceCount !== null ? output.InstanceCount : undefined,
        InstanceType: output.InstanceType !== undefined && output.InstanceType !== null ? output.InstanceType : undefined,
        VolumeKmsKeyId: output.VolumeKmsKeyId !== undefined && output.VolumeKmsKeyId !== null ? output.VolumeKmsKeyId : undefined,
        VolumeSizeInGB: output.VolumeSizeInGB !== undefined && output.VolumeSizeInGB !== null ? output.VolumeSizeInGB : undefined,
    };
};
const deserializeAws_json1_1ProcessingEnvironmentMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const deserializeAws_json1_1ProcessingFeatureStoreOutput = (output, context) => {
    return {
        FeatureGroupName: output.FeatureGroupName !== undefined && output.FeatureGroupName !== null ? output.FeatureGroupName : undefined,
    };
};
const deserializeAws_json1_1ProcessingInput = (output, context) => {
    return {
        AppManaged: output.AppManaged !== undefined && output.AppManaged !== null ? output.AppManaged : undefined,
        DatasetDefinition: output.DatasetDefinition !== undefined && output.DatasetDefinition !== null
            ? deserializeAws_json1_1DatasetDefinition(output.DatasetDefinition, context)
            : undefined,
        InputName: output.InputName !== undefined && output.InputName !== null ? output.InputName : undefined,
        S3Input: output.S3Input !== undefined && output.S3Input !== null
            ? deserializeAws_json1_1ProcessingS3Input(output.S3Input, context)
            : undefined,
    };
};
const deserializeAws_json1_1ProcessingInputs = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ProcessingInput(entry, context);
    });
};
const deserializeAws_json1_1ProcessingJob = (output, context) => {
    return {
        AppSpecification: output.AppSpecification !== undefined && output.AppSpecification !== null
            ? deserializeAws_json1_1AppSpecification(output.AppSpecification, context)
            : undefined,
        AutoMLJobArn: output.AutoMLJobArn !== undefined && output.AutoMLJobArn !== null ? output.AutoMLJobArn : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        Environment: output.Environment !== undefined && output.Environment !== null
            ? deserializeAws_json1_1ProcessingEnvironmentMap(output.Environment, context)
            : undefined,
        ExitMessage: output.ExitMessage !== undefined && output.ExitMessage !== null ? output.ExitMessage : undefined,
        ExperimentConfig: output.ExperimentConfig !== undefined && output.ExperimentConfig !== null
            ? deserializeAws_json1_1ExperimentConfig(output.ExperimentConfig, context)
            : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        MonitoringScheduleArn: output.MonitoringScheduleArn !== undefined && output.MonitoringScheduleArn !== null
            ? output.MonitoringScheduleArn
            : undefined,
        NetworkConfig: output.NetworkConfig !== undefined && output.NetworkConfig !== null
            ? deserializeAws_json1_1NetworkConfig(output.NetworkConfig, context)
            : undefined,
        ProcessingEndTime: output.ProcessingEndTime !== undefined && output.ProcessingEndTime !== null
            ? new Date(Math.round(output.ProcessingEndTime * 1000))
            : undefined,
        ProcessingInputs: output.ProcessingInputs !== undefined && output.ProcessingInputs !== null
            ? deserializeAws_json1_1ProcessingInputs(output.ProcessingInputs, context)
            : undefined,
        ProcessingJobArn: output.ProcessingJobArn !== undefined && output.ProcessingJobArn !== null ? output.ProcessingJobArn : undefined,
        ProcessingJobName: output.ProcessingJobName !== undefined && output.ProcessingJobName !== null
            ? output.ProcessingJobName
            : undefined,
        ProcessingJobStatus: output.ProcessingJobStatus !== undefined && output.ProcessingJobStatus !== null
            ? output.ProcessingJobStatus
            : undefined,
        ProcessingOutputConfig: output.ProcessingOutputConfig !== undefined && output.ProcessingOutputConfig !== null
            ? deserializeAws_json1_1ProcessingOutputConfig(output.ProcessingOutputConfig, context)
            : undefined,
        ProcessingResources: output.ProcessingResources !== undefined && output.ProcessingResources !== null
            ? deserializeAws_json1_1ProcessingResources(output.ProcessingResources, context)
            : undefined,
        ProcessingStartTime: output.ProcessingStartTime !== undefined && output.ProcessingStartTime !== null
            ? new Date(Math.round(output.ProcessingStartTime * 1000))
            : undefined,
        RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
        StoppingCondition: output.StoppingCondition !== undefined && output.StoppingCondition !== null
            ? deserializeAws_json1_1ProcessingStoppingCondition(output.StoppingCondition, context)
            : undefined,
        Tags: output.Tags !== undefined && output.Tags !== null
            ? deserializeAws_json1_1TagList(output.Tags, context)
            : undefined,
        TrainingJobArn: output.TrainingJobArn !== undefined && output.TrainingJobArn !== null ? output.TrainingJobArn : undefined,
    };
};
const deserializeAws_json1_1ProcessingJobStepMetadata = (output, context) => {
    return {
        Arn: output.Arn !== undefined && output.Arn !== null ? output.Arn : undefined,
    };
};
const deserializeAws_json1_1ProcessingJobSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ProcessingJobSummary(entry, context);
    });
};
const deserializeAws_json1_1ProcessingJobSummary = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        ExitMessage: output.ExitMessage !== undefined && output.ExitMessage !== null ? output.ExitMessage : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        ProcessingEndTime: output.ProcessingEndTime !== undefined && output.ProcessingEndTime !== null
            ? new Date(Math.round(output.ProcessingEndTime * 1000))
            : undefined,
        ProcessingJobArn: output.ProcessingJobArn !== undefined && output.ProcessingJobArn !== null ? output.ProcessingJobArn : undefined,
        ProcessingJobName: output.ProcessingJobName !== undefined && output.ProcessingJobName !== null
            ? output.ProcessingJobName
            : undefined,
        ProcessingJobStatus: output.ProcessingJobStatus !== undefined && output.ProcessingJobStatus !== null
            ? output.ProcessingJobStatus
            : undefined,
    };
};
const deserializeAws_json1_1ProcessingOutput = (output, context) => {
    return {
        AppManaged: output.AppManaged !== undefined && output.AppManaged !== null ? output.AppManaged : undefined,
        FeatureStoreOutput: output.FeatureStoreOutput !== undefined && output.FeatureStoreOutput !== null
            ? deserializeAws_json1_1ProcessingFeatureStoreOutput(output.FeatureStoreOutput, context)
            : undefined,
        OutputName: output.OutputName !== undefined && output.OutputName !== null ? output.OutputName : undefined,
        S3Output: output.S3Output !== undefined && output.S3Output !== null
            ? deserializeAws_json1_1ProcessingS3Output(output.S3Output, context)
            : undefined,
    };
};
const deserializeAws_json1_1ProcessingOutputConfig = (output, context) => {
    return {
        KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
        Outputs: output.Outputs !== undefined && output.Outputs !== null
            ? deserializeAws_json1_1ProcessingOutputs(output.Outputs, context)
            : undefined,
    };
};
const deserializeAws_json1_1ProcessingOutputs = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ProcessingOutput(entry, context);
    });
};
const deserializeAws_json1_1ProcessingResources = (output, context) => {
    return {
        ClusterConfig: output.ClusterConfig !== undefined && output.ClusterConfig !== null
            ? deserializeAws_json1_1ProcessingClusterConfig(output.ClusterConfig, context)
            : undefined,
    };
};
const deserializeAws_json1_1ProcessingS3Input = (output, context) => {
    return {
        LocalPath: output.LocalPath !== undefined && output.LocalPath !== null ? output.LocalPath : undefined,
        S3CompressionType: output.S3CompressionType !== undefined && output.S3CompressionType !== null
            ? output.S3CompressionType
            : undefined,
        S3DataDistributionType: output.S3DataDistributionType !== undefined && output.S3DataDistributionType !== null
            ? output.S3DataDistributionType
            : undefined,
        S3DataType: output.S3DataType !== undefined && output.S3DataType !== null ? output.S3DataType : undefined,
        S3InputMode: output.S3InputMode !== undefined && output.S3InputMode !== null ? output.S3InputMode : undefined,
        S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
    };
};
const deserializeAws_json1_1ProcessingS3Output = (output, context) => {
    return {
        LocalPath: output.LocalPath !== undefined && output.LocalPath !== null ? output.LocalPath : undefined,
        S3UploadMode: output.S3UploadMode !== undefined && output.S3UploadMode !== null ? output.S3UploadMode : undefined,
        S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
    };
};
const deserializeAws_json1_1ProcessingStoppingCondition = (output, context) => {
    return {
        MaxRuntimeInSeconds: output.MaxRuntimeInSeconds !== undefined && output.MaxRuntimeInSeconds !== null
            ? output.MaxRuntimeInSeconds
            : undefined,
    };
};
const deserializeAws_json1_1ProductionVariant = (output, context) => {
    return {
        AcceleratorType: output.AcceleratorType !== undefined && output.AcceleratorType !== null ? output.AcceleratorType : undefined,
        CoreDumpConfig: output.CoreDumpConfig !== undefined && output.CoreDumpConfig !== null
            ? deserializeAws_json1_1ProductionVariantCoreDumpConfig(output.CoreDumpConfig, context)
            : undefined,
        InitialInstanceCount: output.InitialInstanceCount !== undefined && output.InitialInstanceCount !== null
            ? output.InitialInstanceCount
            : undefined,
        InitialVariantWeight: output.InitialVariantWeight !== undefined && output.InitialVariantWeight !== null
            ? output.InitialVariantWeight
            : undefined,
        InstanceType: output.InstanceType !== undefined && output.InstanceType !== null ? output.InstanceType : undefined,
        ModelName: output.ModelName !== undefined && output.ModelName !== null ? output.ModelName : undefined,
        VariantName: output.VariantName !== undefined && output.VariantName !== null ? output.VariantName : undefined,
    };
};
const deserializeAws_json1_1ProductionVariantCoreDumpConfig = (output, context) => {
    return {
        DestinationS3Uri: output.DestinationS3Uri !== undefined && output.DestinationS3Uri !== null ? output.DestinationS3Uri : undefined,
        KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
    };
};
const deserializeAws_json1_1ProductionVariantList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ProductionVariant(entry, context);
    });
};
const deserializeAws_json1_1ProductionVariantSummary = (output, context) => {
    return {
        CurrentInstanceCount: output.CurrentInstanceCount !== undefined && output.CurrentInstanceCount !== null
            ? output.CurrentInstanceCount
            : undefined,
        CurrentWeight: output.CurrentWeight !== undefined && output.CurrentWeight !== null ? output.CurrentWeight : undefined,
        DeployedImages: output.DeployedImages !== undefined && output.DeployedImages !== null
            ? deserializeAws_json1_1DeployedImages(output.DeployedImages, context)
            : undefined,
        DesiredInstanceCount: output.DesiredInstanceCount !== undefined && output.DesiredInstanceCount !== null
            ? output.DesiredInstanceCount
            : undefined,
        DesiredWeight: output.DesiredWeight !== undefined && output.DesiredWeight !== null ? output.DesiredWeight : undefined,
        VariantName: output.VariantName !== undefined && output.VariantName !== null ? output.VariantName : undefined,
    };
};
const deserializeAws_json1_1ProductionVariantSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ProductionVariantSummary(entry, context);
    });
};
const deserializeAws_json1_1ProductListings = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1ProfilerConfig = (output, context) => {
    return {
        ProfilingIntervalInMilliseconds: output.ProfilingIntervalInMilliseconds !== undefined && output.ProfilingIntervalInMilliseconds !== null
            ? output.ProfilingIntervalInMilliseconds
            : undefined,
        ProfilingParameters: output.ProfilingParameters !== undefined && output.ProfilingParameters !== null
            ? deserializeAws_json1_1ProfilingParameters(output.ProfilingParameters, context)
            : undefined,
        S3OutputPath: output.S3OutputPath !== undefined && output.S3OutputPath !== null ? output.S3OutputPath : undefined,
    };
};
const deserializeAws_json1_1ProfilerRuleConfiguration = (output, context) => {
    return {
        InstanceType: output.InstanceType !== undefined && output.InstanceType !== null ? output.InstanceType : undefined,
        LocalPath: output.LocalPath !== undefined && output.LocalPath !== null ? output.LocalPath : undefined,
        RuleConfigurationName: output.RuleConfigurationName !== undefined && output.RuleConfigurationName !== null
            ? output.RuleConfigurationName
            : undefined,
        RuleEvaluatorImage: output.RuleEvaluatorImage !== undefined && output.RuleEvaluatorImage !== null
            ? output.RuleEvaluatorImage
            : undefined,
        RuleParameters: output.RuleParameters !== undefined && output.RuleParameters !== null
            ? deserializeAws_json1_1RuleParameters(output.RuleParameters, context)
            : undefined,
        S3OutputPath: output.S3OutputPath !== undefined && output.S3OutputPath !== null ? output.S3OutputPath : undefined,
        VolumeSizeInGB: output.VolumeSizeInGB !== undefined && output.VolumeSizeInGB !== null ? output.VolumeSizeInGB : undefined,
    };
};
const deserializeAws_json1_1ProfilerRuleConfigurations = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ProfilerRuleConfiguration(entry, context);
    });
};
const deserializeAws_json1_1ProfilerRuleEvaluationStatus = (output, context) => {
    return {
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        RuleConfigurationName: output.RuleConfigurationName !== undefined && output.RuleConfigurationName !== null
            ? output.RuleConfigurationName
            : undefined,
        RuleEvaluationJobArn: output.RuleEvaluationJobArn !== undefined && output.RuleEvaluationJobArn !== null
            ? output.RuleEvaluationJobArn
            : undefined,
        RuleEvaluationStatus: output.RuleEvaluationStatus !== undefined && output.RuleEvaluationStatus !== null
            ? output.RuleEvaluationStatus
            : undefined,
        StatusDetails: output.StatusDetails !== undefined && output.StatusDetails !== null ? output.StatusDetails : undefined,
    };
};
const deserializeAws_json1_1ProfilerRuleEvaluationStatuses = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ProfilerRuleEvaluationStatus(entry, context);
    });
};
const deserializeAws_json1_1ProfilingParameters = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const deserializeAws_json1_1ProjectSummary = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        ProjectArn: output.ProjectArn !== undefined && output.ProjectArn !== null ? output.ProjectArn : undefined,
        ProjectDescription: output.ProjectDescription !== undefined && output.ProjectDescription !== null
            ? output.ProjectDescription
            : undefined,
        ProjectId: output.ProjectId !== undefined && output.ProjectId !== null ? output.ProjectId : undefined,
        ProjectName: output.ProjectName !== undefined && output.ProjectName !== null ? output.ProjectName : undefined,
        ProjectStatus: output.ProjectStatus !== undefined && output.ProjectStatus !== null ? output.ProjectStatus : undefined,
    };
};
const deserializeAws_json1_1ProjectSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ProjectSummary(entry, context);
    });
};
const deserializeAws_json1_1PropertyNameSuggestion = (output, context) => {
    return {
        PropertyName: output.PropertyName !== undefined && output.PropertyName !== null ? output.PropertyName : undefined,
    };
};
const deserializeAws_json1_1PropertyNameSuggestionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1PropertyNameSuggestion(entry, context);
    });
};
const deserializeAws_json1_1ProvisioningParameter = (output, context) => {
    return {
        Key: output.Key !== undefined && output.Key !== null ? output.Key : undefined,
        Value: output.Value !== undefined && output.Value !== null ? output.Value : undefined,
    };
};
const deserializeAws_json1_1ProvisioningParameters = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ProvisioningParameter(entry, context);
    });
};
const deserializeAws_json1_1PublicWorkforceTaskPrice = (output, context) => {
    return {
        AmountInUsd: output.AmountInUsd !== undefined && output.AmountInUsd !== null
            ? deserializeAws_json1_1USD(output.AmountInUsd, context)
            : undefined,
    };
};
const deserializeAws_json1_1PutModelPackageGroupPolicyOutput = (output, context) => {
    return {
        ModelPackageGroupArn: output.ModelPackageGroupArn !== undefined && output.ModelPackageGroupArn !== null
            ? output.ModelPackageGroupArn
            : undefined,
    };
};
const deserializeAws_json1_1RealtimeInferenceInstanceTypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1RedshiftDatasetDefinition = (output, context) => {
    return {
        ClusterId: output.ClusterId !== undefined && output.ClusterId !== null ? output.ClusterId : undefined,
        ClusterRoleArn: output.ClusterRoleArn !== undefined && output.ClusterRoleArn !== null ? output.ClusterRoleArn : undefined,
        Database: output.Database !== undefined && output.Database !== null ? output.Database : undefined,
        DbUser: output.DbUser !== undefined && output.DbUser !== null ? output.DbUser : undefined,
        KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
        OutputCompression: output.OutputCompression !== undefined && output.OutputCompression !== null
            ? output.OutputCompression
            : undefined,
        OutputFormat: output.OutputFormat !== undefined && output.OutputFormat !== null ? output.OutputFormat : undefined,
        OutputS3Uri: output.OutputS3Uri !== undefined && output.OutputS3Uri !== null ? output.OutputS3Uri : undefined,
        QueryString: output.QueryString !== undefined && output.QueryString !== null ? output.QueryString : undefined,
    };
};
const deserializeAws_json1_1RegisterModelStepMetadata = (output, context) => {
    return {
        Arn: output.Arn !== undefined && output.Arn !== null ? output.Arn : undefined,
    };
};
const deserializeAws_json1_1RenderingError = (output, context) => {
    return {
        Code: output.Code !== undefined && output.Code !== null ? output.Code : undefined,
        Message: output.Message !== undefined && output.Message !== null ? output.Message : undefined,
    };
};
const deserializeAws_json1_1RenderingErrorList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RenderingError(entry, context);
    });
};
const deserializeAws_json1_1RenderUiTemplateResponse = (output, context) => {
    return {
        Errors: output.Errors !== undefined && output.Errors !== null
            ? deserializeAws_json1_1RenderingErrorList(output.Errors, context)
            : undefined,
        RenderedContent: output.RenderedContent !== undefined && output.RenderedContent !== null ? output.RenderedContent : undefined,
    };
};
const deserializeAws_json1_1RepositoryAuthConfig = (output, context) => {
    return {
        RepositoryCredentialsProviderArn: output.RepositoryCredentialsProviderArn !== undefined && output.RepositoryCredentialsProviderArn !== null
            ? output.RepositoryCredentialsProviderArn
            : undefined,
    };
};
const deserializeAws_json1_1ResolvedAttributes = (output, context) => {
    return {
        AutoMLJobObjective: output.AutoMLJobObjective !== undefined && output.AutoMLJobObjective !== null
            ? deserializeAws_json1_1AutoMLJobObjective(output.AutoMLJobObjective, context)
            : undefined,
        CompletionCriteria: output.CompletionCriteria !== undefined && output.CompletionCriteria !== null
            ? deserializeAws_json1_1AutoMLJobCompletionCriteria(output.CompletionCriteria, context)
            : undefined,
        ProblemType: output.ProblemType !== undefined && output.ProblemType !== null ? output.ProblemType : undefined,
    };
};
const deserializeAws_json1_1ResourceConfig = (output, context) => {
    return {
        InstanceCount: output.InstanceCount !== undefined && output.InstanceCount !== null ? output.InstanceCount : undefined,
        InstanceType: output.InstanceType !== undefined && output.InstanceType !== null ? output.InstanceType : undefined,
        VolumeKmsKeyId: output.VolumeKmsKeyId !== undefined && output.VolumeKmsKeyId !== null ? output.VolumeKmsKeyId : undefined,
        VolumeSizeInGB: output.VolumeSizeInGB !== undefined && output.VolumeSizeInGB !== null ? output.VolumeSizeInGB : undefined,
    };
};
const deserializeAws_json1_1ResourceInUse = (output, context) => {
    return {
        Message: output.Message !== undefined && output.Message !== null ? output.Message : undefined,
    };
};
const deserializeAws_json1_1ResourceLimitExceeded = (output, context) => {
    return {
        Message: output.Message !== undefined && output.Message !== null ? output.Message : undefined,
    };
};
const deserializeAws_json1_1ResourceLimits = (output, context) => {
    return {
        MaxNumberOfTrainingJobs: output.MaxNumberOfTrainingJobs !== undefined && output.MaxNumberOfTrainingJobs !== null
            ? output.MaxNumberOfTrainingJobs
            : undefined,
        MaxParallelTrainingJobs: output.MaxParallelTrainingJobs !== undefined && output.MaxParallelTrainingJobs !== null
            ? output.MaxParallelTrainingJobs
            : undefined,
    };
};
const deserializeAws_json1_1ResourceNotFound = (output, context) => {
    return {
        Message: output.Message !== undefined && output.Message !== null ? output.Message : undefined,
    };
};
const deserializeAws_json1_1ResourceSpec = (output, context) => {
    return {
        InstanceType: output.InstanceType !== undefined && output.InstanceType !== null ? output.InstanceType : undefined,
        SageMakerImageArn: output.SageMakerImageArn !== undefined && output.SageMakerImageArn !== null
            ? output.SageMakerImageArn
            : undefined,
        SageMakerImageVersionArn: output.SageMakerImageVersionArn !== undefined && output.SageMakerImageVersionArn !== null
            ? output.SageMakerImageVersionArn
            : undefined,
    };
};
const deserializeAws_json1_1ResponseMIMETypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1RetryStrategy = (output, context) => {
    return {
        MaximumRetryAttempts: output.MaximumRetryAttempts !== undefined && output.MaximumRetryAttempts !== null
            ? output.MaximumRetryAttempts
            : undefined,
    };
};
const deserializeAws_json1_1RuleParameters = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const deserializeAws_json1_1S3DataSource = (output, context) => {
    return {
        AttributeNames: output.AttributeNames !== undefined && output.AttributeNames !== null
            ? deserializeAws_json1_1AttributeNames(output.AttributeNames, context)
            : undefined,
        S3DataDistributionType: output.S3DataDistributionType !== undefined && output.S3DataDistributionType !== null
            ? output.S3DataDistributionType
            : undefined,
        S3DataType: output.S3DataType !== undefined && output.S3DataType !== null ? output.S3DataType : undefined,
        S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
    };
};
const deserializeAws_json1_1S3StorageConfig = (output, context) => {
    return {
        KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
        ResolvedOutputS3Uri: output.ResolvedOutputS3Uri !== undefined && output.ResolvedOutputS3Uri !== null
            ? output.ResolvedOutputS3Uri
            : undefined,
        S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
    };
};
const deserializeAws_json1_1ScheduleConfig = (output, context) => {
    return {
        ScheduleExpression: output.ScheduleExpression !== undefined && output.ScheduleExpression !== null
            ? output.ScheduleExpression
            : undefined,
    };
};
const deserializeAws_json1_1SearchRecord = (output, context) => {
    return {
        Endpoint: output.Endpoint !== undefined && output.Endpoint !== null
            ? deserializeAws_json1_1Endpoint(output.Endpoint, context)
            : undefined,
        Experiment: output.Experiment !== undefined && output.Experiment !== null
            ? deserializeAws_json1_1Experiment(output.Experiment, context)
            : undefined,
        FeatureGroup: output.FeatureGroup !== undefined && output.FeatureGroup !== null
            ? deserializeAws_json1_1FeatureGroup(output.FeatureGroup, context)
            : undefined,
        ModelPackage: output.ModelPackage !== undefined && output.ModelPackage !== null
            ? deserializeAws_json1_1ModelPackage(output.ModelPackage, context)
            : undefined,
        ModelPackageGroup: output.ModelPackageGroup !== undefined && output.ModelPackageGroup !== null
            ? deserializeAws_json1_1ModelPackageGroup(output.ModelPackageGroup, context)
            : undefined,
        Pipeline: output.Pipeline !== undefined && output.Pipeline !== null
            ? deserializeAws_json1_1Pipeline(output.Pipeline, context)
            : undefined,
        PipelineExecution: output.PipelineExecution !== undefined && output.PipelineExecution !== null
            ? deserializeAws_json1_1PipelineExecution(output.PipelineExecution, context)
            : undefined,
        TrainingJob: output.TrainingJob !== undefined && output.TrainingJob !== null
            ? deserializeAws_json1_1TrainingJob(output.TrainingJob, context)
            : undefined,
        Trial: output.Trial !== undefined && output.Trial !== null
            ? deserializeAws_json1_1Trial(output.Trial, context)
            : undefined,
        TrialComponent: output.TrialComponent !== undefined && output.TrialComponent !== null
            ? deserializeAws_json1_1TrialComponent(output.TrialComponent, context)
            : undefined,
    };
};
const deserializeAws_json1_1SearchResponse = (output, context) => {
    return {
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
        Results: output.Results !== undefined && output.Results !== null
            ? deserializeAws_json1_1SearchResultsList(output.Results, context)
            : undefined,
    };
};
const deserializeAws_json1_1SearchResultsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SearchRecord(entry, context);
    });
};
const deserializeAws_json1_1SecondaryStatusTransition = (output, context) => {
    return {
        EndTime: output.EndTime !== undefined && output.EndTime !== null ? new Date(Math.round(output.EndTime * 1000)) : undefined,
        StartTime: output.StartTime !== undefined && output.StartTime !== null
            ? new Date(Math.round(output.StartTime * 1000))
            : undefined,
        Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
        StatusMessage: output.StatusMessage !== undefined && output.StatusMessage !== null ? output.StatusMessage : undefined,
    };
};
const deserializeAws_json1_1SecondaryStatusTransitions = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SecondaryStatusTransition(entry, context);
    });
};
const deserializeAws_json1_1SecurityGroupIds = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1ServiceCatalogProvisionedProductDetails = (output, context) => {
    return {
        ProvisionedProductId: output.ProvisionedProductId !== undefined && output.ProvisionedProductId !== null
            ? output.ProvisionedProductId
            : undefined,
        ProvisionedProductStatusMessage: output.ProvisionedProductStatusMessage !== undefined && output.ProvisionedProductStatusMessage !== null
            ? output.ProvisionedProductStatusMessage
            : undefined,
    };
};
const deserializeAws_json1_1ServiceCatalogProvisioningDetails = (output, context) => {
    return {
        PathId: output.PathId !== undefined && output.PathId !== null ? output.PathId : undefined,
        ProductId: output.ProductId !== undefined && output.ProductId !== null ? output.ProductId : undefined,
        ProvisioningArtifactId: output.ProvisioningArtifactId !== undefined && output.ProvisioningArtifactId !== null
            ? output.ProvisioningArtifactId
            : undefined,
        ProvisioningParameters: output.ProvisioningParameters !== undefined && output.ProvisioningParameters !== null
            ? deserializeAws_json1_1ProvisioningParameters(output.ProvisioningParameters, context)
            : undefined,
    };
};
const deserializeAws_json1_1SharingSettings = (output, context) => {
    return {
        NotebookOutputOption: output.NotebookOutputOption !== undefined && output.NotebookOutputOption !== null
            ? output.NotebookOutputOption
            : undefined,
        S3KmsKeyId: output.S3KmsKeyId !== undefined && output.S3KmsKeyId !== null ? output.S3KmsKeyId : undefined,
        S3OutputPath: output.S3OutputPath !== undefined && output.S3OutputPath !== null ? output.S3OutputPath : undefined,
    };
};
const deserializeAws_json1_1ShuffleConfig = (output, context) => {
    return {
        Seed: output.Seed !== undefined && output.Seed !== null ? output.Seed : undefined,
    };
};
const deserializeAws_json1_1SourceAlgorithm = (output, context) => {
    return {
        AlgorithmName: output.AlgorithmName !== undefined && output.AlgorithmName !== null ? output.AlgorithmName : undefined,
        ModelDataUrl: output.ModelDataUrl !== undefined && output.ModelDataUrl !== null ? output.ModelDataUrl : undefined,
    };
};
const deserializeAws_json1_1SourceAlgorithmList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SourceAlgorithm(entry, context);
    });
};
const deserializeAws_json1_1SourceAlgorithmSpecification = (output, context) => {
    return {
        SourceAlgorithms: output.SourceAlgorithms !== undefined && output.SourceAlgorithms !== null
            ? deserializeAws_json1_1SourceAlgorithmList(output.SourceAlgorithms, context)
            : undefined,
    };
};
const deserializeAws_json1_1SourceIpConfig = (output, context) => {
    return {
        Cidrs: output.Cidrs !== undefined && output.Cidrs !== null
            ? deserializeAws_json1_1Cidrs(output.Cidrs, context)
            : undefined,
    };
};
const deserializeAws_json1_1StartPipelineExecutionResponse = (output, context) => {
    return {
        PipelineExecutionArn: output.PipelineExecutionArn !== undefined && output.PipelineExecutionArn !== null
            ? output.PipelineExecutionArn
            : undefined,
    };
};
const deserializeAws_json1_1StoppingCondition = (output, context) => {
    return {
        MaxRuntimeInSeconds: output.MaxRuntimeInSeconds !== undefined && output.MaxRuntimeInSeconds !== null
            ? output.MaxRuntimeInSeconds
            : undefined,
        MaxWaitTimeInSeconds: output.MaxWaitTimeInSeconds !== undefined && output.MaxWaitTimeInSeconds !== null
            ? output.MaxWaitTimeInSeconds
            : undefined,
    };
};
const deserializeAws_json1_1StopPipelineExecutionResponse = (output, context) => {
    return {
        PipelineExecutionArn: output.PipelineExecutionArn !== undefined && output.PipelineExecutionArn !== null
            ? output.PipelineExecutionArn
            : undefined,
    };
};
const deserializeAws_json1_1Subnets = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1SubscribedWorkteam = (output, context) => {
    return {
        ListingId: output.ListingId !== undefined && output.ListingId !== null ? output.ListingId : undefined,
        MarketplaceDescription: output.MarketplaceDescription !== undefined && output.MarketplaceDescription !== null
            ? output.MarketplaceDescription
            : undefined,
        MarketplaceTitle: output.MarketplaceTitle !== undefined && output.MarketplaceTitle !== null ? output.MarketplaceTitle : undefined,
        SellerName: output.SellerName !== undefined && output.SellerName !== null ? output.SellerName : undefined,
        WorkteamArn: output.WorkteamArn !== undefined && output.WorkteamArn !== null ? output.WorkteamArn : undefined,
    };
};
const deserializeAws_json1_1SubscribedWorkteams = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SubscribedWorkteam(entry, context);
    });
};
const deserializeAws_json1_1Tag = (output, context) => {
    return {
        Key: output.Key !== undefined && output.Key !== null ? output.Key : undefined,
        Value: output.Value !== undefined && output.Value !== null ? output.Value : undefined,
    };
};
const deserializeAws_json1_1TagList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Tag(entry, context);
    });
};
const deserializeAws_json1_1TargetPlatform = (output, context) => {
    return {
        Accelerator: output.Accelerator !== undefined && output.Accelerator !== null ? output.Accelerator : undefined,
        Arch: output.Arch !== undefined && output.Arch !== null ? output.Arch : undefined,
        Os: output.Os !== undefined && output.Os !== null ? output.Os : undefined,
    };
};
const deserializeAws_json1_1TaskKeywords = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1TensorBoardAppSettings = (output, context) => {
    return {
        DefaultResourceSpec: output.DefaultResourceSpec !== undefined && output.DefaultResourceSpec !== null
            ? deserializeAws_json1_1ResourceSpec(output.DefaultResourceSpec, context)
            : undefined,
    };
};
const deserializeAws_json1_1TensorBoardOutputConfig = (output, context) => {
    return {
        LocalPath: output.LocalPath !== undefined && output.LocalPath !== null ? output.LocalPath : undefined,
        S3OutputPath: output.S3OutputPath !== undefined && output.S3OutputPath !== null ? output.S3OutputPath : undefined,
    };
};
const deserializeAws_json1_1TrafficRoutingConfig = (output, context) => {
    return {
        CanarySize: output.CanarySize !== undefined && output.CanarySize !== null
            ? deserializeAws_json1_1CapacitySize(output.CanarySize, context)
            : undefined,
        Type: output.Type !== undefined && output.Type !== null ? output.Type : undefined,
        WaitIntervalInSeconds: output.WaitIntervalInSeconds !== undefined && output.WaitIntervalInSeconds !== null
            ? output.WaitIntervalInSeconds
            : undefined,
    };
};
const deserializeAws_json1_1TrainingEnvironmentMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const deserializeAws_json1_1TrainingInstanceTypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1TrainingJob = (output, context) => {
    return {
        AlgorithmSpecification: output.AlgorithmSpecification !== undefined && output.AlgorithmSpecification !== null
            ? deserializeAws_json1_1AlgorithmSpecification(output.AlgorithmSpecification, context)
            : undefined,
        AutoMLJobArn: output.AutoMLJobArn !== undefined && output.AutoMLJobArn !== null ? output.AutoMLJobArn : undefined,
        BillableTimeInSeconds: output.BillableTimeInSeconds !== undefined && output.BillableTimeInSeconds !== null
            ? output.BillableTimeInSeconds
            : undefined,
        CheckpointConfig: output.CheckpointConfig !== undefined && output.CheckpointConfig !== null
            ? deserializeAws_json1_1CheckpointConfig(output.CheckpointConfig, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        DebugHookConfig: output.DebugHookConfig !== undefined && output.DebugHookConfig !== null
            ? deserializeAws_json1_1DebugHookConfig(output.DebugHookConfig, context)
            : undefined,
        DebugRuleConfigurations: output.DebugRuleConfigurations !== undefined && output.DebugRuleConfigurations !== null
            ? deserializeAws_json1_1DebugRuleConfigurations(output.DebugRuleConfigurations, context)
            : undefined,
        DebugRuleEvaluationStatuses: output.DebugRuleEvaluationStatuses !== undefined && output.DebugRuleEvaluationStatuses !== null
            ? deserializeAws_json1_1DebugRuleEvaluationStatuses(output.DebugRuleEvaluationStatuses, context)
            : undefined,
        EnableInterContainerTrafficEncryption: output.EnableInterContainerTrafficEncryption !== undefined &&
            output.EnableInterContainerTrafficEncryption !== null
            ? output.EnableInterContainerTrafficEncryption
            : undefined,
        EnableManagedSpotTraining: output.EnableManagedSpotTraining !== undefined && output.EnableManagedSpotTraining !== null
            ? output.EnableManagedSpotTraining
            : undefined,
        EnableNetworkIsolation: output.EnableNetworkIsolation !== undefined && output.EnableNetworkIsolation !== null
            ? output.EnableNetworkIsolation
            : undefined,
        Environment: output.Environment !== undefined && output.Environment !== null
            ? deserializeAws_json1_1TrainingEnvironmentMap(output.Environment, context)
            : undefined,
        ExperimentConfig: output.ExperimentConfig !== undefined && output.ExperimentConfig !== null
            ? deserializeAws_json1_1ExperimentConfig(output.ExperimentConfig, context)
            : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        FinalMetricDataList: output.FinalMetricDataList !== undefined && output.FinalMetricDataList !== null
            ? deserializeAws_json1_1FinalMetricDataList(output.FinalMetricDataList, context)
            : undefined,
        HyperParameters: output.HyperParameters !== undefined && output.HyperParameters !== null
            ? deserializeAws_json1_1HyperParameters(output.HyperParameters, context)
            : undefined,
        InputDataConfig: output.InputDataConfig !== undefined && output.InputDataConfig !== null
            ? deserializeAws_json1_1InputDataConfig(output.InputDataConfig, context)
            : undefined,
        LabelingJobArn: output.LabelingJobArn !== undefined && output.LabelingJobArn !== null ? output.LabelingJobArn : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        ModelArtifacts: output.ModelArtifacts !== undefined && output.ModelArtifacts !== null
            ? deserializeAws_json1_1ModelArtifacts(output.ModelArtifacts, context)
            : undefined,
        OutputDataConfig: output.OutputDataConfig !== undefined && output.OutputDataConfig !== null
            ? deserializeAws_json1_1OutputDataConfig(output.OutputDataConfig, context)
            : undefined,
        ResourceConfig: output.ResourceConfig !== undefined && output.ResourceConfig !== null
            ? deserializeAws_json1_1ResourceConfig(output.ResourceConfig, context)
            : undefined,
        RetryStrategy: output.RetryStrategy !== undefined && output.RetryStrategy !== null
            ? deserializeAws_json1_1RetryStrategy(output.RetryStrategy, context)
            : undefined,
        RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
        SecondaryStatus: output.SecondaryStatus !== undefined && output.SecondaryStatus !== null ? output.SecondaryStatus : undefined,
        SecondaryStatusTransitions: output.SecondaryStatusTransitions !== undefined && output.SecondaryStatusTransitions !== null
            ? deserializeAws_json1_1SecondaryStatusTransitions(output.SecondaryStatusTransitions, context)
            : undefined,
        StoppingCondition: output.StoppingCondition !== undefined && output.StoppingCondition !== null
            ? deserializeAws_json1_1StoppingCondition(output.StoppingCondition, context)
            : undefined,
        Tags: output.Tags !== undefined && output.Tags !== null
            ? deserializeAws_json1_1TagList(output.Tags, context)
            : undefined,
        TensorBoardOutputConfig: output.TensorBoardOutputConfig !== undefined && output.TensorBoardOutputConfig !== null
            ? deserializeAws_json1_1TensorBoardOutputConfig(output.TensorBoardOutputConfig, context)
            : undefined,
        TrainingEndTime: output.TrainingEndTime !== undefined && output.TrainingEndTime !== null
            ? new Date(Math.round(output.TrainingEndTime * 1000))
            : undefined,
        TrainingJobArn: output.TrainingJobArn !== undefined && output.TrainingJobArn !== null ? output.TrainingJobArn : undefined,
        TrainingJobName: output.TrainingJobName !== undefined && output.TrainingJobName !== null ? output.TrainingJobName : undefined,
        TrainingJobStatus: output.TrainingJobStatus !== undefined && output.TrainingJobStatus !== null
            ? output.TrainingJobStatus
            : undefined,
        TrainingStartTime: output.TrainingStartTime !== undefined && output.TrainingStartTime !== null
            ? new Date(Math.round(output.TrainingStartTime * 1000))
            : undefined,
        TrainingTimeInSeconds: output.TrainingTimeInSeconds !== undefined && output.TrainingTimeInSeconds !== null
            ? output.TrainingTimeInSeconds
            : undefined,
        TuningJobArn: output.TuningJobArn !== undefined && output.TuningJobArn !== null ? output.TuningJobArn : undefined,
        VpcConfig: output.VpcConfig !== undefined && output.VpcConfig !== null
            ? deserializeAws_json1_1VpcConfig(output.VpcConfig, context)
            : undefined,
    };
};
const deserializeAws_json1_1TrainingJobDefinition = (output, context) => {
    return {
        HyperParameters: output.HyperParameters !== undefined && output.HyperParameters !== null
            ? deserializeAws_json1_1HyperParameters(output.HyperParameters, context)
            : undefined,
        InputDataConfig: output.InputDataConfig !== undefined && output.InputDataConfig !== null
            ? deserializeAws_json1_1InputDataConfig(output.InputDataConfig, context)
            : undefined,
        OutputDataConfig: output.OutputDataConfig !== undefined && output.OutputDataConfig !== null
            ? deserializeAws_json1_1OutputDataConfig(output.OutputDataConfig, context)
            : undefined,
        ResourceConfig: output.ResourceConfig !== undefined && output.ResourceConfig !== null
            ? deserializeAws_json1_1ResourceConfig(output.ResourceConfig, context)
            : undefined,
        StoppingCondition: output.StoppingCondition !== undefined && output.StoppingCondition !== null
            ? deserializeAws_json1_1StoppingCondition(output.StoppingCondition, context)
            : undefined,
        TrainingInputMode: output.TrainingInputMode !== undefined && output.TrainingInputMode !== null
            ? output.TrainingInputMode
            : undefined,
    };
};
const deserializeAws_json1_1TrainingJobStatusCounters = (output, context) => {
    return {
        Completed: output.Completed !== undefined && output.Completed !== null ? output.Completed : undefined,
        InProgress: output.InProgress !== undefined && output.InProgress !== null ? output.InProgress : undefined,
        NonRetryableError: output.NonRetryableError !== undefined && output.NonRetryableError !== null
            ? output.NonRetryableError
            : undefined,
        RetryableError: output.RetryableError !== undefined && output.RetryableError !== null ? output.RetryableError : undefined,
        Stopped: output.Stopped !== undefined && output.Stopped !== null ? output.Stopped : undefined,
    };
};
const deserializeAws_json1_1TrainingJobStepMetadata = (output, context) => {
    return {
        Arn: output.Arn !== undefined && output.Arn !== null ? output.Arn : undefined,
    };
};
const deserializeAws_json1_1TrainingJobSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1TrainingJobSummary(entry, context);
    });
};
const deserializeAws_json1_1TrainingJobSummary = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        TrainingEndTime: output.TrainingEndTime !== undefined && output.TrainingEndTime !== null
            ? new Date(Math.round(output.TrainingEndTime * 1000))
            : undefined,
        TrainingJobArn: output.TrainingJobArn !== undefined && output.TrainingJobArn !== null ? output.TrainingJobArn : undefined,
        TrainingJobName: output.TrainingJobName !== undefined && output.TrainingJobName !== null ? output.TrainingJobName : undefined,
        TrainingJobStatus: output.TrainingJobStatus !== undefined && output.TrainingJobStatus !== null
            ? output.TrainingJobStatus
            : undefined,
    };
};
const deserializeAws_json1_1TrainingSpecification = (output, context) => {
    return {
        MetricDefinitions: output.MetricDefinitions !== undefined && output.MetricDefinitions !== null
            ? deserializeAws_json1_1MetricDefinitionList(output.MetricDefinitions, context)
            : undefined,
        SupportedHyperParameters: output.SupportedHyperParameters !== undefined && output.SupportedHyperParameters !== null
            ? deserializeAws_json1_1HyperParameterSpecifications(output.SupportedHyperParameters, context)
            : undefined,
        SupportedTrainingInstanceTypes: output.SupportedTrainingInstanceTypes !== undefined && output.SupportedTrainingInstanceTypes !== null
            ? deserializeAws_json1_1TrainingInstanceTypes(output.SupportedTrainingInstanceTypes, context)
            : undefined,
        SupportedTuningJobObjectiveMetrics: output.SupportedTuningJobObjectiveMetrics !== undefined && output.SupportedTuningJobObjectiveMetrics !== null
            ? deserializeAws_json1_1HyperParameterTuningJobObjectives(output.SupportedTuningJobObjectiveMetrics, context)
            : undefined,
        SupportsDistributedTraining: output.SupportsDistributedTraining !== undefined && output.SupportsDistributedTraining !== null
            ? output.SupportsDistributedTraining
            : undefined,
        TrainingChannels: output.TrainingChannels !== undefined && output.TrainingChannels !== null
            ? deserializeAws_json1_1ChannelSpecifications(output.TrainingChannels, context)
            : undefined,
        TrainingImage: output.TrainingImage !== undefined && output.TrainingImage !== null ? output.TrainingImage : undefined,
        TrainingImageDigest: output.TrainingImageDigest !== undefined && output.TrainingImageDigest !== null
            ? output.TrainingImageDigest
            : undefined,
    };
};
const deserializeAws_json1_1TransformDataSource = (output, context) => {
    return {
        S3DataSource: output.S3DataSource !== undefined && output.S3DataSource !== null
            ? deserializeAws_json1_1TransformS3DataSource(output.S3DataSource, context)
            : undefined,
    };
};
const deserializeAws_json1_1TransformEnvironmentMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const deserializeAws_json1_1TransformInput = (output, context) => {
    return {
        CompressionType: output.CompressionType !== undefined && output.CompressionType !== null ? output.CompressionType : undefined,
        ContentType: output.ContentType !== undefined && output.ContentType !== null ? output.ContentType : undefined,
        DataSource: output.DataSource !== undefined && output.DataSource !== null
            ? deserializeAws_json1_1TransformDataSource(output.DataSource, context)
            : undefined,
        SplitType: output.SplitType !== undefined && output.SplitType !== null ? output.SplitType : undefined,
    };
};
const deserializeAws_json1_1TransformInstanceTypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1TransformJob = (output, context) => {
    return {
        AutoMLJobArn: output.AutoMLJobArn !== undefined && output.AutoMLJobArn !== null ? output.AutoMLJobArn : undefined,
        BatchStrategy: output.BatchStrategy !== undefined && output.BatchStrategy !== null ? output.BatchStrategy : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        DataProcessing: output.DataProcessing !== undefined && output.DataProcessing !== null
            ? deserializeAws_json1_1DataProcessing(output.DataProcessing, context)
            : undefined,
        Environment: output.Environment !== undefined && output.Environment !== null
            ? deserializeAws_json1_1TransformEnvironmentMap(output.Environment, context)
            : undefined,
        ExperimentConfig: output.ExperimentConfig !== undefined && output.ExperimentConfig !== null
            ? deserializeAws_json1_1ExperimentConfig(output.ExperimentConfig, context)
            : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        LabelingJobArn: output.LabelingJobArn !== undefined && output.LabelingJobArn !== null ? output.LabelingJobArn : undefined,
        MaxConcurrentTransforms: output.MaxConcurrentTransforms !== undefined && output.MaxConcurrentTransforms !== null
            ? output.MaxConcurrentTransforms
            : undefined,
        MaxPayloadInMB: output.MaxPayloadInMB !== undefined && output.MaxPayloadInMB !== null ? output.MaxPayloadInMB : undefined,
        ModelClientConfig: output.ModelClientConfig !== undefined && output.ModelClientConfig !== null
            ? deserializeAws_json1_1ModelClientConfig(output.ModelClientConfig, context)
            : undefined,
        ModelName: output.ModelName !== undefined && output.ModelName !== null ? output.ModelName : undefined,
        Tags: output.Tags !== undefined && output.Tags !== null
            ? deserializeAws_json1_1TagList(output.Tags, context)
            : undefined,
        TransformEndTime: output.TransformEndTime !== undefined && output.TransformEndTime !== null
            ? new Date(Math.round(output.TransformEndTime * 1000))
            : undefined,
        TransformInput: output.TransformInput !== undefined && output.TransformInput !== null
            ? deserializeAws_json1_1TransformInput(output.TransformInput, context)
            : undefined,
        TransformJobArn: output.TransformJobArn !== undefined && output.TransformJobArn !== null ? output.TransformJobArn : undefined,
        TransformJobName: output.TransformJobName !== undefined && output.TransformJobName !== null ? output.TransformJobName : undefined,
        TransformJobStatus: output.TransformJobStatus !== undefined && output.TransformJobStatus !== null
            ? output.TransformJobStatus
            : undefined,
        TransformOutput: output.TransformOutput !== undefined && output.TransformOutput !== null
            ? deserializeAws_json1_1TransformOutput(output.TransformOutput, context)
            : undefined,
        TransformResources: output.TransformResources !== undefined && output.TransformResources !== null
            ? deserializeAws_json1_1TransformResources(output.TransformResources, context)
            : undefined,
        TransformStartTime: output.TransformStartTime !== undefined && output.TransformStartTime !== null
            ? new Date(Math.round(output.TransformStartTime * 1000))
            : undefined,
    };
};
const deserializeAws_json1_1TransformJobDefinition = (output, context) => {
    return {
        BatchStrategy: output.BatchStrategy !== undefined && output.BatchStrategy !== null ? output.BatchStrategy : undefined,
        Environment: output.Environment !== undefined && output.Environment !== null
            ? deserializeAws_json1_1TransformEnvironmentMap(output.Environment, context)
            : undefined,
        MaxConcurrentTransforms: output.MaxConcurrentTransforms !== undefined && output.MaxConcurrentTransforms !== null
            ? output.MaxConcurrentTransforms
            : undefined,
        MaxPayloadInMB: output.MaxPayloadInMB !== undefined && output.MaxPayloadInMB !== null ? output.MaxPayloadInMB : undefined,
        TransformInput: output.TransformInput !== undefined && output.TransformInput !== null
            ? deserializeAws_json1_1TransformInput(output.TransformInput, context)
            : undefined,
        TransformOutput: output.TransformOutput !== undefined && output.TransformOutput !== null
            ? deserializeAws_json1_1TransformOutput(output.TransformOutput, context)
            : undefined,
        TransformResources: output.TransformResources !== undefined && output.TransformResources !== null
            ? deserializeAws_json1_1TransformResources(output.TransformResources, context)
            : undefined,
    };
};
const deserializeAws_json1_1TransformJobStepMetadata = (output, context) => {
    return {
        Arn: output.Arn !== undefined && output.Arn !== null ? output.Arn : undefined,
    };
};
const deserializeAws_json1_1TransformJobSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1TransformJobSummary(entry, context);
    });
};
const deserializeAws_json1_1TransformJobSummary = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        FailureReason: output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        TransformEndTime: output.TransformEndTime !== undefined && output.TransformEndTime !== null
            ? new Date(Math.round(output.TransformEndTime * 1000))
            : undefined,
        TransformJobArn: output.TransformJobArn !== undefined && output.TransformJobArn !== null ? output.TransformJobArn : undefined,
        TransformJobName: output.TransformJobName !== undefined && output.TransformJobName !== null ? output.TransformJobName : undefined,
        TransformJobStatus: output.TransformJobStatus !== undefined && output.TransformJobStatus !== null
            ? output.TransformJobStatus
            : undefined,
    };
};
const deserializeAws_json1_1TransformOutput = (output, context) => {
    return {
        Accept: output.Accept !== undefined && output.Accept !== null ? output.Accept : undefined,
        AssembleWith: output.AssembleWith !== undefined && output.AssembleWith !== null ? output.AssembleWith : undefined,
        KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
        S3OutputPath: output.S3OutputPath !== undefined && output.S3OutputPath !== null ? output.S3OutputPath : undefined,
    };
};
const deserializeAws_json1_1TransformResources = (output, context) => {
    return {
        InstanceCount: output.InstanceCount !== undefined && output.InstanceCount !== null ? output.InstanceCount : undefined,
        InstanceType: output.InstanceType !== undefined && output.InstanceType !== null ? output.InstanceType : undefined,
        VolumeKmsKeyId: output.VolumeKmsKeyId !== undefined && output.VolumeKmsKeyId !== null ? output.VolumeKmsKeyId : undefined,
    };
};
const deserializeAws_json1_1TransformS3DataSource = (output, context) => {
    return {
        S3DataType: output.S3DataType !== undefined && output.S3DataType !== null ? output.S3DataType : undefined,
        S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
    };
};
const deserializeAws_json1_1Trial = (output, context) => {
    return {
        CreatedBy: output.CreatedBy !== undefined && output.CreatedBy !== null
            ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        DisplayName: output.DisplayName !== undefined && output.DisplayName !== null ? output.DisplayName : undefined,
        ExperimentName: output.ExperimentName !== undefined && output.ExperimentName !== null ? output.ExperimentName : undefined,
        LastModifiedBy: output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
            ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        MetadataProperties: output.MetadataProperties !== undefined && output.MetadataProperties !== null
            ? deserializeAws_json1_1MetadataProperties(output.MetadataProperties, context)
            : undefined,
        Source: output.Source !== undefined && output.Source !== null
            ? deserializeAws_json1_1TrialSource(output.Source, context)
            : undefined,
        Tags: output.Tags !== undefined && output.Tags !== null
            ? deserializeAws_json1_1TagList(output.Tags, context)
            : undefined,
        TrialArn: output.TrialArn !== undefined && output.TrialArn !== null ? output.TrialArn : undefined,
        TrialComponentSummaries: output.TrialComponentSummaries !== undefined && output.TrialComponentSummaries !== null
            ? deserializeAws_json1_1TrialComponentSimpleSummaries(output.TrialComponentSummaries, context)
            : undefined,
        TrialName: output.TrialName !== undefined && output.TrialName !== null ? output.TrialName : undefined,
    };
};
const deserializeAws_json1_1TrialComponent = (output, context) => {
    return {
        CreatedBy: output.CreatedBy !== undefined && output.CreatedBy !== null
            ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        DisplayName: output.DisplayName !== undefined && output.DisplayName !== null ? output.DisplayName : undefined,
        EndTime: output.EndTime !== undefined && output.EndTime !== null ? new Date(Math.round(output.EndTime * 1000)) : undefined,
        InputArtifacts: output.InputArtifacts !== undefined && output.InputArtifacts !== null
            ? deserializeAws_json1_1TrialComponentArtifacts(output.InputArtifacts, context)
            : undefined,
        LastModifiedBy: output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
            ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        MetadataProperties: output.MetadataProperties !== undefined && output.MetadataProperties !== null
            ? deserializeAws_json1_1MetadataProperties(output.MetadataProperties, context)
            : undefined,
        Metrics: output.Metrics !== undefined && output.Metrics !== null
            ? deserializeAws_json1_1TrialComponentMetricSummaries(output.Metrics, context)
            : undefined,
        OutputArtifacts: output.OutputArtifacts !== undefined && output.OutputArtifacts !== null
            ? deserializeAws_json1_1TrialComponentArtifacts(output.OutputArtifacts, context)
            : undefined,
        Parameters: output.Parameters !== undefined && output.Parameters !== null
            ? deserializeAws_json1_1TrialComponentParameters(output.Parameters, context)
            : undefined,
        Parents: output.Parents !== undefined && output.Parents !== null
            ? deserializeAws_json1_1Parents(output.Parents, context)
            : undefined,
        Source: output.Source !== undefined && output.Source !== null
            ? deserializeAws_json1_1TrialComponentSource(output.Source, context)
            : undefined,
        SourceDetail: output.SourceDetail !== undefined && output.SourceDetail !== null
            ? deserializeAws_json1_1TrialComponentSourceDetail(output.SourceDetail, context)
            : undefined,
        StartTime: output.StartTime !== undefined && output.StartTime !== null
            ? new Date(Math.round(output.StartTime * 1000))
            : undefined,
        Status: output.Status !== undefined && output.Status !== null
            ? deserializeAws_json1_1TrialComponentStatus(output.Status, context)
            : undefined,
        Tags: output.Tags !== undefined && output.Tags !== null
            ? deserializeAws_json1_1TagList(output.Tags, context)
            : undefined,
        TrialComponentArn: output.TrialComponentArn !== undefined && output.TrialComponentArn !== null
            ? output.TrialComponentArn
            : undefined,
        TrialComponentName: output.TrialComponentName !== undefined && output.TrialComponentName !== null
            ? output.TrialComponentName
            : undefined,
    };
};
const deserializeAws_json1_1TrialComponentArtifact = (output, context) => {
    return {
        MediaType: output.MediaType !== undefined && output.MediaType !== null ? output.MediaType : undefined,
        Value: output.Value !== undefined && output.Value !== null ? output.Value : undefined,
    };
};
const deserializeAws_json1_1TrialComponentArtifacts = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: deserializeAws_json1_1TrialComponentArtifact(value, context),
        };
    }, {});
};
const deserializeAws_json1_1TrialComponentMetricSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1TrialComponentMetricSummary(entry, context);
    });
};
const deserializeAws_json1_1TrialComponentMetricSummary = (output, context) => {
    return {
        Avg: output.Avg !== undefined && output.Avg !== null ? output.Avg : undefined,
        Count: output.Count !== undefined && output.Count !== null ? output.Count : undefined,
        Last: output.Last !== undefined && output.Last !== null ? output.Last : undefined,
        Max: output.Max !== undefined && output.Max !== null ? output.Max : undefined,
        MetricName: output.MetricName !== undefined && output.MetricName !== null ? output.MetricName : undefined,
        Min: output.Min !== undefined && output.Min !== null ? output.Min : undefined,
        SourceArn: output.SourceArn !== undefined && output.SourceArn !== null ? output.SourceArn : undefined,
        StdDev: output.StdDev !== undefined && output.StdDev !== null ? output.StdDev : undefined,
        TimeStamp: output.TimeStamp !== undefined && output.TimeStamp !== null
            ? new Date(Math.round(output.TimeStamp * 1000))
            : undefined,
    };
};
const deserializeAws_json1_1TrialComponentParameters = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: deserializeAws_json1_1TrialComponentParameterValue(value, context),
        };
    }, {});
};
const deserializeAws_json1_1TrialComponentParameterValue = (output, context) => {
    if (output.NumberValue !== undefined && output.NumberValue !== null) {
        return {
            NumberValue: output.NumberValue,
        };
    }
    if (output.StringValue !== undefined && output.StringValue !== null) {
        return {
            StringValue: output.StringValue,
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const deserializeAws_json1_1TrialComponentSimpleSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1TrialComponentSimpleSummary(entry, context);
    });
};
const deserializeAws_json1_1TrialComponentSimpleSummary = (output, context) => {
    return {
        CreatedBy: output.CreatedBy !== undefined && output.CreatedBy !== null
            ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        TrialComponentArn: output.TrialComponentArn !== undefined && output.TrialComponentArn !== null
            ? output.TrialComponentArn
            : undefined,
        TrialComponentName: output.TrialComponentName !== undefined && output.TrialComponentName !== null
            ? output.TrialComponentName
            : undefined,
        TrialComponentSource: output.TrialComponentSource !== undefined && output.TrialComponentSource !== null
            ? deserializeAws_json1_1TrialComponentSource(output.TrialComponentSource, context)
            : undefined,
    };
};
const deserializeAws_json1_1TrialComponentSource = (output, context) => {
    return {
        SourceArn: output.SourceArn !== undefined && output.SourceArn !== null ? output.SourceArn : undefined,
        SourceType: output.SourceType !== undefined && output.SourceType !== null ? output.SourceType : undefined,
    };
};
const deserializeAws_json1_1TrialComponentSourceDetail = (output, context) => {
    return {
        ProcessingJob: output.ProcessingJob !== undefined && output.ProcessingJob !== null
            ? deserializeAws_json1_1ProcessingJob(output.ProcessingJob, context)
            : undefined,
        SourceArn: output.SourceArn !== undefined && output.SourceArn !== null ? output.SourceArn : undefined,
        TrainingJob: output.TrainingJob !== undefined && output.TrainingJob !== null
            ? deserializeAws_json1_1TrainingJob(output.TrainingJob, context)
            : undefined,
        TransformJob: output.TransformJob !== undefined && output.TransformJob !== null
            ? deserializeAws_json1_1TransformJob(output.TransformJob, context)
            : undefined,
    };
};
const deserializeAws_json1_1TrialComponentStatus = (output, context) => {
    return {
        Message: output.Message !== undefined && output.Message !== null ? output.Message : undefined,
        PrimaryStatus: output.PrimaryStatus !== undefined && output.PrimaryStatus !== null ? output.PrimaryStatus : undefined,
    };
};
const deserializeAws_json1_1TrialComponentSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1TrialComponentSummary(entry, context);
    });
};
const deserializeAws_json1_1TrialComponentSummary = (output, context) => {
    return {
        CreatedBy: output.CreatedBy !== undefined && output.CreatedBy !== null
            ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
            : undefined,
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        DisplayName: output.DisplayName !== undefined && output.DisplayName !== null ? output.DisplayName : undefined,
        EndTime: output.EndTime !== undefined && output.EndTime !== null ? new Date(Math.round(output.EndTime * 1000)) : undefined,
        LastModifiedBy: output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
            ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
            : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        StartTime: output.StartTime !== undefined && output.StartTime !== null
            ? new Date(Math.round(output.StartTime * 1000))
            : undefined,
        Status: output.Status !== undefined && output.Status !== null
            ? deserializeAws_json1_1TrialComponentStatus(output.Status, context)
            : undefined,
        TrialComponentArn: output.TrialComponentArn !== undefined && output.TrialComponentArn !== null
            ? output.TrialComponentArn
            : undefined,
        TrialComponentName: output.TrialComponentName !== undefined && output.TrialComponentName !== null
            ? output.TrialComponentName
            : undefined,
        TrialComponentSource: output.TrialComponentSource !== undefined && output.TrialComponentSource !== null
            ? deserializeAws_json1_1TrialComponentSource(output.TrialComponentSource, context)
            : undefined,
    };
};
const deserializeAws_json1_1TrialSource = (output, context) => {
    return {
        SourceArn: output.SourceArn !== undefined && output.SourceArn !== null ? output.SourceArn : undefined,
        SourceType: output.SourceType !== undefined && output.SourceType !== null ? output.SourceType : undefined,
    };
};
const deserializeAws_json1_1TrialSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1TrialSummary(entry, context);
    });
};
const deserializeAws_json1_1TrialSummary = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        DisplayName: output.DisplayName !== undefined && output.DisplayName !== null ? output.DisplayName : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        TrialArn: output.TrialArn !== undefined && output.TrialArn !== null ? output.TrialArn : undefined,
        TrialName: output.TrialName !== undefined && output.TrialName !== null ? output.TrialName : undefined,
        TrialSource: output.TrialSource !== undefined && output.TrialSource !== null
            ? deserializeAws_json1_1TrialSource(output.TrialSource, context)
            : undefined,
    };
};
const deserializeAws_json1_1TuningJobCompletionCriteria = (output, context) => {
    return {
        TargetObjectiveMetricValue: output.TargetObjectiveMetricValue !== undefined && output.TargetObjectiveMetricValue !== null
            ? output.TargetObjectiveMetricValue
            : undefined,
    };
};
const deserializeAws_json1_1UiConfig = (output, context) => {
    return {
        HumanTaskUiArn: output.HumanTaskUiArn !== undefined && output.HumanTaskUiArn !== null ? output.HumanTaskUiArn : undefined,
        UiTemplateS3Uri: output.UiTemplateS3Uri !== undefined && output.UiTemplateS3Uri !== null ? output.UiTemplateS3Uri : undefined,
    };
};
const deserializeAws_json1_1UiTemplateInfo = (output, context) => {
    return {
        ContentSha256: output.ContentSha256 !== undefined && output.ContentSha256 !== null ? output.ContentSha256 : undefined,
        Url: output.Url !== undefined && output.Url !== null ? output.Url : undefined,
    };
};
const deserializeAws_json1_1UpdateActionResponse = (output, context) => {
    return {
        ActionArn: output.ActionArn !== undefined && output.ActionArn !== null ? output.ActionArn : undefined,
    };
};
const deserializeAws_json1_1UpdateAppImageConfigResponse = (output, context) => {
    return {
        AppImageConfigArn: output.AppImageConfigArn !== undefined && output.AppImageConfigArn !== null
            ? output.AppImageConfigArn
            : undefined,
    };
};
const deserializeAws_json1_1UpdateArtifactResponse = (output, context) => {
    return {
        ArtifactArn: output.ArtifactArn !== undefined && output.ArtifactArn !== null ? output.ArtifactArn : undefined,
    };
};
const deserializeAws_json1_1UpdateCodeRepositoryOutput = (output, context) => {
    return {
        CodeRepositoryArn: output.CodeRepositoryArn !== undefined && output.CodeRepositoryArn !== null
            ? output.CodeRepositoryArn
            : undefined,
    };
};
const deserializeAws_json1_1UpdateContextResponse = (output, context) => {
    return {
        ContextArn: output.ContextArn !== undefined && output.ContextArn !== null ? output.ContextArn : undefined,
    };
};
const deserializeAws_json1_1UpdateDomainResponse = (output, context) => {
    return {
        DomainArn: output.DomainArn !== undefined && output.DomainArn !== null ? output.DomainArn : undefined,
    };
};
const deserializeAws_json1_1UpdateEndpointOutput = (output, context) => {
    return {
        EndpointArn: output.EndpointArn !== undefined && output.EndpointArn !== null ? output.EndpointArn : undefined,
    };
};
const deserializeAws_json1_1UpdateEndpointWeightsAndCapacitiesOutput = (output, context) => {
    return {
        EndpointArn: output.EndpointArn !== undefined && output.EndpointArn !== null ? output.EndpointArn : undefined,
    };
};
const deserializeAws_json1_1UpdateExperimentResponse = (output, context) => {
    return {
        ExperimentArn: output.ExperimentArn !== undefined && output.ExperimentArn !== null ? output.ExperimentArn : undefined,
    };
};
const deserializeAws_json1_1UpdateImageResponse = (output, context) => {
    return {
        ImageArn: output.ImageArn !== undefined && output.ImageArn !== null ? output.ImageArn : undefined,
    };
};
const deserializeAws_json1_1UpdateModelPackageOutput = (output, context) => {
    return {
        ModelPackageArn: output.ModelPackageArn !== undefined && output.ModelPackageArn !== null ? output.ModelPackageArn : undefined,
    };
};
const deserializeAws_json1_1UpdateMonitoringScheduleResponse = (output, context) => {
    return {
        MonitoringScheduleArn: output.MonitoringScheduleArn !== undefined && output.MonitoringScheduleArn !== null
            ? output.MonitoringScheduleArn
            : undefined,
    };
};
const deserializeAws_json1_1UpdateNotebookInstanceLifecycleConfigOutput = (output, context) => {
    return {};
};
const deserializeAws_json1_1UpdateNotebookInstanceOutput = (output, context) => {
    return {};
};
const deserializeAws_json1_1UpdatePipelineExecutionResponse = (output, context) => {
    return {
        PipelineExecutionArn: output.PipelineExecutionArn !== undefined && output.PipelineExecutionArn !== null
            ? output.PipelineExecutionArn
            : undefined,
    };
};
const deserializeAws_json1_1UpdatePipelineResponse = (output, context) => {
    return {
        PipelineArn: output.PipelineArn !== undefined && output.PipelineArn !== null ? output.PipelineArn : undefined,
    };
};
const deserializeAws_json1_1UpdateTrainingJobResponse = (output, context) => {
    return {
        TrainingJobArn: output.TrainingJobArn !== undefined && output.TrainingJobArn !== null ? output.TrainingJobArn : undefined,
    };
};
const deserializeAws_json1_1UpdateTrialComponentResponse = (output, context) => {
    return {
        TrialComponentArn: output.TrialComponentArn !== undefined && output.TrialComponentArn !== null
            ? output.TrialComponentArn
            : undefined,
    };
};
const deserializeAws_json1_1UpdateTrialResponse = (output, context) => {
    return {
        TrialArn: output.TrialArn !== undefined && output.TrialArn !== null ? output.TrialArn : undefined,
    };
};
const deserializeAws_json1_1UpdateUserProfileResponse = (output, context) => {
    return {
        UserProfileArn: output.UserProfileArn !== undefined && output.UserProfileArn !== null ? output.UserProfileArn : undefined,
    };
};
const deserializeAws_json1_1UpdateWorkforceResponse = (output, context) => {
    return {
        Workforce: output.Workforce !== undefined && output.Workforce !== null
            ? deserializeAws_json1_1Workforce(output.Workforce, context)
            : undefined,
    };
};
const deserializeAws_json1_1UpdateWorkteamResponse = (output, context) => {
    return {
        Workteam: output.Workteam !== undefined && output.Workteam !== null
            ? deserializeAws_json1_1Workteam(output.Workteam, context)
            : undefined,
    };
};
const deserializeAws_json1_1USD = (output, context) => {
    return {
        Cents: output.Cents !== undefined && output.Cents !== null ? output.Cents : undefined,
        Dollars: output.Dollars !== undefined && output.Dollars !== null ? output.Dollars : undefined,
        TenthFractionsOfACent: output.TenthFractionsOfACent !== undefined && output.TenthFractionsOfACent !== null
            ? output.TenthFractionsOfACent
            : undefined,
    };
};
const deserializeAws_json1_1UserContext = (output, context) => {
    return {
        DomainId: output.DomainId !== undefined && output.DomainId !== null ? output.DomainId : undefined,
        UserProfileArn: output.UserProfileArn !== undefined && output.UserProfileArn !== null ? output.UserProfileArn : undefined,
        UserProfileName: output.UserProfileName !== undefined && output.UserProfileName !== null ? output.UserProfileName : undefined,
    };
};
const deserializeAws_json1_1UserProfileDetails = (output, context) => {
    return {
        CreationTime: output.CreationTime !== undefined && output.CreationTime !== null
            ? new Date(Math.round(output.CreationTime * 1000))
            : undefined,
        DomainId: output.DomainId !== undefined && output.DomainId !== null ? output.DomainId : undefined,
        LastModifiedTime: output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
            ? new Date(Math.round(output.LastModifiedTime * 1000))
            : undefined,
        Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
        UserProfileName: output.UserProfileName !== undefined && output.UserProfileName !== null ? output.UserProfileName : undefined,
    };
};
const deserializeAws_json1_1UserProfileList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1UserProfileDetails(entry, context);
    });
};
const deserializeAws_json1_1UserSettings = (output, context) => {
    return {
        ExecutionRole: output.ExecutionRole !== undefined && output.ExecutionRole !== null ? output.ExecutionRole : undefined,
        JupyterServerAppSettings: output.JupyterServerAppSettings !== undefined && output.JupyterServerAppSettings !== null
            ? deserializeAws_json1_1JupyterServerAppSettings(output.JupyterServerAppSettings, context)
            : undefined,
        KernelGatewayAppSettings: output.KernelGatewayAppSettings !== undefined && output.KernelGatewayAppSettings !== null
            ? deserializeAws_json1_1KernelGatewayAppSettings(output.KernelGatewayAppSettings, context)
            : undefined,
        SecurityGroups: output.SecurityGroups !== undefined && output.SecurityGroups !== null
            ? deserializeAws_json1_1SecurityGroupIds(output.SecurityGroups, context)
            : undefined,
        SharingSettings: output.SharingSettings !== undefined && output.SharingSettings !== null
            ? deserializeAws_json1_1SharingSettings(output.SharingSettings, context)
            : undefined,
        TensorBoardAppSettings: output.TensorBoardAppSettings !== undefined && output.TensorBoardAppSettings !== null
            ? deserializeAws_json1_1TensorBoardAppSettings(output.TensorBoardAppSettings, context)
            : undefined,
    };
};
const deserializeAws_json1_1VpcConfig = (output, context) => {
    return {
        SecurityGroupIds: output.SecurityGroupIds !== undefined && output.SecurityGroupIds !== null
            ? deserializeAws_json1_1VpcSecurityGroupIds(output.SecurityGroupIds, context)
            : undefined,
        Subnets: output.Subnets !== undefined && output.Subnets !== null
            ? deserializeAws_json1_1Subnets(output.Subnets, context)
            : undefined,
    };
};
const deserializeAws_json1_1VpcSecurityGroupIds = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeAws_json1_1Workforce = (output, context) => {
    return {
        CognitoConfig: output.CognitoConfig !== undefined && output.CognitoConfig !== null
            ? deserializeAws_json1_1CognitoConfig(output.CognitoConfig, context)
            : undefined,
        CreateDate: output.CreateDate !== undefined && output.CreateDate !== null
            ? new Date(Math.round(output.CreateDate * 1000))
            : undefined,
        LastUpdatedDate: output.LastUpdatedDate !== undefined && output.LastUpdatedDate !== null
            ? new Date(Math.round(output.LastUpdatedDate * 1000))
            : undefined,
        OidcConfig: output.OidcConfig !== undefined && output.OidcConfig !== null
            ? deserializeAws_json1_1OidcConfigForResponse(output.OidcConfig, context)
            : undefined,
        SourceIpConfig: output.SourceIpConfig !== undefined && output.SourceIpConfig !== null
            ? deserializeAws_json1_1SourceIpConfig(output.SourceIpConfig, context)
            : undefined,
        SubDomain: output.SubDomain !== undefined && output.SubDomain !== null ? output.SubDomain : undefined,
        WorkforceArn: output.WorkforceArn !== undefined && output.WorkforceArn !== null ? output.WorkforceArn : undefined,
        WorkforceName: output.WorkforceName !== undefined && output.WorkforceName !== null ? output.WorkforceName : undefined,
    };
};
const deserializeAws_json1_1Workforces = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Workforce(entry, context);
    });
};
const deserializeAws_json1_1Workteam = (output, context) => {
    return {
        CreateDate: output.CreateDate !== undefined && output.CreateDate !== null
            ? new Date(Math.round(output.CreateDate * 1000))
            : undefined,
        Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
        LastUpdatedDate: output.LastUpdatedDate !== undefined && output.LastUpdatedDate !== null
            ? new Date(Math.round(output.LastUpdatedDate * 1000))
            : undefined,
        MemberDefinitions: output.MemberDefinitions !== undefined && output.MemberDefinitions !== null
            ? deserializeAws_json1_1MemberDefinitions(output.MemberDefinitions, context)
            : undefined,
        NotificationConfiguration: output.NotificationConfiguration !== undefined && output.NotificationConfiguration !== null
            ? deserializeAws_json1_1NotificationConfiguration(output.NotificationConfiguration, context)
            : undefined,
        ProductListingIds: output.ProductListingIds !== undefined && output.ProductListingIds !== null
            ? deserializeAws_json1_1ProductListings(output.ProductListingIds, context)
            : undefined,
        SubDomain: output.SubDomain !== undefined && output.SubDomain !== null ? output.SubDomain : undefined,
        WorkforceArn: output.WorkforceArn !== undefined && output.WorkforceArn !== null ? output.WorkforceArn : undefined,
        WorkteamArn: output.WorkteamArn !== undefined && output.WorkteamArn !== null ? output.WorkteamArn : undefined,
        WorkteamName: output.WorkteamName !== undefined && output.WorkteamName !== null ? output.WorkteamName : undefined,
    };
};
const deserializeAws_json1_1Workteams = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Workteam(entry, context);
    });
};
const deserializeMetadata = (output) => {
    var _a;
    return ({
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"],
    });
};
// Collect low-level response body stream to Uint8Array.
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
// Encode Uint8Array data into string with utf-8.
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
/**
 * Load an error code for the aws.rest-json-1.1 protocol.
 */
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
    return "";
};
//# sourceMappingURL=Aws_json1_1.js.map