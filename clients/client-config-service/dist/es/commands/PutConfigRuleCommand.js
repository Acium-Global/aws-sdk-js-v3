import { __extends } from "tslib";
import { PutConfigRuleRequest } from "../models/models_0";
import { deserializeAws_json1_1PutConfigRuleCommand, serializeAws_json1_1PutConfigRuleCommand, } from "../protocols/Aws_json1_1";
import { getSerdePlugin } from "@aws-sdk/middleware-serde";
import { Command as $Command } from "@aws-sdk/smithy-client";
/**
 * <p>Adds or updates an AWS Config rule for evaluating whether your
 * 			AWS resources comply with your desired configurations.</p>
 * 		       <p>You can use this action for custom AWS Config rules and AWS
 * 			managed Config rules. A custom AWS Config rule is a rule that you
 * 			develop and maintain. An AWS managed Config rule is a customizable,
 * 			predefined rule that AWS Config provides.</p>
 * 		       <p>If you are adding a new custom AWS Config rule, you must first
 * 			create the AWS Lambda function that the rule invokes to evaluate
 * 			your resources. When you use the <code>PutConfigRule</code> action
 * 			to add the rule to AWS Config, you must specify the Amazon Resource
 * 			Name (ARN) that AWS Lambda assigns to the function. Specify the ARN
 * 			for the <code>SourceIdentifier</code> key. This key is part of the
 * 				<code>Source</code> object, which is part of the
 * 				<code>ConfigRule</code> object. </p>
 * 		       <p>If you are adding an AWS managed Config rule, specify the
 * 			rule's identifier for the <code>SourceIdentifier</code> key. To
 * 			reference AWS managed Config rule identifiers, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html">About AWS Managed Config Rules</a>.</p>
 * 		       <p>For any new rule that you add, specify the
 * 				<code>ConfigRuleName</code> in the <code>ConfigRule</code>
 * 			object. Do not specify the <code>ConfigRuleArn</code> or the
 * 				<code>ConfigRuleId</code>. These values are generated by AWS
 * 			Config for new rules.</p>
 * 		       <p>If you are updating a rule that you added previously, you can
 * 			specify the rule by <code>ConfigRuleName</code>,
 * 				<code>ConfigRuleId</code>, or <code>ConfigRuleArn</code> in the
 * 				<code>ConfigRule</code> data type that you use in this
 * 			request.</p>
 * 		       <p>The maximum number of rules that AWS Config supports is 150.</p>
 *
 * 		       <p>For information about requesting a rule limit increase, see
 * 				<a href="http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_config">AWS Config Limits</a> in the <i>AWS General
 * 				Reference Guide</i>.</p>
 *
 * 		       <p>For more information about developing and using AWS Config
 * 			rules, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config.html">Evaluating AWS Resource Configurations with AWS Config</a>
 * 			in the <i>AWS Config Developer Guide</i>.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { ConfigServiceClient, PutConfigRuleCommand } from "@aws-sdk/client-config-service"; // ES Modules import
 * // const { ConfigServiceClient, PutConfigRuleCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
 * const client = new ConfigServiceClient(config);
 * const command = new PutConfigRuleCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link PutConfigRuleCommandInput} for command's `input` shape.
 * @see {@link PutConfigRuleCommandOutput} for command's `response` shape.
 * @see {@link ConfigServiceClientResolvedConfig | config} for command's `input` shape.
 *
 */
var PutConfigRuleCommand = /** @class */ (function (_super) {
    __extends(PutConfigRuleCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function PutConfigRuleCommand(input) {
        var _this = 
        // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
        // End section: command_constructor
    }
    /**
     * @internal
     */
    PutConfigRuleCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "ConfigServiceClient";
        var commandName = "PutConfigRuleCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: PutConfigRuleRequest.filterSensitiveLog,
            outputFilterSensitiveLog: function (output) { return output; },
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutConfigRuleCommand.prototype.serialize = function (input, context) {
        return serializeAws_json1_1PutConfigRuleCommand(input, context);
    };
    PutConfigRuleCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_json1_1PutConfigRuleCommand(output, context);
    };
    return PutConfigRuleCommand;
}($Command));
export { PutConfigRuleCommand };
//# sourceMappingURL=PutConfigRuleCommand.js.map