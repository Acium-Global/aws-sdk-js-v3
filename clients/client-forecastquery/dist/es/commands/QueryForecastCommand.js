import { __extends } from "tslib";
import { QueryForecastRequest, QueryForecastResponse } from "../models/models_0";
import { deserializeAws_json1_1QueryForecastCommand, serializeAws_json1_1QueryForecastCommand, } from "../protocols/Aws_json1_1";
import { getSerdePlugin } from "@aws-sdk/middleware-serde";
import { Command as $Command } from "@aws-sdk/smithy-client";
/**
 * <p>Retrieves a forecast for a single item, filtered by the supplied criteria.</p>
 *          <p>The criteria is a key-value pair. The key is either <code>item_id</code> (or the
 *       equivalent non-timestamp, non-target field) from the <code>TARGET_TIME_SERIES</code> dataset,
 *       or one of the forecast dimensions specified as part of the <code>FeaturizationConfig</code>
 *       object.</p>
 *          <p>By default, <code>QueryForecast</code> returns the complete date range for the filtered
 *       forecast. You can request a specific date range.</p>
 *          <p>To get the full forecast, use the <a href="https://docs.aws.amazon.com/en_us/forecast/latest/dg/API_CreateForecastExportJob.html">CreateForecastExportJob</a> operation.</p>
 *          <note>
 *             <p>The forecasts generated by Amazon Forecast are in the same timezone as the dataset that was
 *         used to create the predictor.</p>
 *          </note>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { ForecastqueryClient, QueryForecastCommand } from "@aws-sdk/client-forecastquery"; // ES Modules import
 * // const { ForecastqueryClient, QueryForecastCommand } = require("@aws-sdk/client-forecastquery"); // CommonJS import
 * const client = new ForecastqueryClient(config);
 * const command = new QueryForecastCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link QueryForecastCommandInput} for command's `input` shape.
 * @see {@link QueryForecastCommandOutput} for command's `response` shape.
 * @see {@link ForecastqueryClientResolvedConfig | config} for command's `input` shape.
 *
 */
var QueryForecastCommand = /** @class */ (function (_super) {
    __extends(QueryForecastCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function QueryForecastCommand(input) {
        var _this = 
        // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
        // End section: command_constructor
    }
    /**
     * @internal
     */
    QueryForecastCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "ForecastqueryClient";
        var commandName = "QueryForecastCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: QueryForecastRequest.filterSensitiveLog,
            outputFilterSensitiveLog: QueryForecastResponse.filterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    QueryForecastCommand.prototype.serialize = function (input, context) {
        return serializeAws_json1_1QueryForecastCommand(input, context);
    };
    QueryForecastCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_json1_1QueryForecastCommand(output, context);
    };
    return QueryForecastCommand;
}($Command));
export { QueryForecastCommand };
//# sourceMappingURL=QueryForecastCommand.js.map