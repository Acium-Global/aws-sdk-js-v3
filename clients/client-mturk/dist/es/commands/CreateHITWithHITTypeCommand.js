import { __extends } from "tslib";
import { CreateHITWithHITTypeRequest, CreateHITWithHITTypeResponse } from "../models/models_0";
import { deserializeAws_json1_1CreateHITWithHITTypeCommand, serializeAws_json1_1CreateHITWithHITTypeCommand, } from "../protocols/Aws_json1_1";
import { getSerdePlugin } from "@aws-sdk/middleware-serde";
import { Command as $Command } from "@aws-sdk/smithy-client";
/**
 * <p>
 *             The <code>CreateHITWithHITType</code> operation creates a new Human Intelligence Task (HIT)
 *             using an existing HITTypeID generated by the <code>CreateHITType</code> operation.
 *         </p>
 *         <p>
 *             This is an alternative way to create HITs from the <code>CreateHIT</code> operation.
 *             This is the recommended best practice for Requesters who are creating large numbers of HITs.
 *         </p>
 *         <p>CreateHITWithHITType also supports several ways to provide question data:
 *             by providing a value for the <code>Question</code> parameter that fully specifies the contents of the HIT,
 *             or by providing a <code>HitLayoutId</code> and associated <code>HitLayoutParameters</code>.
 *         </p>
 *         <note>
 *             <p>
 *                 If a HIT is created with 10 or more maximum assignments, there is an additional fee.
 *                 For more information, see <a href="https://requester.mturk.com/pricing">Amazon Mechanical Turk Pricing</a>.
 *             </p>
 *         </note>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { MTurkClient, CreateHITWithHITTypeCommand } from "@aws-sdk/client-mturk"; // ES Modules import
 * // const { MTurkClient, CreateHITWithHITTypeCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
 * const client = new MTurkClient(config);
 * const command = new CreateHITWithHITTypeCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link CreateHITWithHITTypeCommandInput} for command's `input` shape.
 * @see {@link CreateHITWithHITTypeCommandOutput} for command's `response` shape.
 * @see {@link MTurkClientResolvedConfig | config} for command's `input` shape.
 *
 */
var CreateHITWithHITTypeCommand = /** @class */ (function (_super) {
    __extends(CreateHITWithHITTypeCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function CreateHITWithHITTypeCommand(input) {
        var _this = 
        // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
        // End section: command_constructor
    }
    /**
     * @internal
     */
    CreateHITWithHITTypeCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "MTurkClient";
        var commandName = "CreateHITWithHITTypeCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: CreateHITWithHITTypeRequest.filterSensitiveLog,
            outputFilterSensitiveLog: CreateHITWithHITTypeResponse.filterSensitiveLog,
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    CreateHITWithHITTypeCommand.prototype.serialize = function (input, context) {
        return serializeAws_json1_1CreateHITWithHITTypeCommand(input, context);
    };
    CreateHITWithHITTypeCommand.prototype.deserialize = function (output, context) {
        return deserializeAws_json1_1CreateHITWithHITTypeCommand(output, context);
    };
    return CreateHITWithHITTypeCommand;
}($Command));
export { CreateHITWithHITTypeCommand };
//# sourceMappingURL=CreateHITWithHITTypeCommand.js.map