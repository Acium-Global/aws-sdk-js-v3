import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../MTurkClient";
import { CreateHITWithHITTypeRequest, CreateHITWithHITTypeResponse } from "../models/models_0";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, MiddlewareStack, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer } from "@aws-sdk/types";
export interface CreateHITWithHITTypeCommandInput extends CreateHITWithHITTypeRequest {
}
export interface CreateHITWithHITTypeCommandOutput extends CreateHITWithHITTypeResponse, __MetadataBearer {
}
/**
 * <p>
 *             The <code>CreateHITWithHITType</code> operation creates a new Human Intelligence Task (HIT)
 *             using an existing HITTypeID generated by the <code>CreateHITType</code> operation.
 *         </p>
 *         <p>
 *             This is an alternative way to create HITs from the <code>CreateHIT</code> operation.
 *             This is the recommended best practice for Requesters who are creating large numbers of HITs.
 *         </p>
 *         <p>CreateHITWithHITType also supports several ways to provide question data:
 *             by providing a value for the <code>Question</code> parameter that fully specifies the contents of the HIT,
 *             or by providing a <code>HitLayoutId</code> and associated <code>HitLayoutParameters</code>.
 *         </p>
 *         <note>
 *             <p>
 *                 If a HIT is created with 10 or more maximum assignments, there is an additional fee.
 *                 For more information, see <a href="https://requester.mturk.com/pricing">Amazon Mechanical Turk Pricing</a>.
 *             </p>
 *         </note>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { MTurkClient, CreateHITWithHITTypeCommand } from "@aws-sdk/client-mturk"; // ES Modules import
 * // const { MTurkClient, CreateHITWithHITTypeCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
 * const client = new MTurkClient(config);
 * const command = new CreateHITWithHITTypeCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link CreateHITWithHITTypeCommandInput} for command's `input` shape.
 * @see {@link CreateHITWithHITTypeCommandOutput} for command's `response` shape.
 * @see {@link MTurkClientResolvedConfig | config} for command's `input` shape.
 *
 */
export declare class CreateHITWithHITTypeCommand extends $Command<CreateHITWithHITTypeCommandInput, CreateHITWithHITTypeCommandOutput, MTurkClientResolvedConfig> {
    readonly input: CreateHITWithHITTypeCommandInput;
    constructor(input: CreateHITWithHITTypeCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateHITWithHITTypeCommandInput, CreateHITWithHITTypeCommandOutput>;
    private serialize;
    private deserialize;
}
